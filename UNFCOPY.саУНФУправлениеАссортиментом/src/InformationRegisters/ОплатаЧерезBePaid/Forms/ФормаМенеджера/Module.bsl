&НаСервере
Процедура УстановитьОтборТекущиеДела()
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru='Оплата через BePaid'");
	Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолужирныйШрифт()
	Возврат Новый Шрифт(, , Истина);
КонецФункции


&НаСервере
Процедура УстановитьУсловноеОформлениеСборкиЗаказов()
УсловноеОформление.Элементы.Очистить();
// Красная строка
УсловноеОформлениеКраснаяСтрока = УсловноеОформление.Элементы.Добавить();
РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКраснаяСтрока, "ЦветТекста", WebЦвета.Красный);
РаботаСФормой.ДобавитьЭлементУсловногоОформления(УсловноеОформлениеКраснаяСтрока, "Шрифт", ПолужирныйШрифт());

РаботаСФормой.ДобавитьОформляемыеПоля(УсловноеОформлениеКраснаяСтрока,
"Список");
РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(УсловноеОформлениеКраснаяСтрока.Отбор,
"Список.Сумма", 0, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);

КонецПроцедуры

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток.НайтиПоИдентификатору(МеткаИД);
	Если СтрокаМеток <> Неопределено И СтрокаМеток.ИмяПоляОтбора = "ВидЗаказа" Тогда
		ЭтотОбъект.ТребуетсяОбновитьДанныеВыбораСостояния = Истина;
	КонецЕсли;
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "ДатаСоздания");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	//ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	УстановитьОтборТекущиеДела();
	КонтекстноеОткрытие = Параметры.Свойство("ТекущиеДела");
	
	Если Не КонтекстноеОткрытие Тогда
		// УНФ.ОтборыСписка
		РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
		// Конец УНФ.ОтборыСписка
	КонецЕсли;
    УстановитьУсловноеОформлениеСборкиЗаказов()

КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	//Если Не КонтекстноеОткрытие И Не ЗавершениеРаботы Тогда
		// УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		// Конец УНФ.ОтборыСписка
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерЗаказаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ОтборНомерЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("НомерЗаказа", Элемент.Родитель.Имя, ОтборНомерЗаказа);
	ОтборНомерЗаказа = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_Bitrix");
	Если НЕ ОМ = Неопределено Тогда
		ОМ.ОтчетНаСервере(ТекущаяДата());
		ОМ.ОтчетНаСервере(ТекущаяДата(),"erip");
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
	Элементы.Список.Обновить();
	УстановитьУсловноеОформлениеСборкиЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭлементыПользовательскихНастроек = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
    Для Каждого НастройкаСписка Из ЭлементыПользовательскихНастроек Цикл

        Если ТипЗнч(НастройкаСписка) = ТипЗнч(Список.КомпоновщикНастроек.Настройки.Порядок) Тогда

            НастройкаСписка.Элементы.Очистить();
            // Первая сортировка - по дате 
			УсловиеСортировкиДС = НастройкаСписка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
            УсловиеСортировкиДС.Поле = Новый ПолеКомпоновкиДанных("ДатаСоздания");
            УсловиеСортировкиДС.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
            УсловиеСортировкиДС.Использование = Истина;
            // Вторая сортировка - по номеру 
			УсловиеСортировкиДС = НастройкаСписка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
            УсловиеСортировкиДС.Поле = Новый ПолеКомпоновкиДанных("НомерЗаказа");
            УсловиеСортировкиДС.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
            УсловиеСортировкиДС.Использование = Истина;
            
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

#КонецОбласти
