Функция ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяВременнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


Функция ПолучитьСписокРолейПользователя(Идентификатор) Экспорт  
	
	СписокРолей = Новый Структура;
	//	Массив =     ПользователиИнформационнойБазы.ПолучитьПользователей();
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	Для Каждого Роль ИЗ Пользователь.Роли Цикл
		СписокРолей.Вставить(Роль.Имя);
	КонецЦикла;
	Возврат СписокРолей;
	
КонецФункции

Функция ЕстьРоль(ИмяРоли, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль.Имя = &Роль
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль", ИмяРоли);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;		
	Иначе	
		Возврат Истина;		
	КонецЕсли;
	
КонецФункции

Функция EmailValid(Адрес) Экспорт
	
	//Адрес = "test@me@gmail.narod.am";
	
	ЛатинскиеБуквы = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	
	Цифры = "0123456789";
	
	//ищем крайний справа символ @ для правильного выделения локальной и доменной части
	
	ИндексСобаки = Найти(Адрес,"@");
	
	//1. строка адреса вообще не содержит разделителя
	
	Если ИндексСобаки = 0 Тогда
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	УрезаемаяСтрока = Сред(Адрес, ИндексСобаки+1);
	
	Пока Найти(УрезаемаяСтрока,"@") > 0 Цикл
		
		ИндексСобаки = ИндексСобаки + Найти(УрезаемаяСтрока,"@");
		
		УрезаемаяСтрока = Сред(УрезаемаяСтрока, ИндексСобаки+1);
		
	КонецЦикла;
	
	ДоменнаяЧасть = Сред(Адрес, ИндексСобаки+1);
	
	ЛокальнаяЧасть = Лев(Адрес, ИндексСобаки-1);
	
	//2. Проверяем длину локальной части
	
	Если СтрДлина(ЛокальнаяЧасть) < 1 ИЛИ СтрДлина(ЛокальнаяЧасть) > 64 Тогда
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	//3. Проверяем длину доменной части
	
	Если СтрДлина(ДоменнаяЧасть) < 1 ИЛИ СтрДлина(ДоменнаяЧасть) > 255 Тогда
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	//4. Проверяем что локальная части не начинается и не заканчивается на "."
	
	Если Лев(ЛокальнаяЧасть, 1) = "." ИЛИ Прав(ЛокальнаяЧасть, 1) = "." Тогда
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	//5. Локальная части не содержит 2 или более "." подряд
	
	Если Найти(ЛокальнаяЧасть, "..") > 0 Тогда
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	//Проверка доменной части
	
	//6. Доменная часть не начинается с точки
	
	Если Лев(ДоменнаяЧасть, 1) = "." Тогда
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	//7. Доменная часть не содержит 2 или более "." подряд
	
	Если Найти(ДоменнаяЧасть, "..") > 0 Тогда
		
		Возврат ЛОЖЬ;
		
	КонецЕсли;
	
	//8. Проверка частей доменной части
	
	//каждая часть начинается с буквы и заканчивается буквой или цифрой
	
	//каждая часть длиной не более 63 символов
	
	ИдентификаторыДоменнойЧасти = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДоменнаяЧасть, ".");
	
	Для Каждого ИдентификаторДомена ИЗ ИдентификаторыДоменнойЧасти Цикл
		
		Если СтрДлина(ИдентификаторДомена) > 63 Тогда
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		Если Найти(ЛатинскиеБуквы, Лев(ИдентификаторДомена,1)) = 0
			
			//для доменов, нарушающих RFC 1035 п.2.3.1, например @1c.ru :)
			
			И Найти(Цифры, Лев(ИдентификаторДомена,1)) = 0
			
			Тогда
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
		Если Найти(ЛатинскиеБуквы, Прав(ИдентификаторДомена,1)) = 0 И Найти(Цифры, Прав(ИдентификаторДомена,1)) = 0 Тогда
			
			Возврат ЛОЖЬ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	//Все проверки пройдены - радуемся
	
	Возврат ИСТИНА;
	
КонецФункции


Функция ПолучитьНастройкиЛогистики()  Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	саУНФ_НастройкаЛогистики.Параметр КАК Параметр,
	|	саУНФ_НастройкаЛогистики.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.саУНФ_НастройкаЛогистики КАК саУНФ_НастройкаЛогистики";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	Возврат Выборка;
КонецФункции // ()

&НаСервере
Функция ТелефонКурьера(Курьер)  Экспорт
	ТелефонК ="";	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Тип = &ТипТелефон
	|	И ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Курьер";
	
	Запрос.УстановитьПараметр("Курьер", Курьер);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТелефонК =ТелефонК +" "+СОКРЛП(Выборка.Представление);
	КонецЦикла;
	
	Возврат  ТелефонК;
	
КонецФункции  


Функция ЗаписьКонтрагентаБезПроверки() Экспорт
	ТекПользователь=Пользователи.ТекущийПользователь();
	НаименованиеТП=ТекПользователь.Ссылка.Наименование;
	Если НаименованиеТП="Мурашко Виктор Владимирович" Тогда
		//ИЛИ НаименованиеТП="Самуйлик Ирина" 
		Возврат Истина;
	КонецЕсли; 
	Возврат Ложь;
КонецФункции // ()


&НаСервере
Функция ПолучитьСписокСостоянийЗаказовПокупателя(ВПути)  Экспорт
	СписокСостояний = Новый Массив;
	СписокСостояний.Добавить(Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияЗаказовПокупателей.Ссылка КАК Ссылка,
	|	СостоянияЗаказовПокупателей.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СостоянияЗаказовПокупателей КАК СостоянияЗаказовПокупателей
	|ГДЕ
	|	НЕ СостоянияЗаказовПокупателей.ПометкаУдаления
	|	И НЕ СостоянияЗаказовПокупателей.Ссылка = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если  ВПути Тогда
			Если СОКРЛП(Выборка.Наименование)="В пути" Тогда
				СписокСостояний.Добавить(Выборка.Ссылка);
			КонецЕсли;		
			
		Иначе
			СписокСостояний.Добавить(Выборка.Ссылка);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ВПути И СписокСостояний.Количество()=1 Тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			СписокСостояний.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат  СписокСостояний;
КонецФункции // ()


#Область Резервы

Функция ПолучитьДатуЗапрета()    Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
	|ГДЕ
	|	ДатыЗапретаИзменения.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ДатаЗапрета = Дата(1,1,1);
	Пока Выборка.Следующий() Цикл
		ДатаЗапрета = КонецДня(Выборка.ДатаЗапрета);
	КонецЦикла;
	
	Возврат   ДатаЗапрета;
КонецФункции // ()

Функция ПолучитьГрафикПятидневки()Экспорт 
	  ГрафикРаботы =Справочники.ГрафикиРаботыМагазиновИФилиалов.НайтиПоКоду("000000007");
	  Возврат ГрафикРаботы;
КонецФункции // ()

Функция ПоискБота(Имя)  Экспорт
	ИдентификаторБота ="";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование = &Имя";
	
	Запрос.УстановитьПараметр("Имя", Имя);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ИдентификаторБота;
	КонецЕсли; 
	Выборка = Результат.Выбрать();
	Выборка.Следующий(); 		
	ИдентификаторБота =СистемаВзаимодействия.ПолучитьИдентификаторПользователя(Выборка.ИдентификаторПользователяИБ);	
	
	Возврат  ИдентификаторБота;
КонецФункции // ()

Функция РандомныйТекст()   Экспорт
	ГСЧР =Новый ГенераторСлучайныхЧисел(255);
	ГСЧ=ГСЧР.СлучайноеЧисло(1, 7); 
	Если ГСЧ =1 Тогда
		ТекстСообщения="Просто денег нет сейчас.";
	ИначеЕсли  ГСЧ =2 Тогда
		ТекстСообщения="Навозбуждать-то можно все, что угодно";
		
	ИначеЕсли  ГСЧ =3 Тогда
		ТекстСообщения="По поводу котэ. Из источников, близких к Дорофею, стало известно, что он никуда не пропадал";
		
	ИначеЕсли  ГСЧ =4 Тогда
		ТекстСообщения="Всем спасибо за беспокойство!";
		
	ИначеЕсли  ГСЧ =5 Тогда
		ТекстСообщения="Реплики у вас, а все, что я говорю, — в граните отливается!";
		
	ИначеЕсли  ГСЧ =6 Тогда
		ТекстСообщения="Я понимаю, что бизнесу работать нелегко,  но не надо скулить";
		
	ИначеЕсли  ГСЧ =7 Тогда
		ТекстСообщения="В основе нашей политики должен лежать принцип, который считаю, несмотря на всю его очевидность, важнейшим для деятельности любого современного государства, стремящегося к достижению высоких стандартов жизни. Это принцип 'Свобода лучше, чем несвобода'";
		
	Иначе
		ТекстСообщения="Вы держитесь здесь, и  хорошего настроения";
		
	КонецЕсли; 
	
	Возврат   ТекстСообщения;
КонецФункции // ()

Функция ПроверкаСуществованияРезервированиеЗапасов(ДатаЗапрета,ЗаказПокупателя)
	ДатаЗапретаЗапрос=КонецДня(ДобавитьМесяц(ДатаЗапрета,-1));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументРезервированиеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РезервированиеЗапасов КАК ДокументРезервированиеЗапасов
	|ГДЕ
	|	ДокументРезервированиеЗапасов.ЗаказПокупателя = &ЗаказПокупателя
	|	И НЕ ДокументРезервированиеЗапасов.ПометкаУдаления
	|	И ДокументРезервированиеЗапасов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаЗапретаЗапрос);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(текущаяДата()));
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ЛОЖЬ;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат  Выборка.Ссылка;
	
КонецФункции // ()


Функция ПросроченныеРезервы(ДатаЗапроса=Неопределено)  Экспорт
	ДатаЗапрета= ПолучитьДатуЗапрета();
	Если ДатаЗапроса=Неопределено  Тогда
		ДатаЗапроса = КонецДня(ТекущаяДата());
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЗапасыОстатки.ЗаказПокупателя.Ответственный КАК ЗаказПокупателяОтветственный,
	|	ЗапасыОстатки.ЗаказПокупателя.Представление КАК ЗаказПокупателяПредставление,
	|	ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВ
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			ЗаказПокупателя.Дата > &ДатаЗапрета
	|				И ЗаказПокупателя.ДатаОтгрузки <= КОНЕЦПЕРИОДА(&ДатаЗапроса, ДЕНЬ)
	|				И НЕ ЗаказПокупателя.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СКомиссионером)
	|				И ТИПЗНАЧЕНИЯ(ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказПокупателя.Ответственный,
	|	ЗапасыОстатки.ЗаказПокупателя.Представление,
	|	ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПокупателяОтветственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_ГРАФИК
	|ИЗ
	|	&Регистр КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ЧасыРаботы > 0
	|	И НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) > &ДатаЗапрета
	|	И ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВТ_ГРАФИК.ДатаГрафика, ДЕНЬ)) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_МИНИМУМ
	|ИЗ
	|	ВТ_ГРАФИК КАК ВТ_ГРАФИК,
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВТ_РЕЗЕРВ.ДатаОтгрузки, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ВТ_ГРАФИК.ДатаГрафика, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МИНИМУМ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_МИНИМУМ.ДатаГрафика КАК ДатаГрафика,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|			ТОГДА НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ)
	|	КОНЕЦ КАК ДатаПервогоПредупреждения,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 1)
	|	КОНЕЦ КАК ДатаВторогоПредупреждения
	|ПОМЕСТИТЬ ВТ_МИН_ДАТЫ
	|ИЗ
	|	ВТ_МИНИМУМ КАК ВТ_МИНИМУМ
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|					ТОГДА НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ)
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 1)
	|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ)
	|			КОНЕЦ = НАЧАЛОПЕРИОДА(&ДатаЗапроса, ДЕНЬ)
	|			ИЛИ ВЫБОР
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|				КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 1)
	|			КОНЕЦ = НАЧАЛОПЕРИОДА(&ДатаЗапроса, ДЕНЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РЕЗЕРВ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_РЕЗЕРВ.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТ_РЕЗЕРВ.ЗаказПокупателяОтветственный КАК ЗаказПокупателяОтветственный,
	|	ВТ_РЕЗЕРВ.ЗаказПокупателяПредставление КАК ЗаказПокупателяПредставление,
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_МИН_ДАТЫ.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_МИН_ДАТЫ.ДатаПервогоПредупреждения КАК ДатаПервогоПредупреждения,
	|	ВТ_МИН_ДАТЫ.ДатаВторогоПредупреждения КАК ДатаВторогоПредупреждения
	|ПОМЕСТИТЬ ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ
	|ИЗ
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МИН_ДАТЫ КАК ВТ_МИН_ДАТЫ
	|		ПО ВТ_РЕЗЕРВ.ДатаОтгрузки = ВТ_МИН_ДАТЫ.ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ЗаказПокупателяОтветственный КАК ЗаказПокупателяОтветственный,
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ЗаказПокупателяПредставление КАК ЗаказПокупателяПредставление,
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СотрудникиПользователя.Пользователь КАК Пользователь,
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ДатаПервогоПредупреждения КАК ДатаПервогоПредупреждения,
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ДатаВторогоПредупреждения КАК ДатаВторогоПредупреждения
	|ПОМЕСТИТЬ ВТ_ОТБОРПОДАТАМ
	|ИЗ
	|	ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ КАК ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	|		ПО ВТ_ДАТЫПРЕДУПРЕЖДЕНИЙ.ЗаказПокупателяОтветственный = СотрудникиПользователя.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	СУММА(ЗаказПокупателяЗапасы.Резерв) КАК Резерв
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВВЗАКАЗЕ
	|ИЗ
	|	ВТ_ОТБОРПОДАТАМ КАК ВТ_ОТБОРПОДАТАМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ПО ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя = ЗаказПокупателяЗапасы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_ОТБОРПОДАТАМ.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТ_ОТБОРПОДАТАМ.ЗаказПокупателяОтветственный КАК ЗаказПокупателяОтветственный,
	|	ВТ_ОТБОРПОДАТАМ.ЗаказПокупателяПредставление КАК ЗаказПокупателяПредставление,
	|	ВТ_ОТБОРПОДАТАМ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_ОТБОРПОДАТАМ.Пользователь КАК Пользователь,
	|	ВТ_ОТБОРПОДАТАМ.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_ОТБОРПОДАТАМ.ДатаПервогоПредупреждения КАК ДатаПервогоПредупреждения,
	|	ВТ_ОТБОРПОДАТАМ.ДатаВторогоПредупреждения КАК ДатаВторогоПредупреждения,
	|	ВЫБОР
	|		КОГДА ВТ_ОТБОРПОДАТАМ.ДатаВторогоПредупреждения = НАЧАЛОПЕРИОДА(&ДатаЗапроса, ДЕНЬ)
	|			ТОГДА ""БВторое""
	|		ИНАЧЕ ""АПервое""
	|	КОНЕЦ КАК Предупреждение
	|ИЗ
	|	ВТ_ОТБОРПОДАТАМ КАК ВТ_ОТБОРПОДАТАМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РЕЗЕРВВЗАКАЗЕ КАК ВТ_РЕЗЕРВВЗАКАЗЕ
	|		ПО ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя = ВТ_РЕЗЕРВВЗАКАЗЕ.Заказ
	|ГДЕ
	|	ЕСТЬNULL(ВТ_РЕЗЕРВВЗАКАЗЕ.Резерв, 0) - ВТ_ОТБОРПОДАТАМ.КоличествоОстаток >= 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь,
	|	Предупреждение,
	|	ЗаказПокупателя
	|ИТОГИ ПО
	|	Пользователь,
	|	Предупреждение
	|АВТОУПОРЯДОЧИВАНИЕ";

	
	ГрафикРаботы =ПолучитьГрафикПятидневки();
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Регистр","РегистрСведений.ГрафикиРаботыМагазиновИФилиалов");
	
	Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапрета);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Год", Год(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат  РезультатЗапроса;
	КонецЕсли;

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	//|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	//|	ЗапасыОстатки.ЗаказПокупателя.Ответственный КАК ЗаказПокупателяОтветственный,
	//|	ЗапасыОстатки.ЗаказПокупателя.Представление КАК ЗаказПокупателяПредставление,
	//|	РАЗНОСТЬДАТ(ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки, &ДатаЗапросаДень, ДЕНЬ) КАК ДнейПросрочки,
	//|	ЕСТЬNULL(СотрудникиПользователя.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь,
	//|	ВЫБОР
	//|		КОГДА РАЗНОСТЬДАТ(ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки, &ДатаЗапросаДень, ДЕНЬ) = 1
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ КАК ВремяЧ,
	//|	ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки
	//|ПОМЕСТИТЬ ВТ_РЕЗЕРВ
	//|ИЗ
	//|	РегистрНакопления.Запасы.Остатки(
	//|			,
	//|			ЗаказПокупателя.Дата > &ДатаЗапрета
	//|				И ЗаказПокупателя.ДатаОтгрузки <= &ДатаЗапросаДень
	//|				И НЕ ЗаказПокупателя.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СКомиссионером)) КАК ЗапасыОстатки
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	//|		ПО ЗапасыОстатки.ЗаказПокупателя.Ответственный = СотрудникиПользователя.Сотрудник
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗапасыОстатки.ЗаказПокупателя,
	//|	РАЗНОСТЬДАТ(ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки, &ДатаЗапросаДень, ДЕНЬ),
	//|	ЗапасыОстатки.ЗаказПокупателя.Ответственный,
	//|	ЗапасыОстатки.ЗаказПокупателя.Представление,
	//|	ЕСТЬNULL(СотрудникиПользователя.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	//|	ВЫБОР
	//|		КОГДА РАЗНОСТЬДАТ(ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки, &ДатаЗапросаДень, ДЕНЬ) = 1
	//|			ТОГДА ЛОЖЬ
	//|		ИНАЧЕ ИСТИНА
	//|	КОНЕЦ
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ЗаказПокупателя
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	//|	СУММА(ЗаказПокупателяЗапасы.Резерв) КАК Резерв
	//|ПОМЕСТИТЬ ВТ_РЕЗЕРВВЗАКАЗЕ
	//|ИЗ
	//|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	//|		ПО ВТ_РЕЗЕРВ.ЗаказПокупателя = ЗаказПокупателяЗапасы.Ссылка
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗаказПокупателяЗапасы.Ссылка
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТ_РЕЗЕРВ.ЗаказПокупателя КАК ЗаказПокупателя,
	//|	ВТ_РЕЗЕРВ.КоличествоОстаток КАК КоличествоОстаток,
	//|	ВТ_РЕЗЕРВ.ЗаказПокупателяОтветственный КАК ЗаказПокупателяОтветственный,
	//|	ВТ_РЕЗЕРВ.ЗаказПокупателяПредставление КАК ЗаказПокупателяПредставление,
	//|	ВТ_РЕЗЕРВ.ДнейПросрочки КАК ДнейПросрочки,
	//|	ВТ_РЕЗЕРВ.Пользователь КАК Пользователь,
	//|	ВТ_РЕЗЕРВ.ВремяЧ КАК ВремяЧ,
	//|	ЕСТЬNULL(ВТ_РЕЗЕРВВЗАКАЗЕ.Резерв, 0) - ВТ_РЕЗЕРВ.КоличествоОстаток КАК Разница,
	//|	ВТ_РЕЗЕРВ.ДатаОтгрузки КАК ДатаОтгрузки
	//|ИЗ
	//|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РЕЗЕРВВЗАКАЗЕ КАК ВТ_РЕЗЕРВВЗАКАЗЕ
	//|		ПО ВТ_РЕЗЕРВ.ЗаказПокупателя = ВТ_РЕЗЕРВВЗАКАЗЕ.Ссылка
	//|ГДЕ
	//|	ЕСТЬNULL(ВТ_РЕЗЕРВВЗАКАЗЕ.Резерв, 0) - ВТ_РЕЗЕРВ.КоличествоОстаток >= 0
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ЗаказПокупателяОтветственный
	//|ИТОГИ ПО
	//|	Пользователь
	//|АВТОУПОРЯДОЧИВАНИЕ";
	//
	//
	//
	//Запрос.УстановитьПараметр("ДатаЗапрета",ДатаЗапрета);
	//Запрос.УстановитьПараметр("ДатаЗапросаДень",ДатаЗапроса);
	//РезультатЗапроса = Запрос.Выполнить();
	//
КонецФункции // ()

Процедура БитыеЗаказыНаСервере(ДатаЗапрета) Экспорт
	Причина = Справочники.ПричиныОтменыЗаказа.НайтиПоНаименованию("не известно");
	//ВариантЗавершения пустой.
	//Пользователь пустой
	//ТабличнаяЧасть пустая
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК ПометитьНаУдаление,
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НАУДАЛЕНИЕ1
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|		ПО ЗаказПокупателя.Ссылка = ЗаказПокупателяЗапасы.Ссылка
		|ГДЕ
		|	ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателяЗапасы.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	ЗаказПокупателя.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПокупателя.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НАУДАЛЕНИЕ1.ПометитьНаУдаление КАК ПометитьНаУдаление,
		|	ВТ_НАУДАЛЕНИЕ1.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_НАУДАЛЕНИЕ
		|ИЗ
		|	ВТ_НАУДАЛЕНИЕ1 КАК ВТ_НАУДАЛЕНИЕ1
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НАУДАЛЕНИЕ1.ПометитьНаУдаление,
		|	ВТ_НАУДАЛЕНИЕ1.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ПометитьНаУдаление,
		|	ЗаказПокупателя.Представление КАК Представление
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	НЕ ЗаказПокупателя.ПометкаУдаления
		|	И ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И НЕ ЗаказПокупателя.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТ_НАУДАЛЕНИЕ.Ссылка КАК Ссылка
		|				ИЗ
		|					ВТ_НАУДАЛЕНИЕ КАК ВТ_НАУДАЛЕНИЕ)
		|	И ЗаказПокупателя.ВариантЗавершения = ЗНАЧЕНИЕ(Перечисление.ВариантыЗавершенияЗаказа.ПустаяСсылка)
		|	И ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_НАУДАЛЕНИЕ.Ссылка,
		|	ВТ_НАУДАЛЕНИЕ.ПометитьНаУдаление,
		|	ВТ_НАУДАЛЕНИЕ.Ссылка.Представление
		|ИЗ
		|	ВТ_НАУДАЛЕНИЕ КАК ВТ_НАУДАЛЕНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНачала",ДатаЗапрета);
	Запрос.УстановитьПараметр("ДатаОкончания",НачалоДня(ТекущаяДата())-1);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаказОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ПометитьНаУдаление Тогда
			 ЗаказОбъект.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
			 ЗаказОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
			 ЗаказОбъект.ПричинаОтмены = Причина;
			 ЗаказОбъект.Заметки = "Удален Ботом Димоном ";
			 Попытка
				 ЗаказОбъект.Записать();
			 Исключение
				ИмяСобытия =("Не удалось записать " +Строка(Выборка.Ссылка)); 
				Уровень = УровеньЖурналаРегистрации.Ошибка;
				ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, Метаданные.Документы.ЗаказПокупателя, Выборка.Ссылка, "обработка битые заказы", );

			 КонецПопытки;
				Попытка
			 	 ЗаказОбъект.УстановитьПометкуУдаления(Истина); 
				 ЗаказОбъект.Записать();
			 Исключение
				ИмяСобытия =("Не удалось записать " +Строка(Выборка.Ссылка)); 
				Уровень = УровеньЖурналаРегистрации.Ошибка;
				ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, Метаданные.Документы.ЗаказПокупателя, Выборка.Ссылка, "обработка битые заказы", );
			 КонецПопытки;

		Иначе	
		     ЗаказОбъект.ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Успешно;
			 ЗаказОбъект.Заметки = "Завершен Ботом Димоном ";
			 Попытка
				 ЗаказОбъект.Записать();
			 Исключение
				ИмяСобытия =("Не удалось записать " +Строка(Выборка.Ссылка)); 
				Уровень = УровеньЖурналаРегистрации.Ошибка;
				ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, Метаданные.Документы.ЗаказПокупателя, Выборка.Ссылка, "обработка битые заказы", );
			 КонецПопытки;
		 КонецЕсли; 
		
			
	КонецЦикла; 
	
	

КонецПроцедуры




Функция РезервыДляСнятия()   Экспорт
	ДатаЗапрета= ПолучитьДатуЗапрета();
	ДатаЗапроса =КонецДня(ТекущаяДата());
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЗапасыОстатки.ЗаказПокупателя.Дата КАК ЗаказПокупателяДата,
	|	ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВ
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			ЗаказПокупателя.Дата > КОНЕЦПЕРИОДА(&ДатаЗапрета, ДЕНЬ)
	|				И ЗаказПокупателя.ДатаОтгрузки <= КОНЕЦПЕРИОДА(&ДатаЗапроса, ДЕНЬ)
	|				И НЕ ЗаказПокупателя.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СКомиссионером)
	|				И ТИПЗНАЧЕНИЯ(ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказПокупателя.Дата,
	|	ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_ГРАФИК
	|ИЗ
	|	&Регистр КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ЧасыРаботы > 0
	|	И НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) > &ДатаЗапрета
	|	И ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВТ_ГРАФИК.ДатаГрафика, ДЕНЬ)) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_МИНИМУМ
	|ИЗ
	|	ВТ_ГРАФИК КАК ВТ_ГРАФИК,
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВТ_РЕЗЕРВ.ДатаОтгрузки, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ВТ_ГРАФИК.ДатаГрафика, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МИНИМУМ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_МИНИМУМ.ДатаГрафика КАК ДатаГрафика,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|	КОНЕЦ КАК ДатаСнятия
	|ПОМЕСТИТЬ ВТ_МИН_ДАТЫ
	|ИЗ
	|	ВТ_МИНИМУМ КАК ВТ_МИНИМУМ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|			КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|			КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|		КОНЕЦ <= НАЧАЛОПЕРИОДА(&ДатаЗапроса, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РЕЗЕРВ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_РЕЗЕРВ.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_МИН_ДАТЫ.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_МИН_ДАТЫ.ДатаСнятия КАК ДатаСнятия
	|ПОМЕСТИТЬ ВТ_ОТБОРПОДАТАМ
	|ИЗ
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МИН_ДАТЫ КАК ВТ_МИН_ДАТЫ
	|		ПО ВТ_РЕЗЕРВ.ДатаОтгрузки = ВТ_МИН_ДАТЫ.ДатаОтгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ,
	|	СУММА(ЗаказПокупателяЗапасы.Резерв) КАК Резерв
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВВЗАКАЗЕ
	|ИЗ
	|	ВТ_ОТБОРПОДАТАМ КАК ВТ_ОТБОРПОДАТАМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ПО ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя = ЗаказПокупателяЗапасы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_ОТБОРПОДАТАМ.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТ_ОТБОРПОДАТАМ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_ОТБОРПОДАТАМ.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_ОТБОРПОДАТАМ.ДатаСнятия КАК ДатаСнятия
	|ИЗ
	|	ВТ_ОТБОРПОДАТАМ КАК ВТ_ОТБОРПОДАТАМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РЕЗЕРВВЗАКАЗЕ КАК ВТ_РЕЗЕРВВЗАКАЗЕ
	|		ПО ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя = ВТ_РЕЗЕРВВЗАКАЗЕ.Заказ
	|ГДЕ
	|	ЕСТЬNULL(ВТ_РЕЗЕРВВЗАКАЗЕ.Резерв, 0) - ВТ_ОТБОРПОДАТАМ.КоличествоОстаток = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя";

	ГрафикРаботы =ПолучитьГрафикПятидневки();
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Регистр","РегистрСведений.ГрафикиРаботыМагазиновИФилиалов");
	
	Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапрета);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Год", Год(ТекущаяДата()));

	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат  РезультатЗапроса;
	КонецЕсли;
	
	// ПоказатьВременнуюТаблицу(МВТ, "ВТ_МИН_ДАТЫ")
	
КонецФункции // ()

//когда была частичная отгрузка
Функция ТяжелыйСлучай()
	ДатаЗапрета= ПолучитьДатуЗапрета();
	ДатаЗапроса = КонецДня(ТекущаяДата());
	
		Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	ЗапасыОстатки.ЗаказПокупателя.Дата КАК ЗаказПокупателяДата,
	|	ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВ
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			ЗаказПокупателя.Дата > КОНЕЦПЕРИОДА(&ДатаЗапрета, ДЕНЬ)
	|				И ЗаказПокупателя.ДатаОтгрузки <= КОНЕЦПЕРИОДА(&ДатаЗапроса, ДЕНЬ)
	|				И НЕ ЗаказПокупателя.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СКомиссионером)
	|				И ТИПЗНАЧЕНИЯ(ЗаказПокупателя) = ТИП(Документ.ЗаказПокупателя)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.ЗаказПокупателя.Дата,
	|	ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_ГРАФИК
	|ИЗ
	|	&Регистр КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Год = &Год
	|	И ГрафикиРаботы.ЧасыРаботы > 0
	|	И НАЧАЛОПЕРИОДА(ГрафикиРаботы.ВремяНачала, ДЕНЬ) > &ДатаЗапрета
	|	И ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВТ_ГРАФИК.ДатаГрафика, ДЕНЬ)) КАК ДатаГрафика
	|ПОМЕСТИТЬ ВТ_МИНИМУМ
	|ИЗ
	|	ВТ_ГРАФИК КАК ВТ_ГРАФИК,
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ВТ_РЕЗЕРВ.ДатаОтгрузки, ДЕНЬ) <= НАЧАЛОПЕРИОДА(ВТ_ГРАФИК.ДатаГрафика, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МИНИМУМ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_МИНИМУМ.ДатаГрафика КАК ДатаГрафика,
	|	ВЫБОР
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|		КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|			ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|	КОНЕЦ КАК ДатаСнятия
	|ПОМЕСТИТЬ ВТ_МИН_ДАТЫ
	|ИЗ
	|	ВТ_МИНИМУМ КАК ВТ_МИНИМУМ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 5
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|			КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 6
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 4)
	|			КОГДА ДЕНЬНЕДЕЛИ(ВТ_МИНИМУМ.ДатаГрафика) = 7
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 3)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_МИНИМУМ.ДатаГрафика, ДЕНЬ), ДЕНЬ, 2)
	|		КОНЕЦ <= НАЧАЛОПЕРИОДА(&ДатаЗапроса, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РЕЗЕРВ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_РЕЗЕРВ.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТ_РЕЗЕРВ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_МИН_ДАТЫ.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_МИН_ДАТЫ.ДатаСнятия КАК ДатаСнятия
	|ПОМЕСТИТЬ ВТ_ОТБОРПОДАТАМ
	|ИЗ
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МИН_ДАТЫ КАК ВТ_МИН_ДАТЫ
	|		ПО ВТ_РЕЗЕРВ.ДатаОтгрузки = ВТ_МИН_ДАТЫ.ДатаОтгрузки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_ОТБОРПОДАТАМ.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_ОТБОРПОДАТАМ.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_ОТБОРПОДАТАМ.ДатаСнятия КАК ДатаСнятия,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_НОМЕНКЛАТУРА
	|ИЗ
	|	ВТ_ОТБОРПОДАТАМ КАК ВТ_ОТБОРПОДАТАМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
	|				,
	|				ЗаказПокупателя В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя КАК ЗаказПокупателя
	|					ИЗ
	|						ВТ_ОТБОРПОДАТАМ КАК ВТ_ОТБОРПОДАТАМ)) КАК ЗапасыОстатки
	|		ПО ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя = ЗапасыОстатки.ЗаказПокупателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК НоменклатураДок,
	|	СУММА(ЗаказПокупателяЗапасы.Резерв) КАК РезервДок,
	|	ЗаказПокупателяЗапасы.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВДОК
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОТБОРПОДАТАМ КАК ВТ_ОТБОРПОДАТАМ
	|		ПО ЗаказПокупателяЗапасы.Ссылка = ВТ_ОТБОРПОДАТАМ.ЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Номенклатура,
	|	ЗаказПокупателяЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НОМЕНКЛАТУРА.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_НОМЕНКЛАТУРА.Номенклатура КАК Номенклатура,
	|	ВТ_РЕЗЕРВДОК.НоменклатураДок КАК НоменклатураДок,
	|	СУММА(ВТ_НОМЕНКЛАТУРА.КоличествоОстаток) КАК КоличествоОстаток,
	|	СУММА(ВТ_РЕЗЕРВДОК.РезервДок) КАК Резерв,
	|	ВТ_НОМЕНКЛАТУРА.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_НОМЕНКЛАТУРА.ДатаГрафика КАК ДатаГрафика,
	|	ВТ_НОМЕНКЛАТУРА.ДатаСнятия КАК ДатаСнятия
	|ИЗ
	|	ВТ_РЕЗЕРВДОК КАК ВТ_РЕЗЕРВДОК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НОМЕНКЛАТУРА КАК ВТ_НОМЕНКЛАТУРА
	|		ПО ВТ_РЕЗЕРВДОК.НоменклатураДок = ВТ_НОМЕНКЛАТУРА.Номенклатура
	|			И ВТ_РЕЗЕРВДОК.Заказ = ВТ_НОМЕНКЛАТУРА.ЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_НОМЕНКЛАТУРА.ЗаказПокупателя,
	|	ВТ_НОМЕНКЛАТУРА.Номенклатура,
	|	ВТ_РЕЗЕРВДОК.НоменклатураДок,
	|	ВТ_НОМЕНКЛАТУРА.ДатаОтгрузки,
	|	ВТ_НОМЕНКЛАТУРА.ДатаГрафика,
	|	ВТ_НОМЕНКЛАТУРА.ДатаСнятия
	|ИТОГИ
	|	СУММА(КоличествоОстаток),
	|	СУММА(Резерв)
	|ПО
	|	ЗаказПокупателя";
	
	
	ГрафикРаботы =ПолучитьГрафикПятидневки();
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Регистр","РегистрСведений.ГрафикиРаботыМагазиновИФилиалов");
	
	Запрос.УстановитьПараметр("ДатаЗапрета", ДатаЗапрета);
	Запрос.УстановитьПараметр("ДатаЗапроса", ДатаЗапроса);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Год", Год(ТекущаяДата()));
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат  РезультатЗапроса;
	КонецЕсли;
	// ПоказатьВременнуюТаблицу(МВТ, "ВТ_РЕЗЕРВДОК")

	
КонецФункции // ()

Функция РезервыДляПереносаВТекущийМесяц()
	ДатаЗапрета= ПолучитьДатуЗапрета();
	ДатаЗапретаЗапрос=КонецДня(ДобавитьМесяц(ДатаЗапрета,-1));
	ДатаЗапроса = НачалоДня(ТекущаяДата())-1;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	РАЗНОСТЬДАТ(ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки, &ДатаЗапросаДень, ДЕНЬ) КАК ДнейПросрочки,
	|	ЗапасыОстатки.ЗаказПокупателя.Дата КАК ЗаказПокупателяДата
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВ
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			НАЧАЛОПЕРИОДА(ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ) > &ДатаЗапросаДень
	|				И НЕ ЗаказПокупателя.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоров.СКомиссионером)
	|				И НАЧАЛОПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) > НАЧАЛОПЕРИОДА(&ДатаЗапрета, ДЕНЬ)
	|				И КОНЕЦПЕРИОДА(ЗаказПокупателя.Дата, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ДатаЗапросаДень, МЕСЯЦ)
	|				И НЕ ЗаказПокупателя.СостояниеЗаказа = ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.Завершен)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	РАЗНОСТЬДАТ(ЗапасыОстатки.ЗаказПокупателя.ДатаОтгрузки, &ДатаЗапросаДень, ДЕНЬ),
	|	ЗапасыОстатки.ЗаказПокупателя.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Ссылка КАК Ссылка,
	|	СУММА(ЗаказПокупателяЗапасы.Резерв) КАК Резерв
	|ПОМЕСТИТЬ ВТ_РЕЗЕРВВЗАКАЗЕ
	|ИЗ
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|		ПО ВТ_РЕЗЕРВ.ЗаказПокупателя = ЗаказПокупателяЗапасы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПокупателяЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РЕЗЕРВ.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ВТ_РЕЗЕРВ.КоличествоОстаток КАК КоличествоОстаток,
	|	ВТ_РЕЗЕРВ.ДнейПросрочки КАК ДнейПросрочки,
	|	ВТ_РЕЗЕРВ.ЗаказПокупателяДата КАК ЗаказПокупателяДата,
	|	ВТ_РЕЗЕРВВЗАКАЗЕ.Резерв КАК Резерв,
	|	ЕСТЬNULL(ВТ_РЕЗЕРВВЗАКАЗЕ.Резерв, 0) - ВТ_РЕЗЕРВ.КоличествоОстаток КАК Поле1
	|ИЗ
	|	ВТ_РЕЗЕРВ КАК ВТ_РЕЗЕРВ,
	|	ВТ_РЕЗЕРВВЗАКАЗЕ КАК ВТ_РЕЗЕРВВЗАКАЗЕ
	|ГДЕ
	|	ЕСТЬNULL(ВТ_РЕЗЕРВВЗАКАЗЕ.Резерв, 0) - ВТ_РЕЗЕРВ.КоличествоОстаток = 0";
	
	Запрос.УстановитьПараметр("ДатаЗапрета",ДатаЗапрета);
	Запрос.УстановитьПараметр("ДатаЗапретаЗапрос",ДатаЗапретаЗапрос);
	Запрос.УстановитьПараметр("ДатаЗапросаДень",ДатаЗапроса);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат  РезультатЗапроса;
	КонецЕсли;
	
	
	
КонецФункции // ()


Процедура СообщитьОПросроченныхРезервах()   Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_ОбщийМодуль");	
	Если ОМ =Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Результат = ОМ.ПросроченныеРезервы();
	Если ТипЗнч(Результат)=Тип("Булево") Тогда
		Возврат;
	КонецЕсли; 
	
	ИдентификаторБота  =ОМ.ПоискБота("Бот Димон");
	Если ИдентификаторБота  = "" Тогда
		Возврат;
	КонецЕсли; 
	МенеджерСистемыВзаимодействия = Новый  МенеджерСистемыВзаимодействия;
	ТекстСообщенияТест="";
	ВыборкаГруппа =  Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппа.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаГруппа.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		//"c0b9e28d-62aa-4bca-8e2b-671a80d3d6d7" Бот Димон
		//здесь нужно указать пользователей
		ИдентификаторАвтораИБ =ВыборкаГруппа.Пользователь.ИдентификаторПользователяИБ;
		Попытка
			ИдентификаторАвтора =МенеджерСистемыВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторАвтораИБ);	
		Исключение
			Продолжить;
		КонецПопытки;
		
		
		КлючОбсуждения = Строка(ИдентификаторАвтораИБ);
		Обсуждение=Неопределено;
		Попытка
			Обсуждение = МенеджерСистемыВзаимодействия.ПолучитьОбсуждение(КлючОбсуждения) ; 
		Исключение
			Обсуждение=Неопределено;	
		КонецПопытки;
		
		Если Обсуждение =Неопределено Тогда
			Обсуждение= МенеджерСистемыВзаимодействия.СоздатьОбсуждение();
			Обсуждение.Ключ =КлючОбсуждения; 
			Обсуждение.Заголовок = "Автоснятие резервов";
			Обсуждение.Групповое=Истина;
			Обсуждение.Отображаемое=Истина;
			Обсуждение.Записать();						
		КонецЕсли; 
		
				
		Если Не Обсуждение=Неопределено Тогда
			Если СтрНайти(Обсуждение.Заголовок,"Мурашко")>0 Тогда
				Обсуждение.Заголовок="Автоснятие резервов";
				Обсуждение.Записать();
			КонецЕсли; 
		КонецЕсли;
		
		
		Если  НЕ Обсуждение.Участники.Содержит(ИдентификаторАвтора) ИЛИ  НЕ Обсуждение.Участники.Содержит(ИдентификаторБота) Тогда
			Если  НЕ Обсуждение.Участники.Содержит(ИдентификаторАвтора) Тогда	
				Обсуждение.Участники.Добавить(ИдентификаторАвтора);
			КонецЕсли;
			Если  НЕ Обсуждение.Участники.Содержит(ИдентификаторБота) Тогда	
				Обсуждение.Участники.Добавить(ИдентификаторБота);
			КонецЕсли;
			Обсуждение.Записать();
		КонецЕсли;
		ТекстСообщения=ВыборкаГруппа.Пользователь.Наименование + " "+ Символы.ПС;
		
		ВыборкаПредупреждение = ВыборкаГруппа.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПредупреждение.Следующий() Цикл
		     Если ВыборкаПредупреждение.Предупреждение = "АПервое"  Тогда
			    ТекстСообщения=ТекстСообщения+" Пора отгружать: " + Символы.ПС;
			 Иначе
				ТекстСообщения=ТекстСообщения+" Завтра сниму резервы: " + Символы.ПС; 
			 КонецЕсли;
		
				
		Выборка = ВыборкаПредупреждение.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения=ТекстСообщения+ ПолучитьНавигационнуюСсылку(Выборка.ЗаказПокупателя)+Символы.ПС +" >> "+Символы.ПС;
		КонецЦикла; 
		
		КонецЦикла;
		
		СообщениеДляОбсуждения  = МенеджерСистемыВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
		СообщениеДляОбсуждения.Дата = ТекущаяДата();
		СообщениеДляОбсуждения.Автор =ИдентификаторБота;
		СообщениеДляОбсуждения.Получатели.Добавить(ИдентификаторБота);
		СообщениеДляОбсуждения.Получатели.Добавить(ИдентификаторАвтора);
		СообщениеДляОбсуждения.Текст   = Новый ФорматированнаяСтрока(ТекстСообщения);
		СообщениеДляОбсуждения.Записать();
		//ОбщегоНазначения.СообщитьПользователю(СообщениеДляОбсуждения.Текст);
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 		
КонецПроцедуры

Процедура СнятиеПросроченныхРезервов()   Экспорт
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_ОбщийМодуль");	
	Если ОМ =Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ДатаЗапрета=ОМ.ПолучитьДатуЗапрета();
	
	ОМ.БитыеЗаказыНаСервере(ДатаЗапрета);
	Результат = ОМ.РезервыДляСнятия();
	
	
	Если НЕ ТипЗнч(Результат)=Тип("Булево") Тогда
		Выборка =   Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ЗаказПокупателя = Выборка.ЗаказПокупателя;
			ЗаказПокупателяОбъект = ЗаказПокупателя.ПолучитьОбъект();
			
			Таб = ЗаказПокупателяОбъект.Запасы.Выгрузить();
			Для каждого СтрокаТаб Из Таб Цикл
				СтрокаТаб.Резерв=0;
			КонецЦикла; 
			ЗаказПокупателяОбъект.Запасы.Очистить();
			ЗаказПокупателяОбъект.Запасы.Загрузить(Таб);
			Попытка
				ЗаказПокупателяОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ИмяСобытия =("Не удалось записать " +Строка(ЗаказПокупателя));; 
				Уровень = УровеньЖурналаРегистрации.Ошибка;
				ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, Метаданные.Документы.ЗаказПокупателя, ЗаказПокупателя, "рег.задание сообщение о резервах", );
			КонецПопытки;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	
	
	
	Результат = ТяжелыйСлучай();
	Если НЕ ТипЗнч(Результат)=Тип("Булево") Тогда
		ВыборкаГруппа =   Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппа.Следующий() Цикл
			
			ЗаказПокупателя = ВыборкаГруппа.ЗаказПокупателя;
			ЗаказПокупателяОбъект = ЗаказПокупателя.ПолучитьОбъект();
			
			Таб = ЗаказПокупателяОбъект.Запасы.Выгрузить();
			ЗаказПокупателяОбъект.Запасы.Очистить();
			
			Выборка = ВыборкаГруппа.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураПоиска = Новый Структура("Номенклатура", Выборка.Номенклатура);
				МассивНайденных = Таб.НайтиСтроки(СтруктураПоиска);
				Если МассивНайденных.Количество()>0 Тогда
					КоличествоСписать = Выборка.КоличествоОстаток;
					Для каждого СтрМасива Из МассивНайденных Цикл
						Если КоличествоСписать =0 Тогда
							Прервать;
						КонецЕсли;
						
						Списано = МИН(КоличествоСписать,СтрМасива.Резерв);
						КоличествоСписать = КоличествоСписать - Списано;
						
						СтрМасива.Резерв =  СтрМасива.Резерв-Списано;
					КонецЦикла; 
					
				КонецЕсли;
			КонецЦикла; 
			
			ЗаказПокупателяОбъект.Запасы.Загрузить(Таб);
			Попытка
				ЗаказПокупателяОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ИмяСобытия =("Не удалось записать " +Строка(ЗаказПокупателя));; 
				Уровень = УровеньЖурналаРегистрации.Ошибка;
				ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, Метаданные.Документы.ЗаказПокупателя, ЗаказПокупателя, "рег.задание сообщение о резервах", );
			КонецПопытки;
		КонецЦикла; 
		
	КонецЕсли; 
	
	
	Результат = РезервыДляПереносаВТекущийМесяц() ;
	Если ТипЗнч(Результат)=Тип("Булево") Тогда
		Возврат;
	КонецЕсли; 
	Выборка =   Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаказПокупателя = Выборка.ЗаказПокупателя;
		ЗаказПокупателяОбъект = ЗаказПокупателя.ПолучитьОбъект();
		ЗаказПокупателяОбъект.Дата = НачалоМесяца(ТекущаяДата());
		Попытка
			ЗаказПокупателяОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ИмяСобытия =("Не удалось записать " +Строка(ЗаказПокупателя));; 
			Уровень = УровеньЖурналаРегистрации.Ошибка;
			ЗаписьЖурналаРегистрации(ИмяСобытия, Уровень, Метаданные.Документы.ЗаказПокупателя, ЗаказПокупателя, "рег.задание сообщение о резервах", );
		КонецПопытки;
	КонецЦикла; 
КонецПроцедуры



#КонецОбласти

#Область ГарантийныеТалоны

Функция НужнаЛиГарантия(Ссылка, ТекущаяСтрока) Экспорт

	Возврат Истина;
КонецФункции	

#КонецОбласти