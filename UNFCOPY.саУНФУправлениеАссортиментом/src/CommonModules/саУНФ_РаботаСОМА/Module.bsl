

Функция ЗаполнитьСтруктуруИзмененийДляУзла(Узел) Экспорт
	
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Заказы", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяИзменения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя.Изменения КАК ЗаказПокупателяИзменения
		|ГДЕ
		|	ЗаказПокупателяИзменения.Узел = &Узел";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Результат = Запрос.Выполнить();

	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		   СтруктураИзменений["Заказы"].Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СтруктураИзменений;
	
КонецФункции



Функция ПолучитьСтруктураНастроекОМА()   Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = Новый Структура();
	
	РеквизитыРег=Метаданные.РегистрыСведений.ОМА_НастройкаОбменов.Ресурсы;
	
	Для каждого Реквизит Из  РеквизитыРег Цикл
		СтруктураНастроек.Вставить(Реквизит.Имя);
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.Текст =    "ВЫБРАТЬ  ПЕРВЫЕ 1 *
	|ИЗ
	|	РегистрСведений.ОМА_НастройкаОбменов КАК ОМА_НастройкаОбменов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураНастроек,Выборка);
	КонецЦикла; 
	
	Если ПривилегированныйРежим()  Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	Возврат  СтруктураНастроек;
	
КонецФункции // ()



Функция JSONМассив(Результат)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Запись = Новый ЗаписьТекста(ИмяВременногоФайла); 
		Запись.Записать(Результат);
		Запись.Закрыть();
	Иначе    
		Результат.Записать(ИмяВременногоФайла);
	КонецЕсли;
	
	
	ЧтениеJSON= Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	МассивКаталог = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат МассивКаталог; 
КонецФункции // ()


Функция ORDER_JSON(Answer)   Экспорт
	Answer = СокрЛП(Answer);
	Если  ПустаяСтрока(Answer) Тогда
		Возврат "empty json";
	КонецЕсли; 
	Если  НЕ Лев(Answer,1) ="{" Тогда
		Возврат "invalid json";
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		МассивКаталог=JSONМассив(Answer) ;
		//проверка массива
		НаборЗаписей =  РегистрыСведений.ОМА_ХранениеЗначений.СоздатьНаборЗаписей();
		Запись =  НаборЗаписей.Добавить();
		Запись.НомерСессии    = Новый УникальныйИдентификатор;
		Хранилище = Новый ХранилищеЗначения(МассивКаталог, Новый СжатиеДанных(9));
		Запись.МассивЗначений   =  Хранилище;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		Возврат "Unable to write to register";
	КонецПопытки;
	
	
	Возврат "ОК";
КонецФункции // ()

Процедура ДобавитьОписаниеОшибки(Описание, Дополнение) 
	
	Если ПустаяСтрока(Описание) Тогда
		Описание = Дополнение;
	Иначе
		Описание = Описание + Символы.ПС + Дополнение;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписьОшибкиВЖурнал(ИмяСобытия, ОбъектМетаданных, Данные, Комментарий) 	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
	УровеньЖурналаРегистрации.Ошибка,
	ОбъектМетаданных,
	Данные,
	Комментарий);
	
КонецФункции // ()



Функция ТаблицаШапки()
	ОТЧ = 	ОбщегоНазначения.ОписаниеТипаЧисло(15, 3);  
	ОТС =	ОбщегоНазначения.ОписаниеТипаСтрока(120);
	ОТД =ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ОТУИД = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	ТаблицаШапки = Новый ТаблицаЗначений;
	ТаблицаШапки.Колонки.Добавить("id",ОТУИД);
	ТаблицаШапки.Колонки.Добавить("number",ОТС);
	ТаблицаШапки.Колонки.Добавить("date",ОТД);
	ТаблицаШапки.Колонки.Добавить("store",ОТС);
	ТаблицаШапки.Колонки.Добавить("СтрукурнаяЕдиница",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	
	ТаблицаШапки.Колонки.Добавить("order_weight",ОТЧ);
	
	Возврат ТаблицаШапки;
	
КонецФункции // ()

Функция ТаблицаТЧ()
	ОТЧ = 	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);  
	ОТС =	ОбщегоНазначения.ОписаниеТипаСтрока(120);
	ОТД =ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ОТУИД = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	ТаблицаТЧ = Новый ТаблицаЗначений;
	
	ТаблицаТЧ.Колонки.Добавить("id",ОТУИД);
	ТаблицаТЧ.Колонки.Добавить("product",ОТС);
	ТаблицаТЧ.Колонки.Добавить("scu",ОТС);
	ТаблицаТЧ.Колонки.Добавить("weight",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("length",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("height",ОТЧ);
	
	ТаблицаТЧ.Колонки.Добавить("width",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("VAT",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("sum_w_vat",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("amount",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("units",ОТС);
	ТаблицаТЧ.Колонки.Добавить("price",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("total",ОТЧ);
	ТаблицаТЧ.Колонки.Добавить("sum_vat",ОТЧ);
	
	ТаблицаТЧ.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТЧ.Колонки.Добавить("ЕИ",Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	Возврат ТаблицаТЧ;
	
КонецФункции // ()


Функция ПроверкаСтруктуры(Оригинал,Колонки)
	Флаг = Истина;
	Для каждого Колонка Из Колонки Цикл
		Если НЕ Оригинал.Свойство(Колонка) Тогда
			Флаг = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Флаг;
КонецФункции // ()

Функция ЗапросНоменклатуры(МассивSCU,КаталогТоваров)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Вес КАК Вес,
	|	Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Номенклатура.Высота КАК Высота,
	|	Номенклатура.Длина КАК Длина,
	|	Номенклатура.Ширина КАК Ширина
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|	И Номенклатура.Ссылка В ИЕРАРХИИ(&Группа)
	|	И Номенклатура.Артикул В(&СписокАртикулов)
	|	И НЕ Номенклатура.Недействителен";
	
	Запрос.УстановитьПараметр("Группа", КаталогТоваров);
	Запрос.УстановитьПараметр("СписокАртикулов", МассивSCU);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции // ()



Функция ПроверитьСоздатьНоменклатуру(ТаблицаТоваров,Описание)
	СтруктураНастроек=ПолучитьСтруктураНастроекОМА();
	МассивSCU = 	ТаблицаТоваров.ВыгрузитьКолонку("scu");
	МассивSCU = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивSCU);
	
	Результат=ЗапросНоменклатуры(МассивSCU,СтруктураНастроек.КаталогТоваров);
	
	Выборка = Результат.Выбрать();
	Для каждого СтрТаб Из ТаблицаТоваров Цикл
		Выборка.Сбросить();
		СтруктураПоиска		=	Новый Структура("Артикул",СокрЛП(СтрТаб.scu));
		СтруктураПоискаТаб	=	Новый Структура("scu",СтрТаб.scu);
		
		Если  Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			Номенклатура = Выборка.Ссылка;
			МассивТоваров = ТаблицаТоваров.НайтиСтроки(СтруктураПоискаТаб);
			СтрокаМассива = МассивТоваров[0];
			Если Номенклатура.Вес 												= 		Число(СтрокаМассива.weight) 		И 
				Номенклатура.Высота                                       		=  	Число(СтрокаМассива.height)  		И
				Номенклатура.Длина                                        			=  	Число(СтрокаМассива.length)   		И
				Номенклатура.Ширина                                   			=  	Число(СтрокаМассива.width)    		И
				Номенклатура.ЕдиницаИзмерения.Код                  	=  	Строка(СтрокаМассива.units)        И
				Номенклатура.Наименование                           			=   	СокрЛП(СтрокаМассива.product)   И
				Номенклатура.ИспользоватьПартии 							= 		Истина
				Тогда
			Иначе
				НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
				НоменклатураОбъект.Вес 													= 		Число(СтрокаМассива.weight) ; 
				НоменклатураОбъект.Высота                                       		=  	Число(СтрокаМассива.height);
				НоменклатураОбъект.Длина                                        		=  	Число(СтрокаМассива.length);
				НоменклатураОбъект.Ширина                                   			=  	Число(СтрокаМассива.width);
				НоменклатураОбъект.ЕдиницаИзмерения                  		=  	Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Строка(СтрокаМассива.units));
				НоменклатураОбъект.Наименование                           		=   	СокрЛП(СтрокаМассива.product);
				НоменклатураОбъект.НаименованиеПолное                		=   	СокрЛП(СтрокаМассива.product);
				НоменклатураОбъект.Объем                                     		=   	Число(СтрокаМассива.height)/100 * Число(СтрокаМассива.length)/100 * Число(СтрокаМассива.width)/100;
				Если  НЕ НоменклатураОбъект.ИспользоватьПартии  Тогда
				         НоменклатураОбъект.ИспользоватьПартии = Истина;
				КонецЕсли; 
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
				ДобавитьОписаниеОшибки(Описание, "Создание номенклатуры "+СокрЛП(СокрЛП(СтрокаМассива.product) )+" "+ОписаниеОшибки()); 
				Продолжить;
			КонецПопытки;

				Номенклатура = НоменклатураОбъект.Ссылка;
			КонецЕсли; 
			СтрТаб.Номенклатура = Номенклатура; 
			СтрТаб.ЕИ =  Номенклатура.ЕдиницаИзмерения; 
		Иначе 	
			МассивТоваров = ТаблицаТоваров.НайтиСтроки(СтруктураПоискаТаб);
			Если МассивТоваров.Количество()=0 Тогда   Продолжить; КонецЕсли;
			СтрокаМассива = МассивТоваров[0];
			НоменклатураОбъект= Справочники.Номенклатура.СоздатьЭлемент();
			НоменклатураОбъект.Артикул        										=	СокрЛП(СтрокаМассива.scu);
			НоменклатураОбъект.Вес              										=  Число(СтрокаМассива.weight);
			НоменклатураОбъект.Высота                                       		=  Число(СтрокаМассива.height);
			НоменклатураОбъект.Длина                                        			=  Число(СтрокаМассива.length);
			НоменклатураОбъект.Ширина                                   			=  Число(СтрокаМассива.width);
			НоменклатураОбъект.ЕдиницаИзмерения                    			=  Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Строка(СтрокаМассива.units));
			НоменклатураОбъект.ИспользоватьПартии                          = Истина;
			НоменклатураОбъект.Наименование                           			=   СокрЛП(СтрокаМассива.product);
			НоменклатураОбъект.НаименованиеПолное                			=   СокрЛП(СтрокаМассива.product);
			НоменклатураОбъект.Объем                                     			=   Число(СтрокаМассива.height)/100 * Число(СтрокаМассива.length)/100 * Число(СтрокаМассива.width)/100;
			
			НоменклатураОбъект.ВидСтавкиНДС   								=  СтруктураНастроек.ВидСтавкиНДС;
			НоменклатураОбъект.КатегорияНоменклатуры            			=  СтруктураНастроек.Категория;
			НоменклатураОбъект.Комментарий                             			=  "загружено из обменов с ОМА";
			НоменклатураОбъект.МетодОценки                            			=   Перечисления.МетодОценкиЗапасов.ПоСредней;
			НоменклатураОбъект.НаправлениеДеятельности         			=   СтруктураНастроек.Направление;
			НоменклатураОбъект.Поставщик                               			=   СтруктураНастроек.Поставщик;
			НоменклатураОбъект.ПроверятьЗаполнениеПартий   			=   Истина;
			НоменклатураОбъект.Родитель                                 			=   СтруктураНастроек.КаталогТоваров;
			НоменклатураОбъект.Склад                                     			=   СтруктураНастроек.Склад;
			НоменклатураОбъект.СпособПополнения                 			=   Перечисления.СпособыПополненияЗапасов.Закупка;
			НоменклатураОбъект.ТипНоменклатуры                    			=   Перечисления.ТипыНоменклатуры.Запас;
			//НоменклатураОбъект.СчетУчетаДоходов                  			=
			НоменклатураОбъект.СчетУчетаЗапасов                   			=   СтруктураНастроек.СчетУчетаЗапасов;
			НоменклатураОбъект.СчетУчетаЗатрат                     			=   СтруктураНастроек.СчетУчетаЗатрат;
			//НоменклатураОбъект.ДополнительныеРеквизиты         		=
			
			Попытка
				НоменклатураОбъект.Записать();
			Исключение
				ДобавитьОписаниеОшибки(Описание, "Создание номенклатуры "+СокрЛП(СокрЛП(СтрокаМассива.product) )+" "+ОписаниеОшибки()); 
				Продолжить;
			КонецПопытки;

			НоваяСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Свойство  											=	СтруктураНастроек.НеВыгружатьНаСайт; 
			НоваяСтрока.Значение                                            	= 	Истина;
			
			Попытка
				НоменклатураОбъект.Записать();
				Номенклатура	=	 НоменклатураОбъект.Ссылка;
			Исключение
				ДобавитьОписаниеОшибки(Описание, "Создание номенклатуры "+СокрЛП(СокрЛП(СтрокаМассива.product) )+" "+ОписаниеОшибки()); 
				Продолжить;
			КонецПопытки;
			
		КонецЕсли; 
		СтрТаб.Номенклатура = Номенклатура.Ссылка; 
		СтрТаб.ЕИ =  Номенклатура.Ссылка.ЕдиницаИзмерения; 
		
	КонецЦикла; 
	
	
	
	
КонецФункции // ()

Функция ПолучитьСтавкаНДС(Ставка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНДС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.ВидСтавкиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.Общая)
	|	И СтавкиНДС.Ставка = &ЗначениеСтавки");
	
	Запрос.УстановитьПараметр("ЗначениеСтавки", Ставка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции // ()

Функция СоздатьПартию(НомерЗаказа,Номенклатура,Поставщик,Год,Описание);
	ВнешнийКод = СокрЛП(НомерЗаказа);
	ДлинаВнешнийКод =СтрДлина(ВнешнийКод);
	НомерПартии = "";
	Для i= 1 По (11-ДлинаВнешнийКод)  Цикл
		НомерПартии = НомерПартии +"0";
	КонецЦикла; 
	НомерПартии = НомерПартии + ВнешнийКод;
	ИмяПартии = СОКРЛП(Номенклатура.Код)+"_"+НомерПартии+ "_" +СтрЗаменить(Строка(Год),Символы.НПП,"");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПартииНоменклатуры КАК ПартииНоменклатуры
	|ГДЕ
	|	НЕ ПартииНоменклатуры.ПометкаУдаления
	|	И ПартииНоменклатуры.Владелец = &Номенклатура
	|	И ПартииНоменклатуры.ВладелецПартии = &Поставщик
	|	И НЕ ПартииНоменклатуры.Недействителен
	|	И ПартииНоменклатуры.Номер = &НомерПартии
	|	И ПартииНоменклатуры.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("НомерПартии", ИмяПартии);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПартий.ТоварыНаКомиссии);

	
	Результат = Запрос.Выполнить();
	Если  НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	НоваяПартия = Справочники.ПартииНоменклатуры.СоздатьЭлемент();
	НоваяПартия.ВладелецПартии	=  Поставщик;
	НоваяПартия.Владелец				= 	Номенклатура;
	НоваяПартия.Номер  				= 	ИмяПартии;
	НоваяПартия.Наименование 		=	ИмяПартии;
	НоваяПартия.Статус					= 	Перечисления.СтатусыПартий.ТоварыНаКомиссии;
	Попытка
		НоваяПартия.Записать();
		Возврат  НоваяПартия.Ссылка;
	Исключение
		ДобавитьОписаниеОшибки(Описание, "Создание партии "+ИмяПартии+" "+ОписаниеОшибки()); 
		Возврат Справочники.ПартииНоменклатуры.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции // ()

Функция СформироватьЦены(ЗаказСсылка,Описание)
	МВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяЗапасы.Цена КАК Цена,
		|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НАЧАЛОПЕРИОДА(ЗаказПокупателяЗапасы.Ссылка.Дата, ДЕНЬ) КАК Дата,
		|	ЗаказПокупателяЗапасы.Ссылка.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ВТ_ЗАКАЗ
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &ЗаказСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК НоменклатураРегистр,
		|	ЦеныНоменклатурыСрезПоследних.Период КАК ПериодРегистр,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦенРегистр,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаРегистр,
		|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КАК ЕдиницаИзмеренияРегистр,
		|	ВТ_ЗАКАЗ.Цена КАК Цена,
		|	ВТ_ЗАКАЗ.Номенклатура КАК Номенклатура,
		|	ВТ_ЗАКАЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_ЗАКАЗ.Дата КАК Период,
		|	ВТ_ЗАКАЗ.ВидЦен КАК ВидЦен,
		|	ИСТИНА КАК Актуальность
		|ИЗ
		|	ВТ_ЗАКАЗ КАК ВТ_ЗАКАЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				(Номенклатура, ЕдиницаИзмерения, ВидЦен) В
		|						(ВЫБРАТЬ
		|							ВТ_ЗАКАЗ.Номенклатура КАК Номенклатура,
		|							ВТ_ЗАКАЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|							ВТ_ЗАКАЗ.ВидЦен КАК ВидЦен
		|						ИЗ
		|							ВТ_ЗАКАЗ КАК ВТ_ЗАКАЗ)
		|					И Актуальность = ИСТИНА) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВТ_ЗАКАЗ.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВТ_ЗАКАЗ.ЕдиницаИзмерения = ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|			И ВТ_ЗАКАЗ.ВидЦен = ЦеныНоменклатурыСрезПоследних.ВидЦен
		|ГДЕ
		|	НЕ ВТ_ЗАКАЗ.Цена = ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)";
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ЗаказСсылка.Дата));
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	
	Результат = Запрос.Выполнить();
	
	// саУНФ_ОбщийМодуль.ПоказатьВременнуюТаблицу(МВТ, "ВТ_ЗАКАЗ")
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.ВидЦен.Установить(Выборка.ВидЦен);
		
		Запись =   НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,Выборка);
		Попытка
			НаборЗаписей.Записать(); 
		Исключение
			ДобавитьОписаниеОшибки(Описание, "Создание цен "+Строка(Выборка.ВидЦен)+" "+Строка(Выборка.Номенклатура)+" "+ОписаниеОшибки()); 
			Продолжить;
		КонецПопытки;

		
	КонецЦикла;
	

КонецФункции // ()
 



Функция СоздатьЗаказПокупателя(ТаблицаШапки,ТаблицаТЧ,СтруктураНастроек,Описание)
	МассивНомеров = ТаблицаШапки.ВыгрузитьКолонку("number");
	МассивНомеров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНомеров);
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.НомерЗаказаОМА КАК НомерЗаказаОМА
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.НомерЗаказаОМА В(&СписокНомерЗаказаОМА)
	|	И НЕ ЗаказПокупателя.ПометкаУдаления
	|	И ЗаказПокупателя.ВидЗаказа = &ВидЗаказа";
	
	Запрос.УстановитьПараметр("СписокНомерЗаказаОМА", МассивНомеров);
	Запрос.УстановитьПараметр("ВидЗаказа", СтруктураНастроек.ВидЗаказаОМА);
	
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Для каждого СтрТаб Из ТаблицаШапки Цикл
		Выборка.Сбросить();
		СтруктураПоиска		=	Новый Структура("НомерЗаказаОМА",СокрЛП(СтрТаб.number));
		СтруктураПоискаТаб	=	Новый Структура("number",СтрТаб.number);
		
		Если  Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ЗаказОбъект 																= 	Выборка.Ссылка.ПолучитьОбъект();
		Иначе	   
			ЗаказОбъект 																= 	Документы.ЗаказПокупателя.СоздатьДокумент();
		КонецЕсли;
		ЗаказОбъект.Кратность												=	1;
		ЗаказОбъект.Курс														=	1;
		ЗаказОбъект.ВалютаДокумента                                =  СтруктураНастроек.ВидЦен.ВалютаЦены;
		ЗаказОбъект.НалогообложениеНДС                           =   Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		ЗаказОбъект.Вес														= 	Число(СтрТаб.order_weight);
		ЗаказОбъект.ВидЗаказа											= 	СтруктураНастроек.ВидЗаказаОМА;
		ЗаказОбъект.ВидОперации										=	Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		ЗаказОбъект.ВидЦен												=  СтруктураНастроек.ВидЦен;
		ЗаказОбъект.Дата														=	НачалоДня(СтрТаб.date);
		ЗаказОбъект.ДатаОтгрузки										= 	ЗаказОбъект.Дата+10*86400;
		ЗаказОбъект.Договор												=  СтруктураНастроек.ДоговорПокупателя;
		ЗаказОбъект.ЗонаТариф											=	СтрТаб.СтрукурнаяЕдиница.НаправлениеДоставки;
		ЗаказОбъект.Контрагент 											= 	СтруктураНастроек.Поставщик;
		ЗаказОбъект.НДСВключатьВСтоимость						=	ЗаказОбъект.ВидЦен.ЦенаВключаетНДС;
		ЗаказОбъект.Наличка 												= 	Истина;
		ЗаказОбъект.НомерЗаказаОМА									= 	СокрЛП(СтрТаб.number);
		ЗаказОбъект.Организация											= 	СтруктураНастроек.Организация;
		ЗаказОбъект.СостояниеЗаказа									=  СтруктураНастроек.СостояниеНовый;
		ЗаказОбъект.СтруктурнаяЕдиницаПродажи				=  СтруктураНастроек.Подразделение;
		ЗаказОбъект.СтруктурнаяЕдиницаРезерв					=  СтрТаб.СтрукурнаяЕдиница;
		ЗаказОбъект.СуммаВключаетНДС								=	ЗаказОбъект.ВидЦен.ЦенаВключаетНДС;
		
		ЗаказОбъект.ТипДенежныхСредств							=	Перечисления.ТипыДенежныхСредств.Наличные;
		
		ЗаказОбъект.саУНФ_СтруктурнаяЕдиницаРеципиент	=	СтрТаб.СтрукурнаяЕдиница;
		
		
		
		ЗаказОбъект.Запасы.Очистить();
		СтруктураПоиска = Новый Структура("id",СтрТаб.id);
		МассивТоваров = 	ТаблицаТЧ.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрМассивТоваров Из МассивТоваров Цикл
			НоваяСтрока =   ЗаказОбъект.Запасы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = СтрМассивТоваров.ЕИ;
			НоваяСтрока.Количество = Число(СтрМассивТоваров.amount);
			НоваяСтрока.Вес = Число(СтрМассивТоваров.weight)*НоваяСтрока.Количество;
			НоваяСтрока.Номенклатура =СтрМассивТоваров.Номенклатура;
			НоваяСтрока.Партия = СоздатьПартию(СокрЛП(СтрТаб.number),СтрМассивТоваров.Номенклатура,СтруктураНастроек.Поставщик,Год(НачалоДня(СтрТаб.date)),Описание);
			НоваяСтрока.Резерв =0 ;
			НоваяСтрока.СтавкаНДС =ПолучитьСтавкаНДС(Число(СтрМассивТоваров.VAT)) ;
			НоваяСтрока.Сумма =Число(СтрМассивТоваров.sum_w_vat);
			НоваяСтрока.СуммаНДС =Число(СтрМассивТоваров.sum_vat);
			НоваяСтрока.ТипНоменклатурыЗапас = Истина;
			НоваяСтрока.Цена = Число(СтрМассивТоваров.price);
			НоваяСтрока.Всего = Число(СтрМассивТоваров.total);
			
			
		КонецЦикла; 
		
		ЗаказОбъект.СуммаДокумента   								= 	ЗаказОбъект.Запасы.Итог("Всего");
		ЗаказОбъект.саУНФ_НДС											=  ЗаказОбъект.Запасы.Итог("СуммаНДС");
		ЗаказОбъект.саУНФ_СуммаСНДС 							= 	ЗаказОбъект.Запасы.Итог("Всего");
		ЗаказОбъект.саУНФ_Сумма										= 	ЗаказОбъект.Запасы.Итог("Всего")-ЗаказОбъект.Запасы.Итог("СуммаНДС");
		
		
		Попытка
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ЗаказОбъект.Записать();
			ЗаказСсылка = ЗаказОбъект.Ссылка;
			
			
		Исключение
			ДобавитьОписаниеОшибки(Описание, "Создание заказа "+СокрЛП(СтрТаб.number)+" "+ОписаниеОшибки()); 
			Продолжить;
		КонецПопытки;

		 //создадим цены
		 СформироватьЦены(ЗаказСсылка,Описание);
		
		
	КонецЦикла;
КонецФункции // ()

Функция ДозаполнитьТаблицуТЧ(ТаблицаТоваров,ТаблицаТЧ)
	
	Для каждого СтрокаТТ Из ТаблицаТоваров Цикл
		СтруктураПоиска = Новый Структура("scu",СтрокаТТ.scu);
		МассивЕИ = ТаблицаТЧ.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаМассивЕИ Из МассивЕИ Цикл
			СтрокаМассивЕИ.ЕИ = СтрокаТТ.ЕИ;
			СтрокаМассивЕИ.Номенклатура = СтрокаТТ.Номенклатура;
		КонецЦикла; 		
	КонецЦикла;
	
	
КонецФункции // ()



Процедура ПроверкаЗаказовВРегистре() Экспорт
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_РаботаСОМА");
	Если ОМ=Неопределено  Тогда
		Возврат;
	КонецЕсли; 
	СтруктураНастроек=ПолучитьСтруктураНастроекОМА();
	МассивУИД=Новый Массив;
	
	Описание ="";
	
	НаборЗаписей =  РегистрыСведений.ОМА_ХранениеЗначений.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиШапки = "number,date,store,order_weight,order";
	МассивКолонокШапки=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиШапки);
	
	КолонкиТЧ = "product,scu,weight,length,width,height,units,amount,price,sum_w_vat,total,VAT,sum_vat";
	МассивКолонокТЧ=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиТЧ);
	
	КолонкиТоваров = "product,scu,weight,length,width,height,units,Номенклатура,ЕИ";
	
	
	
	Для каждого Запись Из НаборЗаписей Цикл
		МассивУИД.Добавить(Запись.НомерСессии);
		МассивЗначений   = Запись.МассивЗначений.Получить();
		Если НЕ  ТипЗнч(МассивЗначений)=Тип("Структура")  Тогда Продолжить; КонецЕсли;
		Если НЕ  МассивЗначений.Свойство("orders")  Тогда Продолжить; КонецЕсли;
		Если НЕ  ТипЗнч(МассивЗначений.orders)=Тип("Массив")  Тогда Продолжить; КонецЕсли;
		Если  МассивЗначений.orders.Количество()=0 Тогда Продолжить; КонецЕсли;
		
		ТаблицаШапки=ТаблицаШапки();
		ТаблицаТЧ=ТаблицаТЧ();
		
		Для каждого  СтрМассива Из МассивЗначений.orders Цикл
			Если НЕ ТипЗнч(СтрМассива)=Тип("Структура")  Тогда Продолжить; КонецЕсли;
			Если НЕ ПроверкаСтруктуры(СтрМассива,МассивКолонокШапки) Тогда Продолжить; КонецЕсли;
			Если НЕ ТипЗнч(СтрМассива.order)=Тип("Массив") Тогда Продолжить; КонецЕсли;
			Если   СтрМассива.order.Количество()=0  Тогда Продолжить; КонецЕсли;
			ВнешнийКод = СокрЛП(СтрМассива.store);
			ДлинаВнешнийКод =СтрДлина(ВнешнийКод);
			КодТочки = "УУ-";
			Для i= 1 По (6-ДлинаВнешнийКод)  Цикл
				КодТочки = КодТочки +"0";
			КонецЦикла; 
			КодТочки = КодТочки+ВнешнийКод;
			СЕ	=  Справочники.СтруктурныеЕдиницы.НайтиПоКоду(КодТочки);
			Если СЕ= Справочники.СтруктурныеЕдиницы.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли; 
			
			НоваяСтрокаШапки =  ТаблицаШапки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаШапки,СтрМассива);
			Если  ЗначениеЗаполнено(СтрМассива.date) Тогда
				ДатаСтрокаМассива = ПрочитатьДатуJSON(СтрМассива.date,ФорматДатыJSON.ISO);
				НоваяСтрокаШапки.date = ДатаСтрокаМассива;
			КонецЕсли; 
			НоваяСтрокаШапки.id = Новый УникальныйИдентификатор;				
			НоваяСтрокаШапки.СтрукурнаяЕдиница = СЕ;
			Для каждого  СтрOrder Из СтрМассива.order Цикл
				Если НЕ ПроверкаСтруктуры(СтрOrder,МассивКолонокТЧ) Тогда Продолжить; КонецЕсли;
				НоваяСтрокаТЧ =  ТаблицаТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ,СтрOrder);
				НоваяСтрокаТЧ.id = НоваяСтрокаШапки.id;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если ТаблицаТЧ.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	ТаблицаТоваров = ТаблицаТЧ.Скопировать();
	ТаблицаТоваров.Свернуть(КолонкиТоваров,);
	ПроверитьСоздатьНоменклатуру(ТаблицаТоваров,Описание);
	
	ДозаполнитьТаблицуТЧ(ТаблицаТоваров,ТаблицаТЧ);
	
	СоздатьЗаказПокупателя(ТаблицаШапки,ТаблицаТЧ,СтруктураНастроек,Описание);
	
	Если НЕ ПустаяСтрока(Описание) Тогда
		Отбор = Новый Структура("Ключ","ОМА_ПроверкаЗаказов");
		МассивРЗ=РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		Если МассивРЗ.Количество()>0 Тогда
			РегламентноеЗадание =  МассивРЗ[0];
			ЗаписьОшибкиВЖурнал("Ошибка получения заказов ОМА", РегламентноеЗадание.Метаданные, , Описание);
			ВызватьИсключение Описание;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

Процедура ПодпискаЗаписиЗаказПриЗаписи(Источник, Отказ) Экспорт
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_РаботаСОМА");
	СтатусЗаказОМА =Неопределено;
	Если НЕ ОМ =Неопределено Тогда
		СтруктураНастроек=ОМ.ПолучитьСтруктураНастроекОМА();
		Если СтруктураНастроек.Свойство("ВидЗаказаОМА") Тогда
			СтатусЗаказОМА =СтруктураНастроек.ВидЗаказаОМА;
		КонецЕсли; 
	КонецЕсли; 
	
	Если  НЕ СтатусЗаказОМА = Неопределено И   Источник.ВидЗаказа =СтатусЗаказОМА Тогда
		     УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОМА_СостоянияЗаказовСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ОМА_СостоянияЗаказов.СрезПоследних(&Дата, Заказ = &Источник) КАК ОМА_СостоянияЗаказовСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	       Выборка = Результат.Выбрать();
           Выборка.Следующий();
		   Если  Выборка.Состояние = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		          Возврат;
			ИначеЕсли 	Источник.СостояниеЗаказа  = Выборка.Состояние Тогда
				  Возврат;
			КонецЕсли; 
	КонецЕсли; 
	Узел =СтруктураНастроек.УзелОбмена;
     Период =  ТекущаяДата();
	 НаборЗаписей =  РегистрыСведений.ОМА_СостоянияЗаказов.СоздатьНаборЗаписей();
	 НаборЗаписей.Отбор.Период.Установить(Период);
	 НаборЗаписей.Отбор.Заказ.Установить(Источник.Ссылка);
     Запись = 	НаборЗаписей.Добавить();	
	 Запись.Период = Период;
	 Запись.Заказ	= Источник.Ссылка;
	 Запись.Состояние = Источник.СостояниеЗаказа;
	 НаборЗаписей.Записать();
	 Если  НЕ ПланыОбмена.ИзменениеЗарегистрировано(Узел,Источник.Ссылка) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел,Источник.Ссылка);		
	КонецЕсли; 

	КонецЕсли;
КонецПроцедуры
