
#Область  ВспомогательныеФунции



Функция ПодготовитьТаблицуРаспределения()    Экспорт
	ТипЧисло    		=   Новый ОписаниеТипов("Число");
	ТипСтрЕд    		=   Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ТипТовар    		=   Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипОрг      		=   Новый ОписаниеТипов("СправочникСсылка.Организации");
		
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("Организация",ТипОрг); 
	ТаблицаРаспределения.Колонки.Добавить("Филиал",ТипСтрЕд);
	ТаблицаРаспределения.Колонки.Добавить("Магазин",ТипСтрЕд);
	ТаблицаРаспределения.Колонки.Добавить("Номенклатура",ТипТовар);
	
	
	ТаблицаРаспределения.Колонки.Добавить("Цена",ТипЧисло);
	ТаблицаРаспределения.Колонки.Добавить("КОбеспечению",ТипЧисло);
	ТаблицаРаспределения.Колонки.Добавить("СвободныеОстатки",ТипЧисло);
	ТаблицаРаспределения.Колонки.Добавить("ОбеспечитьЗаСчетФилиала",ТипЧисло);
	ТаблицаРаспределения.Колонки.Добавить("ДефицитВФилиале",ТипЧисло);
		
	
	Возврат ТаблицаРаспределения;
КонецФункции // ()

Функция ПолучитьСтарыеЗаказы()   Экспорт
	СостояниеВРаботе = Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе",Истина);
	Если НЕ ЗначениеЗаполнено(СостояниеВРаботе) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	
	Сутки = 86400;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Проведен КАК Проведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа
	|ИЗ
	|	Документ.саУНФ_ЗаказСнабжения КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.ДатаОтгрузки < &Дата2
	|	И НЕ ЗаказПокупателя.ПометкаУдаления
	|	И ЗаказПокупателя.СостояниеЗаказа = &СостояниеЗаказа
	|	И ЗаказПокупателя.Дата МЕЖДУ &Дата1 И &Дата2";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата())-10*Сутки);
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СостояниеЗаказа", СостояниеВРаботе);
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		
		Возврат Выборка;
		
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьЗаказы(СписокКонтрагент)   Экспорт
	Сутки = 86400;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Проведен КАК Проведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа
	|ИЗ
	|	Документ.саУНФ_ЗаказСнабжения КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Дата МЕЖДУ &Дата1 И &Дата2
	|	И НЕ ЗаказПокупателя.ПометкаУдаления
	|	И ЗаказПокупателя.СтруктурнаяЕдиницаРеципиент В(&СписокКонтрагент)";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокКонтрагент", СписокКонтрагент);
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		
		Возврат Выборка;
		
	КонецЕсли; 
КонецФункции // ()

// + МурашкоВ 06.06.2022
Функция ОпределитьРабочийЛиДень() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ПРКАЛ
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	ПроизводственныеКалендари.Код = &Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня,
	|	ДанныеПроизводственногоКалендаря.ДатаПереноса КАК ДатаПереноса
	|ИЗ
	|	ВТ_ПРКАЛ КАК ВТ_ПРКАЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ВТ_ПРКАЛ.Ссылка = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = &ТекущийГод
	|	И НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|			ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПроизводственногоКалендаря.Дата";
	
	
	Запрос.УстановитьПараметр("ТекущийГод",	Год(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата",	ТекущаяДата());
	Запрос.УстановитьПараметр("Код", "РБ");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
		

КонецФункции // ()
 
Функция ДанныеПроизводственногоКалендаря(ДатаСуток)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводственныеКалендари.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПРКАЛ
		|ИЗ
		|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
		|ГДЕ
		|	ПроизводственныеКалендари.Код = &Код
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня,
		|	ДанныеПроизводственногоКалендаря.ДатаПереноса КАК ДатаПереноса
		|ИЗ
		|	ВТ_ПРКАЛ КАК ВТ_ПРКАЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ВТ_ПРКАЛ.Ссылка = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Год МЕЖДУ &ТекущийГод И &СледующийГод
		|	И НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕНЬ) >= НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеПроизводственногоКалендаря.Дата";

	
	Запрос.УстановитьПараметр("ТекущийГод",	Год(ТекущаяДата()));
	Запрос.УстановитьПараметр("СледующийГод",	Год(ТекущаяДата()+1));
    Запрос.УстановитьПараметр("Дата",	ДатаСуток);
	
	Запрос.УстановитьПараметр("Код", "РБ");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	     Возврат 0;
	КонецЕсли; 
	Выборка = Результат.Выбрать();
	СчетчикЦикла=Истина;
	КоличествоСуток = 0;
	Пока Выборка.Следующий() Цикл
	  Если СчетчикЦикла Тогда СчетчикЦикла=Ложь; Продолжить; КонецЕсли;
	  Если Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий ИЛИ 
		   Выборка.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный
		  Тогда
		     КоличествоСуток = КоличествоСуток +1;
		   	 Прервать;
	  Иначе		 
			КоличествоСуток = КоличествоСуток +1;
	  КонецЕсли; 
	  
	КонецЦикла; 
	
	
	Возврат КоличествоСуток;
КонецФункции // ()
 
// - МурашкоВ 06.06.2022




Функция ПолучитьЗаказыПокупателя(Контрагент,Точка)   Экспорт
	Сутки = 86400;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Проведен КАК Проведен,
	|	ЗаказПокупателя.СостояниеЗаказа КАК СостояниеЗаказа
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Дата МЕЖДУ &Дата1 И &Дата2
	|	И НЕ ЗаказПокупателя.ПометкаУдаления
	|	И ЗаказПокупателя.Контрагент = ЗаказПокупателя.Контрагент
	|	И ЗаказПокупателя.саУНФ_СтруктурнаяЕдиницаРеципиент = &Точка";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Точка", Точка);
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		
		Возврат Выборка;
		
	КонецЕсли; 
КонецФункции // ()

Функция КоличествоСутокЗаказа(ДатаСуток =Неопределено,ЧекНомер=5 )     Экспорт
	Если ДатаСуток =Неопределено Тогда
		  ДатаСуток =ТекущаяДата();
	КонецЕсли;
	КоличествоСуток = ДанныеПроизводственногоКалендаря(ДатаСуток);	
	Если  КоличествоСуток =  0 Тогда
		НомерДня=ДеньНедели(ДатаСуток);
		Если  НомерДня=ЧекНомер Тогда
			КоличествоСуток = 3;
		Иначе
			КоличествоСуток = 1;
		КонецЕсли; 
	КонецЕсли; 
	
	
    Возврат   КоличествоСуток;

КонецФункции // ()



Функция ОбщиеРеквизитыЗаказа(Организация)  Экспорт
	Сутки 	= 86400;
	Час 		= 3600;
	
	КоличествоСуток = КоличествоСутокЗаказа();
	
	СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Организация.ВидСтавкиНДСПоУмолчанию, ТекущаяДата());
	
	СтруктураОбщих  =   Новый Структура(); 
	СтруктураОбщих.Вставить("Организация"           ,   Организация);
	СтруктураОбщих.Вставить("Автор" 	            ,   Пользователи.ТекущийПользователь());
	СтруктураОбщих.Вставить("ВидЗаказа" 	        ,   Справочники.ВидыЗаказовПокупателей.Основной);
	СтруктураОбщих.Вставить("ДатаОтгрузки" 	        ,   ТекущаяДата()+КоличествоСуток*Сутки);
	СтруктураОбщих.Вставить("ВидОперации" 	        ,   Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
	СтруктураОбщих.Вставить("СостояниеЗаказа" 	    ,   Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе",Истина));
	СтруктураОбщих.Вставить("Дата" 	                		,   НачалоДня(ТекущаяДата())+7*Час);
	СтруктураОбщих.Вставить("НалогообложениеНДС" 	,   Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС);
	СтруктураОбщих.Вставить("СуммаВключаетНДС" 	    ,   Истина);
	СтруктураОбщих.Вставить("СтавкаНДСПоУмолчанию"  ,   СтавкаНДСПоУмолчанию);
	СтруктураОбщих.Вставить("Валюта",Константы.НациональнаяВалюта.Получить());
	СтруктураОбщих.Вставить("Филиал","");
	СтруктураОбщих.Вставить("Магазин","");
	СтруктураОбщих.Вставить("НомеклатуруДоставки",саУНФ_Bitrix.ПолучитьНомеклатуруДоставки("УК-00017166"));	

	
	Возврат  СтруктураОбщих;
КонецФункции // ()

// Отправлять  	-  Отправлять ли почту
// Кому             	-  Кому отправлять почту
// Копия           	-  Кто стоит в копии 
// ДниПроверки  -  Сколько дней должно пройти прежде, чем отправить следующий заказ (это если решат отправлять разные точки в разные дни)
// МинСумма      	-  Минимальная сумма заказа с одной точки
// ДеньНедели   -   В какой день формировать заказ поставщику

Функция ПроверкаСтруктуры(СтруктураПараметров)
	СтруктураПоУмолчанию = Новый Структура("Отправлять,Кому,Копия,ДниПроверки,МинСумма,ДеньНедели,КомуРасписание,КопияРасписания",
	Ложь,"","",6,130,5,"","");
	Для каждого Элемент Из СтруктураПоУмолчанию Цикл
		Если НЕ СтруктураПараметров.Свойство(Элемент.Ключ) Тогда
			ЗаписатьНастройкаАвтозаказа(Элемент.Ключ,Элемент.Значение);
			СтруктураПараметров.Вставить(Элемент.Ключ);
			СтруктураПараметров[Элемент.Ключ]=Элемент.Значение;
		КонецЕсли;   
	КонецЦикла; 
	
КонецФункции // ()


Функция ОбщиеПараметрыАвтозаказа()  Экспорт
	СтруктураПараметров = Новый Структура();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	саУНФ_НастройкаАвтозаказа.Параметр КАК Параметр,
	|	саУНФ_НастройкаАвтозаказа.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.саУНФ_НастройкаАвтозаказа КАК саУНФ_НастройкаАвтозаказа";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПараметров.Вставить(СокрЛП(Выборка.Параметр),Выборка.Значение);
	КонецЦикла;
	ПроверкаСтруктуры(СтруктураПараметров);
	
	Возврат  СтруктураПараметров;
	
КонецФункции

Функция НайтиДокументОснование(СсылкаНаЗаказ,ДатаПеремещения)     Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	ПеремещениеЗапасов.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ПеремещениеЗапасов.Проведен
	|	И ПеремещениеЗапасов.ЗаказСнабжения = &Ссылка ";
	
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаЗаказ);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДобавитьМесяц(ДатаПеремещения,-1)));
	Запрос.УстановитьПараметр("Дата2", НачалоДня(ДобавитьМесяц(ДатаПеремещения,1)));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой()  Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ()


Функция ОчисткаВременныхТаблиц(МенеджерВТ) Экспорт
	Разделитель ="
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	ТекстЗапроса="";
	Для  каждого ВтТаб Из МенеджерВТ.Таблицы  Цикл
		Если ВтТаб.ПолноеИмя="ВТ_ФОРМАТЫ2" ИЛИ ВтТаб.ПолноеИмя="ВТ_МАГАЗИНЫ" Тогда
			Продолжить;
		КонецЕсли;   
		ТекстЗапроса= ТекстЗапроса+ "УНИЧТОЖИТЬ " + ВтТаб.ПолноеИмя+ Разделитель +Символы.ПС;
	КонецЦикла; 
	
	Запрос.Текст =   ТекстЗапроса;
	Запрос.Выполнить();
КонецФункции // ()

Функция саУНФ_ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(Строка) Экспорт
	
	НедопустимыеСимволы = "<>:;!@#$%^&-~`'.,?{}[]+=*/|\ ()_""«»";
	Результат = "";
	Для Индекс = 1 По СтрДлина(Строка) Цикл
		Символ =  Сред(Строка, Индекс, 1);
		Если СтрНайти(НедопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + "_" + КодСимвола(Символ) + "_";
		Иначе
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//проверяем,что время меньше 14 часов  для Пинск-Минск 11 часов
Функция ПроверкаВремени(ДатаЗаказа,ДоставкаВМинск,ДеньВДень)   Экспорт
	Сутки = 86400;
	Если ДеньВДень Тогда
	   КоличествоСуток =0;
	Иначе	
	   КоличествоСуток = КоличествоСутокЗаказа(ДатаЗаказа);
	КонецЕсли; 
		
	//НачалоДатаЗаказа =НачалоДня(ДатаЗаказа)-КоличествоСуток*Сутки; 
	НачалоДатаЗаказа =НачалоДня(ДатаЗаказа);
	Если ДоставкаВМинск Тогда
	   ВремяЗаказа =11;
	Иначе	
	    ВремяЗаказа =14;
	КонецЕсли; 
	  
	МинутыЗаказа =0;
	
	Если НачалоДатаЗаказа<НачалоДня(ТекущаяДата()) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если НачалоДатаЗаказа=НачалоДня(ТекущаяДата()) Тогда
		Если НачалоДатаЗаказа+ВремяЗаказа*60*60+МинутыЗаказа *60>ТекущаяДата() Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	Возврат Истина;
КонецФункции // ()
 
#КонецОбласти

#Область  Договоры
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

Функция СведенияОДоговоре(Договор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|   ДоговорыКонтрагентов.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|   ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	|   ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаРасчетов
	|ПОМЕСТИТЬ ВТ_ДОГОВОР
	|ИЗ
	|   Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|   ДоговорыКонтрагентов.Ссылка = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ВТ_ДОГОВОР.Ссылка КАК Договор,
	|   ВТ_ДОГОВОР.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|   ВТ_ДОГОВОР.ВидЦен КАК ВидЦен,
	|   ВТ_ДОГОВОР.ВалютаРасчетов КАК Валюта,
	|   ВЫБОР
	|       КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) = 0
	|           ТОГДА 1
	|       ИНАЧЕ КурсыВалютСрезПоследних.Курс
	|   КОНЕЦ КАК Курс,
	|   ВЫБОР
	|       КОГДА ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 0) = 0
	|           ТОГДА 1
	|       ИНАЧЕ КурсыВалютСрезПоследних.Кратность
	|   КОНЕЦ КАК Кратность
	|ИЗ
	|   ВТ_ДОГОВОР КАК ВТ_ДОГОВОР
	|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|       ПО ВТ_ДОГОВОР.ВалютаРасчетов = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата()+86400);
	
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаДоговор =  Результат.Выбрать();
		Возврат ВыборкаДоговор; 
	КонецЕсли; 
КонецФункции // ()

#КонецОбласти

#Область  Ошибки

Функция ЗаписьОшибкиВЖурнал(ИмяСобытия, ОбъектМетаданных, Данные, Комментарий) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
	УровеньЖурналаРегистрации.Ошибка,
	ОбъектМетаданных.Метаданные(),
	Данные,
	Комментарий);
	
	
	
КонецФункции // ()


#КонецОбласти

#Область  ЗаписьДокументовРегистров
Процедура ЗаписатьНастройкаАвтозаказа(Параметр,Значение)
	УстановитьПривилегированныйРежим(Истина);	
	
	МенеджерЗаписи = РегистрыСведений.саУНФ_НастройкаАвтозаказа.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Параметр 	= Параметр;
	МенеджерЗаписи.Значение  	= Значение;
	Попытка
		МенеджерЗаписи.Записать();
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	Исключение
		Описание = ОписаниеОшибки();
		ЗаписьОшибкиВЖурнал("Запись в регистр недопоставок",МенеджерЗаписи,МенеджерЗаписи,Описание);
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
		
	КонецПопытки;
	
	
КонецПроцедуры


Процедура ЗаписатьНаборОтправкаПоставщику(Точка) 
	УстановитьПривилегированныйРежим(Истина);	
	НаборЗаписей = РегистрыСведений.саУНФ_ОтправкаЗаказаПоставщику.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Точка);
	НаборЗаписей.Отбор.ДатаОтправки.Установить(НачалоДня(ТекущаяДата()));
	
	Запись = НаборЗаписей.Добавить();
	Запись.ДатаОтправки 					= НачалоДня(ТекущаяДата());
	Запись.СтруктурнаяЕдиница     	= Точка;
	
	
	Если НаборЗаписей.Количество()>0 Тогда
		Попытка
			НаборЗаписей.Записать();
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);	
			КонецЕсли;
		Исключение
			Описание = ОписаниеОшибки();
			ЗаписьОшибкиВЖурнал("Запись в регистр недопоставок",НаборЗаписей,НаборЗаписей,Описание);
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);	
			КонецЕсли;
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаписатьНаборЗаписейВызовСервера(РезультатЗапроса,СсылкаНаЗаказ,АвторДокумента) Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	НаборЗаписей = РегистрыСведений.саУНФ_НеДопоставкаСнабжения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказСнабжения.Установить(СсылкаНаЗаказ);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.ЗаказСнабжения 	= СсылкаНаЗаказ;
		Запись.Номенклатура     	= Выборка.Номенклатура;
		Запись.Количество         	= Выборка.Количество;
		Запись.Автор 					= АвторДокумента;
	КонецЦикла;
	
	Если НаборЗаписей.Количество()>0 Тогда
		Попытка
			НаборЗаписей.Записать();
			
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		Исключение
			Описание = ОписаниеОшибки();
			ЗаписьОшибкиВЖурнал("Запись в регистр недопоставок",СсылкаНаЗаказ,НаборЗаписей,Описание);
			
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);	
			КонецЕсли;
			
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры

Процедура ОчиститьНаборЗаписейВызовСервера(СсылкаНаЗаказ)   Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	Попытка
		НаборЗаписей = РегистрыСведений.саУНФ_НеДопоставкаСнабжения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказСнабжения.Установить(СсылкаНаЗаказ);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()>0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли; 
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	Исключение
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
		Описание = ОписаниеОшибки();
		ЗаписьОшибкиВЖурнал("Запись в регистр недопоставок",СсылкаНаЗаказ,НаборЗаписей,Описание);	 
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьЗаказыПокупателяВызовСервера(СписокКонтрагент,СтруктураОбщих,ВыборкаТЧ,ТаблицаТочек=Неопределено)  Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Заказ = Неопределено;
	ВыборкаЗаказ=саУНФ_АтозаказВызовСервера.ПолучитьЗаказы(СписокКонтрагент);
	Если ВыборкаЗаказ<>Неопределено Тогда
		Пока ВыборкаЗаказ.Следующий() Цикл
			Заказ = ВыборкаЗаказ.Ссылка;
		КонецЦикла; 
	КонецЕсли; 
	
	
	
	Если ТипЗнч(Заказ)=ТИП("ДокументСсылка.саУНФ_ЗаказСнабжения") Тогда
		ЗаказКИсполнению 	= Заказ.ПолучитьОбъект();
		ЗаказКИсполнению.Запасы.Очистить();
	Иначе
		ЗаказКИсполнению 	= Документы.саУНФ_ЗаказСнабжения.СоздатьДокумент();
	КонецЕсли; 
	
	ДатаОтгрузки	=	СтруктураОбщих.ДатаОтгрузки;
	
	Если НЕ ТаблицаТочек=Неопределено Тогда
		СтруктураПоиска 	= Новый Структура("Точка",СтруктураОбщих.Магазин);
		МассивНайденных 	= ТаблицаТочек.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденных.Количество()>0 Тогда
		     ДатаОтгрузки	=   СтруктураОбщих.Дата;
		КонецЕсли; 
	КонецЕсли;
		
		
	
	ЗаказКИсполнению.Автор 	            			=   СтруктураОбщих.Автор;
	ЗаказКИсполнению.ВидЗаказа 	        			=   СтруктураОбщих.ВидЗаказа;
	ЗаказКИсполнению.ДатаОтгрузки 	    			=   ДатаОтгрузки;
	ЗаказКИсполнению.ВидОперации 	    		=   СтруктураОбщих.ВидОперации;
	ЗаказКИсполнению.СостояниеЗаказа 			=   СтруктураОбщих.СостояниеЗаказа;
	ЗаказКИсполнению.Дата 	            				=   СтруктураОбщих.Дата;
	ЗаказКИсполнению.НалогообложениеНДС	 	=   СтруктураОбщих.НалогообложениеНДС;
	ЗаказКИсполнению.СуммаВключаетНДС 		=   СтруктураОбщих.СуммаВключаетНДС;
	ЗаказКИсполнению.Организация 	    			=   СтруктураОбщих.Организация;
	
	ЗаказКИсполнению.СтруктурнаяЕдиницаРезерв   		= 	СтруктураОбщих.Филиал;
	ЗаказКИсполнению.СтруктурнаяЕдиницаРеципиент 	= 	СтруктураОбщих.Магазин;
	ЗаказКИсполнению.Комментарий 	           					= 	"Заявка на обеспечение "+Строка(СтруктураОбщих.Магазин)+" от "+Строка(СтруктураОбщих.Филиал);
	ЗаказКИсполнению.СтруктурнаяЕдиницаПродажи 	= 	СтруктураОбщих.Магазин; 
	
	ЗаказКИсполнению.ВалютаДокумента 						=	СтруктураОбщих.Валюта;
	ЗаказКИсполнению.Курс 	            							= 	1;
	ЗаказКИсполнению.Кратность 	    							= 	1;
	ЗаказКИсполнению.ВидЦен 	        							=	СтруктураОбщих.Магазин.РозничныйВидЦен;
	
	ЗаказКИсполнению.СпособДоставки                        =    Перечисления.СпособыДоставки.Курьер;
	ЗаказКИсполнению.СлужбаДоставки                        =   Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
	ЗаказКИсполнению.НоменклатураДоставки              =	 СтруктураОбщих.НомеклатуруДоставки;
	ЗаказКИсполнению.ОжидаемаяДатаВручения      		=	 ДатаОтгрузки;
	ЗаказКИсполнению.ВремяДоставкиС						=   Дата(1,1,1,5,59,0);
	ЗаказКИсполнению.ВремяДоставкиПо                		=   Дата(1,1,1,23,59,0);
		
				
	
	ВесИтого =0;
	Выборка       =   ВыборкаТЧ.Выбрать();
	Пока Выборка.Следующий() Цикл   //ПО НОМЕНКЛАТУРЕ 
		СтрокаКИсполнению                           =   ЗаказКИсполнению.Запасы.Добавить();
		СтрокаКИсполнению.Номенклатура              =   Выборка.Номенклатура;
		СтрокаКИсполнению.Количество                =   Выборка.Количество;
		СтрокаКИсполнению.ТипНоменклатурыЗапас      = 	((Выборка.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
		ИЛИ (Выборка.Номенклатура.ТипНоменклатуры 	= 	ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
		СтрокаКИсполнению.СтруктурнаяЕдиницаРезерв  =   СтруктураОбщих.Филиал;
		СтрокаКИсполнению.ДатаОтгрузки              =   СтруктураОбщих.ДатаОтгрузки;
		СтрокаКИсполнению.Резерв                   	=   ?(СтрокаКИсполнению.ТипНоменклатурыЗапас,Выборка.Количество,0);
		СтрокаКИсполнению.Вес                       =   СтрокаКИсполнению.Номенклатура.Вес*Выборка.Количество;
		ВесИтого =ВесИтого +СтрокаКИсполнению.Вес;
		
		СтрокаКИсполнению.Цена                      =   Выборка.Цена;
		СтрокаКИсполнению.ЕдиницаИзмерения          =   СтрокаКИсполнению.Номенклатура.ЕдиницаИзмерения;
		
		Если ЗначениеЗаполнено(СтрокаКИсполнению.Номенклатура.ВидСтавкиНДС) Тогда
			СтрокаКИсполнению.СтавкаНДС             =   Справочники.СтавкиНДС.СтавкаНДС(СтрокаКИсполнению.Номенклатура.ВидСтавкиНДС, ТекущаяДатаСеанса()+86400);
		Иначе
			СтрокаКИсполнению.СтавкаНДС             =   СтруктураОбщих.СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаКИсполнению.Сумма                     =   СтрокаКИсполнению.Цена*СтрокаКИсполнению.Количество;
		СтавкаНДС                                   =   УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаКИсполнению.СтавкаНДС);
		СтрокаКИсполнению.СуммаНДС                  =   СтрокаКИсполнению.Сумма - (СтрокаКИсполнению.Сумма)/((СтавкаНДС + 100) / 100);
		СтрокаКИсполнению.Всего                     =   СтрокаКИсполнению.Сумма + СтрокаКИсполнению.СуммаНДС;
		
	КонецЦикла;
	
	ЗаказКИсполнению.Вес = ВесИтого;
	Попытка
		//раскоментить после теста
		ЗаказКИсполнению.Записать(РежимЗаписиДокумента.Проведение);
		//
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	Исключение
		Описание = ОписаниеОшибки();
		ЗаписьОшибкиВЖурнал("Запись заказа снабжения",ЗаказКИсполнению.Ссылка,ЗаказКИсполнению.Ссылка,Описание);	
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецПопытки;
	
	
	
	
КонецФункции // ()

Процедура ОбработатьЗаказы(РезультатКонтрагенты) Экспорт
	СписокКонтрагент = Новый Массив();
	Выборка =  РезультатКонтрагенты .Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокКонтрагент.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	Если СписокКонтрагент.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаЗаказ=саУНФ_АтозаказВызовСервера.ПолучитьЗаказы(СписокКонтрагент);
	Если ВыборкаЗаказ<>Неопределено Тогда
		Пока ВыборкаЗаказ.Следующий() Цикл
			Если ВыборкаЗаказ.Проведен И ВыборкаЗаказ.СостояниеЗаказа<>Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
				Заказ = ВыборкаЗаказ.Ссылка;
				ЗаказКИсполнению 	= Заказ.ПолучитьОбъект();
				Попытка
					УстановитьПривилегированныйРежим(Истина);	
					ЗаказКИсполнению.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Если ПривилегированныйРежим() Тогда
						УстановитьПривилегированныйРежим(Ложь);
					КонецЕсли;
				Исключение
					Описание = ОписаниеОшибки();
					ЗаписьОшибкиВЖурнал("Запись заказа снабжения",ЗаказКИсполнению.Ссылка,ЗаказКИсполнению.Ссылка,Описание);	
					Если ПривилегированныйРежим() Тогда
						УстановитьПривилегированныйРежим(Ложь);
					КонецЕсли;
				КонецПопытки;
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

Функция ПричинаОтменыЗаказа()  Экспорт
	ИмяПричинаОтменыЗаказа= "Заказ вовремя не обработан";
	СпрПричиныОтменыЗаказа = Справочники.ПричиныОтменыЗаказа;
	ПричинаОтменыЗаказа =  СпрПричиныОтменыЗаказа.НайтиПоНаименованию(ИмяПричинаОтменыЗаказа,Истина);
	Если  НЕ ЗначениеЗаполнено(ПричинаОтменыЗаказа) Тогда
		ПричинаОтменыЗаказаОбъект = СпрПричиныОтменыЗаказа.СоздатьЭлемент();
		ПричинаОтменыЗаказаОбъект.Наименование = ИмяПричинаОтменыЗаказа;
		ПричинаОтменыЗаказаОбъект.Комментарий = "Кладовщик не обработал заказ";
		Попытка
			УстановитьПривилегированныйРежим(Истина);
			ПричинаОтменыЗаказаОбъект.Записать();
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			ПричинаОтменыЗаказа =  ПричинаОтменыЗаказаОбъект.Ссылка;
		Исключение
			Описание = ОписаниеОшибки();
			ЗаписьОшибкиВЖурнал("Запись справочника ПричиныОтменыЗаказа",СпрПричиныОтменыЗаказа.Ссылка,СпрПричиныОтменыЗаказа.Ссылка,Описание);	
			ПричинаОтменыЗаказа = СпрПричиныОтменыЗаказа.ПустачСсылка();
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			Возврат Неопределено;	
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат ПричинаОтменыЗаказа;
КонецФункции // ()



Процедура ОбработатьСтарыеЗаказы() Экспорт
	ВыборкаЗаказ=ПолучитьСтарыеЗаказы();
	Если ВыборкаЗаказ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтменыЗаказа=ПричинаОтменыЗаказа();
	
	ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
	СостояниеЗаказа 		= Справочники.СостоянияЗаказовПокупателей.Завершен;
	
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		Если ВыборкаЗаказ.Проведен И ВыборкаЗаказ.СостояниеЗаказа<>Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
			Заказ = ВыборкаЗаказ.Ссылка;
			ЗаказКИсполнению 	= Заказ.ПолучитьОбъект();
			Попытка
				УстановитьПривилегированныйРежим(Истина);	
				ЗаказКИсполнению.СостояниеЗаказа   			=      СостояниеЗаказа;
				Если ПричинаОтменыЗаказа<>Неопределено Тогда
					ЗаказКИсполнению.ПричинаОтмены    			=      ПричинаОтменыЗаказа;
				КонецЕсли; 
				
				ЗаказКИсполнению.ВариантЗавершения  		=  	ВариантЗавершения;
				ЗаказКИсполнению.Записать(РежимЗаписиДокумента.Проведение);
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			Исключение
				Описание = ОписаниеОшибки();
				ЗаписьОшибкиВЖурнал("Запись заказа снабжения",ЗаказКИсполнению.Ссылка,ЗаказКИсполнению.Ссылка,Описание);	
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры



Функция ЗаписатьНедостачиВРегистр(ТаблицаДефицитаВФилиале, Организация)  Экспорт
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ТаблицаДефицитаВФилиале.Филиал КАК СтруктурнаяЕдиница,
	|	ТаблицаДефицитаВФилиале.Номенклатура КАК Номенклатура,
	|	ТаблицаДефицитаВФилиале.КОбеспечению КАК Количество
	|ПОМЕСТИТЬ ВТ_ТАБФИЛ
	|ИЗ
	|	&ТаблицаДефицитаВФилиале КАК ТаблицаДефицитаВФилиале
	|ГДЕ
	|	ТаблицаДефицитаВФилиале.КОбеспечению > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТАБФИЛ.Номенклатура КАК Номенклатура,
	|	ВТ_ТАБФИЛ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	СУММА(ВТ_ТАБФИЛ.Количество) КАК Количество
	|ИЗ
	|	ВТ_ТАБФИЛ КАК ВТ_ТАБФИЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТАБФИЛ.Номенклатура,
	|	ВТ_ТАБФИЛ.СтруктурнаяЕдиница
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктурнаяЕдиница,
	|	Номенклатура
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	СтруктурнаяЕдиница
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТаблицаДефицитаВФилиале",ТаблицаДефицитаВФилиале);
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ВыборкаФилиал =  Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаФилиал.Следующий() Цикл
		УстановитьПривилегированныйРежим(Истина);	
		
		НаборЗаписей = РегистрыСведений.саУНФ_ИнформацияПоНедостачам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ВыборкаФилиал.СтруктурнаяЕдиница);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		Если НаборЗаписей.Количество()>0 Тогда
			Попытка
				НаборЗаписей.Записать();
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
				
			Исключение
				Описание = ОписаниеОшибки();
				ЗаписьОшибкиВЖурнал("Запись в регистр по недостачам в филиале",ВыборкаФилиал.СтруктурнаяЕдиница,НаборЗаписей,Описание);
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли; 
		
		Выборка = ВыборкаФилиал.Выбрать();
		Пока Выборка.Следующий() Цикл
			УстановитьПривилегированныйРежим(Истина);	
			
			
			Запись 								= 	НаборЗаписей.Добавить();
			Запись.Период 					= 	ТекущаяДата(); 
			ЗаполнитьЗначенияСвойств(Запись,Выборка);
			Запись.Организация = Организация;
		КонецЦикла; 
		
		Если НаборЗаписей.Количество()>0 Тогда
			Попытка
				НаборЗаписей.Записать();
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
				
			Исключение
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
				
				Описание = ОписаниеОшибки();
				ЗаписьОшибкиВЖурнал("Запись в регистр по недостачам в филиале",Выборка.СтруктурнаяЕдиница,НаборЗаписей,Описание);
				Возврат Неопределено;
			КонецПопытки;
			
		КонецЕсли;   		
		
	КонецЦикла; 
КонецФункции // ()

#КонецОбласти

#Область  СозданиеЗаказаПоставщику

&НаСервере
Функция ПолучитьАдресДоставкиКонтрагента(Контрагент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтрагентыКонтактнаяИнформация.Значение КАК Значение
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Результат = Запрос.Выполнить();
	Если  Результат.Пустой() Тогда
	          Возврат Неопределено;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЛЕВ(СОКРЛП(Выборка.Значение),1)="{" Тогда
	АдресВСвободнойФорме=УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(Выборка.Значение)	;
	Если АдресВСвободнойФорме Тогда
	        Возврат Неопределено;
	Иначе
	     СтруктураАдреса = Новый Структура("Представление,ЗначенияПолей,Значение",);
		 ЗаполнитьЗначенияСвойств(СтруктураАдреса, Выборка);
	      Возврат  СтруктураАдреса;
	КонецЕсли; 
	    Возврат Неопределено;
	КонецЕсли;


КонецФункции // ()



Функция ПолучитьАдрес(СтруктурноеПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК СтруктурныеЕдиницыКонтактнаяИнформация
	|ГДЕ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы)";
	Запрос.УстановитьПараметр("Ссылка", СтруктурноеПодразделение);	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Представление; 
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Процедура ОтправитьНаПочту(ПараметрыОтправки,СтруктураПараметров)
	Кому = СОКРЛП(СтруктураПараметров.Кому);
	СтрокаКопий ="";
	Если СтруктураПараметров.Свойство("Копия") Тогда
		СтрокаКопий =СОКРЛП(СтруктураПараметров.Копия);	
	КонецЕсли;
	//email = "v.murashko@it.1ak.by";
	//email = "operator2@sivanabel.by";
	СоответствиеВложение = Новый Соответствие;
	СоответствиеВложение.Вставить("Файл",ПараметрыОтправки.ИмяФайла);
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("Кому",Кому);
	
	СтруктураПисьма.Вставить("Тема","Заказ товара");
	СтруктураПисьма.Вставить("Тело","Во вложении заявка от "+Формат(ПараметрыОтправки.ДатаЗаявки,"ДФ=yyyy-MM-dd")+Символы.ПС);
	//СтрокаКопий = "m.sirozh@minsk.1ak.by;a.diachkov@t-s.ru";
	
	СтруктураПисьма.Вставить("Копии",СтрокаКопий);
	СтруктураПисьма.Вставить("Вложения",СоответствиеВложение);
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,СтруктураПисьма);
	
	Файл = Новый Файл(ПараметрыОтправки.ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ПараметрыОтправки.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗаявку(ТаблицаЗаказа,ТаблицаТочек)
	ТабличныйДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьОбщийМакет("Заявка");
	ОбластьШапкаВ1 		= Макет.ПолучитьОбласть("ОбластьШапка|Верт1");
	ОбластьШапкаВ2 		= Макет.ПолучитьОбласть("ОбластьШапка|Верт2");
	ОбластьШапкаВ3 		= Макет.ПолучитьОбласть("ОбластьШапка|Верт3");
	
	ОбластьСтрокаВ1 	= Макет.ПолучитьОбласть("ОбластьСтрока|Верт1");
	ОбластьСтрокаВ2 	= Макет.ПолучитьОбласть("ОбластьСтрока|Верт2");
	ОбластьСтрокаВ3 	= Макет.ПолучитьОбласть("ОбластьСтрока|Верт3");
	
	
	ОбластьШапкаВ1.Параметры.ДатаЗаявки = Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd");
	
	ТабличныйДок.Вывести(ОбластьШапкаВ1);
	Для каждого СтрТоч Из ТаблицаТочек Цикл
		ОбластьШапкаВ2.Параметры.Заполнить(СтрТоч);
		ТабличныйДок.Присоединить(ОбластьШапкаВ2);
	КонецЦикла; 
	ТабличныйДок.Присоединить(ОбластьШапкаВ3);
	НомерСтроки=0;
	Для каждого СтрТаб Из ТаблицаЗаказа Цикл
		НомерСтроки=НомерСтроки+1;
		
		ОбластьСтрокаВ1.Параметры.НомерПП = НомерСтроки;
		ОбластьСтрокаВ1.Параметры.Заполнить(СтрТаб);
		ТабличныйДок.Вывести(ОбластьСтрокаВ1);
		
		Для каждого СтрТоч Из ТаблицаТочек Цикл
			ОбластьСтрокаВ2.Параметры.Количество = СтрТаб[СтрТоч.КодТочки];
			ТабличныйДок.Присоединить(ОбластьСтрокаВ2);
		КонецЦикла; 
		ОбластьСтрокаВ3.Параметры.Заполнить(СтрТаб);
		ТабличныйДок.Присоединить(ОбластьСтрокаВ3);
	КонецЦикла; 
	ТабличныйДок.ФиксацияСверху=4;	
	ИмяФайла = ПолучитьИмяВременногоФайла(".XLS");
	//ИмяФайла ="C:\Temp\v8_6A3A_711c.XLS";
	ТабличныйДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяФайла",ИмяФайла);
	СтруктураВозврата.Вставить("ДатаЗаявки",ТекущаяДата());
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СоздатьЗаказПоставщику(Организация,РезультатЗапроса,Поставщик) Экспорт
		
	СтруктураОбщих  			= 		ОбщиеРеквизитыЗаказа(Организация) ;
	СтруктураПараметров 	= 		ОбщиеПараметрыАвтозаказа();
	
	Отправлять 					= 		СтруктураПараметров.Отправлять;
	
	Если НЕ Отправлять Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Кому 								= 		СтруктураПараметров.Кому;
	Если  НЕ ЗначениеЗаполнено(Кому) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ДниПроверки 					=  	СтруктураПараметров.ДниПроверки;
	МинСумма 						=   	СтруктураПараметров.МинСумма;
	
	
	
	Сутки=86400;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	саУНФ_ОтправкаЗаказаПоставщику.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
	|ИЗ
	|	РегистрСведений.саУНФ_ОтправкаЗаказаПоставщику КАК саУНФ_ОтправкаЗаказаПоставщику
	|ГДЕ
	|	саУНФ_ОтправкаЗаказаПоставщику.ДатаОтправки МЕЖДУ &Дата1 И &Дата2";
	
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ТекущаяДата())-ДниПроверки*Сутки);
	Запрос.УстановитьПараметр("Дата2", НачалоДня(ТекущаяДата()));
	
	ТаблицаОтправленных = Запрос.Выполнить().Выгрузить();
	
	
	
	ТипЧисло 	= Новый ОписаниеТипов("Число") ;
	ТипСтрока 	= Новый ОписаниеТипов("Строка") ;
	ТипСтрЕД	=	Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы") ;
	
	ТаблицаЗаказа = Новый ТаблицаЗначений;
	
	ТаблицаЗаказа.Колонки.Добавить("Артикул",ТипСтрока) ;
	ТаблицаЗаказа.Колонки.Добавить("Наименование",ТипСтрока) ;
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура")) ;
	
	ТаблицаТочек = Новый ТаблицаЗначений;
	ТаблицаТочек.Колонки.Добавить("КодТочки",ТипСтрока) ;
	ТаблицаТочек.Колонки.Добавить("Точка",ТипСтрЕД) ;
	ТаблицаТочек.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты")) ;
	ТаблицаТочек.Колонки.Добавить("АдресКонтрагента",ТипСтрока) ;
	
	СтрокаСвертки = "";
	
	
	ВыборкаПоТочкам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоТочкам.Следующий() Цикл
		Если ТаблицаОтправленных.Количество()>0 Тогда
			СтруктураПоиска=Новый Структура("СтруктурнаяЕдиница",ВыборкаПоТочкам.Магазин);
			МассивОтправленных = ТаблицаОтправленных.НайтиСтроки(СтруктураПоиска);
			Если МассивОтправленных.Количество()>0  Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		//Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("саУНФ_СтруктурнаяЕдиница",ВыборкаПоТочкам.Магазин);	
		//Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		//	Продолжить;
		//КонецЕсли; 	
		
		Если ВыборкаПоТочкам.Стоимость<МинСумма  Тогда
			Продолжить;
		КонецЕсли; 
		

		
		НоваяТочка 							= 		ТаблицаТочек.Добавить();
		НоваяТочка.Точка					=    	ВыборкаПоТочкам.Магазин;
		НоваяТочка.КодТочки					=    	"S_"+саУНФ_ПреобразоватьСтрокуВДопустимоеНаименованиеКолонки(ВыборкаПоТочкам.КодТочки);
		//НоваяТочка.Контрагент 				=    	Контрагент;
		НоваяТочка.АдресКонтрагента	=     ПолучитьАдрес(ВыборкаПоТочкам.Магазин);
		ТаблицаЗаказа.Колонки.Добавить(НоваяТочка.КодТочки, ТипЧисло);
		
		
		
		Если СтрокаСвертки="" Тогда
			СтрокаСвертки	=НоваяТочка.КодТочки; 
		Иначе	
			СтрокаСвертки	=СтрокаСвертки+","+НоваяТочка.КодТочки; 
		КонецЕсли; 
		
				
		//Заказ = Неопределено;
		//ВыборкаЗаказ=ПолучитьЗаказыПокупателя(Контрагент,ВыборкаПоТочкам.Магазин);
		//Если ВыборкаЗаказ<>Неопределено Тогда
		//	Пока ВыборкаЗаказ.Следующий() Цикл
		//		Заказ = ВыборкаЗаказ.Ссылка;
		//	КонецЦикла; 
		//КонецЕсли; 
		//
		//
		//
		//Если ТипЗнч(Заказ)=ТИП("ДокументСсылка.ЗаказПокупателя") Тогда
		//	ЗаказСИВАНАБЕЛ 	= Заказ.ПолучитьОбъект();
		//	ЗаказСИВАНАБЕЛ.Запасы.Очистить();
		//Иначе
		//	ЗаказСИВАНАБЕЛ 	= Документы.ЗаказПокупателя.СоздатьДокумент();
		//КонецЕсли; 
		//
		//ЗаказСИВАНАБЕЛ.ВидЗаказа 				= Справочники.ВидыЗаказовПокупателей.Основной;
		//ЗаказСИВАНАБЕЛ.ДатаОтгрузки 			= СтруктураОбщих .ДатаОтгрузки;
		//ЗаказСИВАНАБЕЛ.ВидОперации 			= Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		//ЗаказСИВАНАБЕЛ.СостояниеЗаказа 	= Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе",Истина);
		//ЗаказСИВАНАБЕЛ.Дата 							= СтруктураОбщих.Дата;
		//ЗаказСИВАНАБЕЛ.Контрагент 				= Контрагент;
		//ЗаказСИВАНАБЕЛ.Комментарий 			= ""+ВыборкаПоТочкам.Магазин+". Товары СИВАНАБЕЛ.";
		//ЗаказСИВАНАБЕЛ.Организация 			= Организация;
		//ЗаказСИВАНАБЕЛ.саУНФ_СтруктурнаяЕдиницаРеципиент   =   ВыборкаПоТочкам.Магазин;
		//ДоговорПоУмолчанию 								= ПолучитьДоговорПоУмолчанию(ЗаказСИВАНАБЕЛ, Контрагент, Организация, Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу);
		//
		//ЗаказСИВАНАБЕЛ.Договор 					= ДоговорПоУмолчанию;
		//ЗаказСИВАНАБЕЛ.ВалютаДокумента 	= ДоговорПоУмолчанию.ВалютаРасчетов;
		//
		//КурсКратность 			= РегистрыСведений.КурсыВалют.ПолучитьПоследнее(СтруктураОбщих.Дата, Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов));
		//
		//ЗаказСИВАНАБЕЛ.Курс 										= ?(КурсКратность.Курс = 0, 1, КурсКратность.Курс);
		//ЗаказСИВАНАБЕЛ.Кратность 							= ?(КурсКратность.Кратность = 0, 1, КурсКратность.Кратность);
		//ЗаказСИВАНАБЕЛ.ВидЦен 									= ДоговорПоУмолчанию.ВидЦен;
		//ЗаказСИВАНАБЕЛ.НалогообложениеНДС 		= Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		//ЗаказСИВАНАБЕЛ.СуммаВключаетНДС 			= Истина;
		//ЗаказСИВАНАБЕЛ.ВидСкидкиНаценки 			= ДоговорПоУмолчанию.ВидСкидкиНаценки;
		//
		//СтруктураАдреса = ПолучитьАдресДоставкиКонтрагента() ;
		//Если НЕ СтруктураАдреса=Неопределено Тогда
		//	Объект.АдресДоставки                             =     СтруктураАдреса.Представление;
		//	Объект.АдресДоставкиЗначение              	=     СтруктураАдреса.Значение;
		//	Объект.АдресДоставкиЗначенияПолей     	=     СтруктураАдреса.ЗначенияПолей;
		//КонецЕсли; 
		
		
		Выборка =  ВыборкаПоТочкам.Выбрать();
		Пока Выборка.Следующий() Цикл 
			
			//СтрокаСИВАНАБЕЛ = ЗаказСИВАНАБЕЛ.Запасы.Добавить();
			//СтрокаСИВАНАБЕЛ.Номенклатура = Выборка.Номенклатура;
			//СтрокаСИВАНАБЕЛ.Количество = Выборка.Заказать;
			//СтрокаСИВАНАБЕЛ.ТипНоменклатурыЗапас = ((Выборка.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
			//ИЛИ (Выборка.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
			//
			//СтрокаСИВАНАБЕЛ.ДатаОтгрузки = СтрокаСИВАНАБЕЛ.ДатаОтгрузки;
			//СтрокаСИВАНАБЕЛ.Вес = СтрокаСИВАНАБЕЛ.Номенклатура.Вес;
			//СтрокаСИВАНАБЕЛ.Цена = Выборка.Цена;
			//СтрокаСИВАНАБЕЛ.ЕдиницаИзмерения = СтрокаСИВАНАБЕЛ.Номенклатура.ЕдиницаИзмерения;
			//
			//Если ЗначениеЗаполнено(СтрокаСИВАНАБЕЛ.Номенклатура.ВидСтавкиНДС) Тогда
			//	СтрокаСИВАНАБЕЛ.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(СтрокаСИВАНАБЕЛ.Номенклатура.ВидСтавкиНДС, ТекущаяДатаСеанса());
			//Иначе
			//	СтрокаСИВАНАБЕЛ.СтавкаНДС = СтруктураОбщих.СтавкаНДСПоУмолчанию;
			//КонецЕсли;
			//
			//СтрокаСИВАНАБЕЛ.Сумма = СтрокаСИВАНАБЕЛ.Цена*СтрокаСИВАНАБЕЛ.Количество;
			//СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаСИВАНАБЕЛ.СтавкаНДС);
			//СтрокаСИВАНАБЕЛ.СуммаНДС = СтрокаСИВАНАБЕЛ.Сумма - (СтрокаСИВАНАБЕЛ.Сумма)/((СтавкаНДС + 100) / 100);
			//СтрокаСИВАНАБЕЛ.Всего = СтрокаСИВАНАБЕЛ.Сумма + СтрокаСИВАНАБЕЛ.СуммаНДС;
			
			НоваяСтрокаЗаказа							=		ТаблицаЗаказа.Добавить();
			НоваяСтрокаЗаказа.Артикул 					= 		Выборка.Артикул;
			НоваяСтрокаЗаказа.Наименование 				= 		Выборка.Наименование;
			НоваяСтрокаЗаказа.Номенклатура 				= 		Выборка.Номенклатура;
			НоваяСтрокаЗаказа[НоваяТочка.КодТочки] 		= 		Выборка.Заказать;
			
		КонецЦикла;
		
		//Если ЗаказСИВАНАБЕЛ.Запасы.Количество() <> 0 Тогда 
		//	
			Попытка
			//УстановитьПривилегированныйРежим(Истина);
		
		//		//костыль
		//		ЗаказСИВАНАБЕЛ.Записать(РежимЗаписиДокумента.Запись);
				ЗаписатьНаборОтправкаПоставщику(ВыборкаПоТочкам.Магазин);
		//		Если ПривилегированныйРежим() Тогда
		//			УстановитьПривилегированныйРежим(Ложь);
		//		КонецЕсли;
			Исключение
				
				//Если ПривилегированныйРежим() Тогда
				//	УстановитьПривилегированныйРежим(Ложь);
				//КонецЕсли;
				
			КонецПопытки;
		  //КонецЕсли;
		
		
	КонецЦикла; 
	Если  ТаблицаЗаказа.Количество()>0 Тогда
		ТаблицаЗаказа.Свернуть("Артикул,Наименование,Номенклатура",СтрокаСвертки);
		ТаблицаЗаказа.Сортировать("Наименование");
		ТаблицаЗаказа.Колонки.Добавить("ОбщийЗаказ",ТипЧисло) ;
		
		Для каждого СтрТаб Из ТаблицаЗаказа Цикл
			Для каждого СтрТоч Из ТаблицаТочек Цикл
				СтрТаб.ОбщийЗаказ = СтрТаб.ОбщийЗаказ+СтрТаб[СтрТоч.КодТочки];
			КонецЦикла; 
		КонецЦикла; 
		
		СтруктураЗаявки = СформироватьЗаявку(ТаблицаЗаказа,ТаблицаТочек);
		//костыль
		 ОтправитьНаПочту(СтруктураЗаявки,СтруктураПараметров);
	КонецЕсли;
	
	
	
КонецФункции // ()

#КонецОбласти

#Область  РасписаниеМагазинов
Функция ДействующиеМагазины(МВТ,Организация)   Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц =  МВТ;
	Запрос.УстановитьПараметр("Организация" ,Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.Ссылка КАК Магазин,
	|	СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.саУНФ_ЛетнееРасписание КАК ЛетнееРасписание,
	|	СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.саУНФ_ЗимнееРасписание КАК ЗимнееРасписание
	|ПОМЕСТИТЬ ВТ_РТТ
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.ДополнительныеРеквизиты КАК СтруктурныеЕдиницыДополнительныеРеквизиты
	|ГДЕ
	|	СтруктурныеЕдиницыДополнительныеРеквизиты.Свойство.Имя ПОДОБНО ""%ДействующийМагазин%""
	|	И ТИПЗНАЧЕНИЯ(СтруктурныеЕдиницыДополнительныеРеквизиты.Значение) = ТИП(БУЛЕВО)
	|	И СтруктурныеЕдиницыДополнительныеРеквизиты.Значение = ИСТИНА
	|	И СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.Организация = &Организация";
	
	Результат = Запрос.Выполнить();
	
КонецФункции // ()

Функция ПреобразоватьВремя(Час,Минута)
	ЧасСтр=СОКРЛП(СТРОКА(Час));
	Если СтрДлина(ЧасСтр)=1 Тогда
		ЧасСтр="0"+ЧасСтр;
	КонецЕсли;
	
	МинСтр=СОКРЛП(СТРОКА(Минута));
	Если СтрДлина(МинСтр)=1 Тогда
		МинСтр="0"+МинСтр;
	КонецЕсли;
	Возврат ЧасСтр+":"+МинСтр;
КонецФункции // ()

Функция РасчитатьОтклонение(Отклонение)
	Если Отклонение=5000 Тогда
		Возврат "НЕ ОТКРЫВАЛСЯ";
	КонецЕсли; 
	ЧасОтклонения = ЦЕЛ(Отклонение/60);
	Если ЧасОтклонения=0  Тогда
		Возврат Строка(Отклонение) +" мин."
	Иначе
		МинОтклонения =  Отклонение- ЧасОтклонения*60;
		Возврат Строка(ЧасОтклонения) +" ч. "+?(МинОтклонения=0, "" ,Строка(МинОтклонения) +" мин.");
		
	КонецЕсли; 
КонецФункции // ()

Функция СформироватьИнкасацию(Результат)
	
	Если  Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли; 	
	
	СтруктураПараметров =ОбщиеПараметрыАвтозаказа();
	
	
	СтрокаКопий ="";
	Если СтруктураПараметров.Свойство("КопияРасписания") Тогда
		СтрокаКопий =СОКРЛП(СтруктураПараметров.КопияРасписания);	
	КонецЕсли;
	
	КомуРасписание ="";
	Если СтруктураПараметров.Свойство("КомуРасписание") Тогда
		КомуРасписание = СОКРЛП(СтруктураПараметров.КомуРасписание);
	КонецЕсли; 
	
	Макет = ПолучитьОбщийМакет("Расписание");
	
	
	ВыборкаАдресЭП = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока  ВыборкаАдресЭП.Следующий() Цикл
		АдресЭП=СОКРЛП(ВыборкаАдресЭП.АдресЭП); 
		Если АдресЭП=""  Тогда
			Продолжить;
		КонецЕсли; 
		
		Если  НЕ саУНФ_ОбщийМодуль.EmailValid(АдресЭП) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если НЕ ПустаяСтрока(КомуРасписание) Тогда
			Если СтрНайти(АдресЭП,КомуРасписание)>0 Тогда
				Продолжить;
			КонецЕсли; 					  	
		КонецЕсли;  
		
		Если НЕ ПустаяСтрока(СтрокаКопий) Тогда
			Если СтрНайти(СтрокаКопий,АдресЭП)>0 Тогда
				Продолжить;
			КонецЕсли; 					  	
		КонецЕсли;  
		
		ТабличныйДок = Новый ТабличныйДокумент;
		
		ОбластьШапкаИнкассация 				=  	Макет.ПолучитьОбласть("ОбластьШапкаИнкассация");
		ОбластьСтрокаИнкассация 			=  	Макет.ПолучитьОбласть("ОбластьСтрокаИнкассация");
		ОбластьИтог							=	Макет.ПолучитьОбласть("ОбластьИтог");

		ТабличныйДок.Вывести(ОбластьШапкаИнкассация);
		
		ИтогСумма			=	0;
		ИтогСуммаПревышения	=	0;

		
		Выборка =  ВыборкаАдресЭП.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбластьСтрокаИнкассация.Параметры.Заполнить(Выборка);
			ТабличныйДок.Вывести(ОбластьСтрокаИнкассация);
			
			ИтогСумма				=	ИтогСумма +  Выборка.Сумма;
			ИтогСуммаПревышения   	=	ИтогСуммаПревышения +  Выборка.СуммаПревышения;

			
		КонецЦикла; 
		
		ОбластьИтог.Параметры.ИтогСумма 					= ИтогСумма;
		ОбластьИтог.Параметры.ИтогСуммаПревышения			= ИтогСуммаПревышения;
		ТабличныйДок.Вывести(ОбластьИтог);

		
		ИмяФайла = ПолучитьИмяВременногоФайла(".XLS");
		ТабличныйДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
		ОтправитьИнкасациюНаПочту(АдресЭП,ИмяФайла);
	КонецЦикла; 
	
КонецФункции // ()

Процедура ОтправитьИнкасациюНаПочту(АдресЭП,ИмяФайла)
	Кому = АдресЭП;
	СоответствиеВложение = Новый Соответствие;
	СоответствиеВложение.Вставить("Файл",ИмяФайла);
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("Кому",Кому);
	
	СтруктураПисьма.Вставить("Тема","Инкассация");
	СтруктураПисьма.Вставить("Тело","Во вложении информация о необходимости в инкасации");
	
	СтруктураПисьма.Вставить("Вложения",СоответствиеВложение);
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,СтруктураПисьма);
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры


Функция СформироватьОтклонениеОтРасписания(ТаблицаНачала,ТаблицаОкончания,Результат)
	ТабличныйДок = Новый ТабличныйДокумент;
	
	Макет = ПолучитьОбщийМакет("Расписание");
	ОбластьШапка 		= Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьСтрока 		= Макет.ПолучитьОбласть("ОбластьСтрока");
	ОбластьОК			= Макет.ПолучитьОбласть("ОбластьОК");
	
	Если ТаблицаОкончания.Количество()>0 Тогда
		ОбластьШапка.Параметры.Z1 = "до";
		ОбластьШапка.Параметры.Z2 = "Закрылся";
		ТабличныйДок.Вывести(ОбластьШапка);
		
		Для каждого СтрТоч Из ТаблицаОкончания Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрТоч);
			ОбластьСтрока.Параметры.РасписаниеРаботы = ПреобразоватьВремя(СтрТоч.ЧасОкончания,СтрТоч.МинутаОкончания);
			ОбластьСтрока.Параметры.Отклонение 			= РасчитатьОтклонение(СтрТоч.Отклонение);
			ТабличныйДок.Вывести(ОбластьСтрока);
		КонецЦикла; 
		
	Иначе
		ОбластьОК.Параметры.Z3 = " закрыты ";
		ТабличныйДок.Вывести(ОбластьОК);
	КонецЕсли; 
	
	Если ТаблицаНачала.Количество()>0 Тогда
		ОбластьШапка.Параметры.Z1 = "с";
		ОбластьШапка.Параметры.Z2 = "Открылся";
		ТабличныйДок.Вывести(ОбластьШапка);
		
		Для каждого СтрТоч Из ТаблицаНачала Цикл
			ОбластьСтрока.Параметры.Заполнить(СтрТоч);
			ОбластьСтрока.Параметры.РасписаниеРаботы = ПреобразоватьВремя(СтрТоч.ЧасНачала,СтрТоч.МинутаНачала);
			ОбластьСтрока.Параметры.Отклонение 			= РасчитатьОтклонение(СтрТоч.Отклонение);
			ТабличныйДок.Вывести(ОбластьСтрока);
		КонецЦикла; 
		
	Иначе
		ОбластьОК.Параметры.Z3 = " открыты ";
		ТабличныйДок.Вывести(ОбластьОК);
	КонецЕсли; 
	
	Если  НЕ Результат.Пустой() Тогда
		ОбластьШапкаИнкассация 		=  Макет.ПолучитьОбласть("ОбластьШапкаИнкассация");
		ОбластьСтрокаИнкассация 	=  Макет.ПолучитьОбласть("ОбластьСтрокаИнкассация");
		ОбластьИтог					=	Макет.ПолучитьОбласть("ОбластьИтог");

		ТабличныйДок.Вывести(ОбластьШапкаИнкассация);
		
		ИтогСумма			=	0;
		ИтогСуммаПревышения	=	0;

		ВыборкаАдресЭП = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  ВыборкаАдресЭП.Следующий() Цикл
			Выборка =  ВыборкаАдресЭП.Выбрать();
			Пока Выборка.Следующий() Цикл
				ИтогСумма			=	ИтогСумма +  Выборка.Сумма;
				ИтогСуммаПревышения =	ИтогСуммаПревышения +  Выборка.СуммаПревышения;

				
				ОбластьСтрокаИнкассация.Параметры.Заполнить(Выборка);
				ТабличныйДок.Вывести(ОбластьСтрокаИнкассация);
			КонецЦикла; 
			
		КонецЦикла; 
		
	ОбластьИтог.Параметры.ИтогСумма 			= ИтогСумма;
	ОбластьИтог.Параметры.ИтогСуммаПревышения	= ИтогСуммаПревышения;
	ТабличныйДок.Вывести(ОбластьИтог);
	
		
	КонецЕсли; 
	
	
	
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".XLS");
	ТабличныйДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLS);
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИмяФайла",ИмяФайла);
	
	
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОтправитьРасписаниеНаПочту(ПараметрыОтправки,СтруктураПараметров)
	Кому = СОКРЛП(СтруктураПараметров.КомуРасписание);
	СтрокаКопий ="";
	Если СтруктураПараметров.Свойство("Копия") Тогда
		СтрокаКопий =СОКРЛП(СтруктураПараметров.КопияРасписания);	
	КонецЕсли;
	СоответствиеВложение = Новый Соответствие;
	СоответствиеВложение.Вставить("Файл",ПараметрыОтправки.ИмяФайла);
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("Кому",Кому);
	
	СтруктураПисьма.Вставить("Тема","Открытие / Закрытие магазинов / Инкассация");
	СтруктураПисьма.Вставить("Тело","Во вложении информация о закрытии и открытии магазинов, а так же необходимости в инкасации");
	
	СтруктураПисьма.Вставить("Копии",СтрокаКопий);
	СтруктураПисьма.Вставить("Вложения",СоответствиеВложение);
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,СтруктураПисьма);
	
	Файл = Новый Файл(ПараметрыОтправки.ИмяФайла);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ПараметрыОтправки.ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНаборКонтрольРасписанияМагазинов(ТаблицаНачала,ТаблицаОкончания) 
	
	Для каждого  СтрТаб Из ТаблицаНачала  Цикл
		УстановитьПривилегированныйРежим(Истина);	
		НаборЗаписей = РегистрыСведений.саУНФ_КонтрольРасписанияМагазинов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(СтрТаб.КассоваяСмена));
		НаборЗаписей.Отбор.Магазин.Установить(СтрТаб.Магазин);
		НаборЗаписей.Отбор.Статус.Установить(Перечисления.саУНФ_СостояниеМагазина.Открытие);
		
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период			 								= НачалоДня(СтрТаб.КассоваяСмена);
		Запись.Магазин     									= СтрТаб.Магазин;
		Запись.Статус                              				= Перечисления.саУНФ_СостояниеМагазина.Открытие;
		Запись.Час                                              	= СтрТаб.ЧасНачала;
		Запись.Минута                                        	= СтрТаб.МинутаНачала;
		Запись.Отклонение                                 	= СтрТаб.Отклонение;
		Запись.Факт                                           	= СтрТаб.КассоваяСмена;
		
		Если НаборЗаписей.Количество()>0 Тогда
			Попытка
				НаборЗаписей.Записать();
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
				
			Исключение
				Описание = ОписаниеОшибки();
				ЗаписьОшибкиВЖурнал("Запись в регистр контроль расписания магазинов",НаборЗаписей,НаборЗаписей,Описание);
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
				
			КонецПопытки;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого  СтрТаб Из ТаблицаОкончания  Цикл
		УстановитьПривилегированныйРежим(Истина);	
		НаборЗаписей = РегистрыСведений.саУНФ_КонтрольРасписанияМагазинов.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Период.Установить(НачалоДня(СтрТаб.КассоваяСмена));
		НаборЗаписей.Отбор.Магазин.Установить(СтрТаб.Магазин);
		НаборЗаписей.Отбор.Статус.Установить(Перечисления.саУНФ_СостояниеМагазина.Закрытие);
		
		
		Запись = НаборЗаписей.Добавить();
		Запись.Период			 								= НачалоДня(СтрТаб.КассоваяСмена);
		Запись.Магазин     									= СтрТаб.Магазин;
		Запись.Статус                              				= Перечисления.саУНФ_СостояниеМагазина.Закрытие;
		Запись.Час                                              	= СтрТаб.ЧасОкончания;
		Запись.Минута                                        	= СтрТаб.МинутаОкончания;
		Запись.Отклонение                                 	= СтрТаб.Отклонение;
		Запись.Факт                                           	= СтрТаб.КассоваяСмена;
		
		Если НаборЗаписей.Количество()>0 Тогда
			Попытка
				НаборЗаписей.Записать();
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
			Исключение
				Описание = ОписаниеОшибки();
				ЗаписьОшибкиВЖурнал("Запись в регистр недопоставок",НаборЗаписей,НаборЗаписей,Описание);
				Если ПривилегированныйРежим() Тогда
					УстановитьПривилегированныйРежим(Ложь);	
				КонецЕсли;
			КонецПопытки;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры


Процедура ОтправитьОтклонения(ТаблицаНачала,ТаблицаОкончания,Результат) Экспорт
	ЗаписатьНаборКонтрольРасписанияМагазинов(ТаблицаНачала,ТаблицаОкончания);
	
	СтруктураПараметров =ОбщиеПараметрыАвтозаказа();
	ПроверкаСтруктуры(СтруктураПараметров);
	
	
	
	Если НЕ СтруктураПараметров.Свойство("КомуРасписание") Тогда
		Возврат;	
	КонецЕсли;
	
	
	Кому = СОКРЛП(СтруктураПараметров.КомуРасписание);
	Если ПустаяСтрока(Кому) Тогда
		Возврат;
	КонецЕсли; 
	
	
	СтруктураЗаявки = СформироватьОтклонениеОтРасписания(ТаблицаНачала,ТаблицаОкончания,Результат);
	ОтправитьРасписаниеНаПочту(СтруктураЗаявки,СтруктураПараметров);
	СформироватьИнкасацию(Результат);
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеЗапасов



Функция ПолучитьПеремещения(Получатель,Отправитель,ДатаДок)   Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасов.Представление КАК Представление
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	ПеремещениеЗапасов.Дата МЕЖДУ &Дата1 И &Дата2
	|	И НЕ ПеремещениеЗапасов.ПометкаУдаления
	|	И ПеремещениеЗапасов.СтруктурнаяЕдиницаРеципиент = &Получатель
	|	И ПеремещениеЗапасов.СтруктурнаяЕдиница = &Отправитель";
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаДок));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаДок));
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);

	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		
		Возврат Выборка;
		
	КонецЕсли; 
КонецФункции // ()


#КонецОбласти 