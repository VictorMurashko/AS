Функция СозданиеСтруктурыСоответсвияПолей()
	СтруктураПолей = Новый Структура("
	| АдресДоставки,
	| Квартира, 
	| ВремяДоставкиС,
	| ОжидаемаяДатаВручения,
	| ЗонаТариф,
	| НоменклатураДоставки",
	"UF_CRM_1554456542646",
	"UF_CRM_1612864587",
	"UF_CRM_1633427724",
	"UF_CRM_1633427724",
	"UF_CRM_1633426338",
	"УК-00022475"
	);
	//"UF_CRM_1554456542646",
	//"UF_CRM_1612864587",
	//"UF_CRM_1633430399",
	//"UF_CRM_1554456432689",
	//"UF_CRM_1633430368",
	//"УК-00017166"
	
	Возврат  СтруктураПолей;
	//"UF_CRM_1554456520963",
	//"2021-10-27T14:00:00+03:00"	
КонецФункции // ()

Функция СозданиеСтруктурыДозаполненияСделки()
	СтруктураСделки = Новый Структура("
	| АдресДоставки,
	| Квартира, 
	| ВремяДоставкиС,
	| ОжидаемаяДатаВручения,
	| ДатаОтгрузки,
	| ЗонаТариф,
	| СпособДоставки,
	| СлужбаДоставки,
	| НоменклатураДоставки,
	| GEOКоординаты",	
	);
	
	Возврат  СтруктураСделки;
КонецФункции // ()

Функция ПолучитьЗоныДоставки(id)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗоныТарифыДоставки.id_Bitrix КАК id_Bitrix,
	|	ЗоныТарифыДоставки.Ссылка КАК ЗонаТариф
	|ИЗ
	|	Справочник.ЗоныТарифыДоставки КАК ЗоныТарифыДоставки
	|ГДЕ
	|	НЕ ЗоныТарифыДоставки.ПометкаУдаления
	|	И ЗоныТарифыДоставки.id_Bitrix = &id";
	
	
	Запрос.УстановитьПараметр("id", id);	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЗонаТариф;
	КонецЕсли;
	
КонецФункции 

Функция ПолучитьДатуДоставки(ДатаСтрокой)
	//"2021-10-06T03:00:00+03:00"
	ОжидаемаяДатаВручения = Неопределено;
	СтрокаДаты = ЛЕВ(ДатаСтрокой,10);
	МассивДаты=СтрРазделить(СтрокаДаты,"-",Ложь);
	Если МассивДаты.Количество()>2 Тогда
		ГодДаты		=		МассивДаты[0];
		МесяцДаты 	=		МассивДаты[1];
		ДеньДаты		=    	МассивДаты[2];
		
		Если  СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ГодДаты) 
			И    СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(МесяцДаты) 
			И    СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДеньДаты) 
			Тогда
			ОжидаемаяДатаВручения = Дата(ГодДаты,МесяцДаты,ДеньДаты);
		КонецЕсли; 
	КонецЕсли; 
	Возврат ОжидаемаяДатаВручения;
КонецФункции 

Функция ПолучитьВремяДоставки(ВремяДоставкиС)
	//"2021-10-27T14:00:00+03:00"
	ОжидаемоеВремяПоставки = Неопределено;
	Т = Найти(ВремяДоставкиС,"T");
	Если Т = 0  Тогда
		ОжидаемоеВремяПоставки = Дата(1,1,1,6,0,0);
		Возврат  ОжидаемоеВремяПоставки;
	КонецЕсли; 
	
	ВремяДоставкиС=Сред(ВремяДоставкиС,Т+1,8);
	
	МассивДаты=СтрРазделить(ВремяДоставкиС,":",Ложь);
	Если МассивДаты.Количество()>1 Тогда
		ЧасДаты		=		ЛЕВ(МассивДаты[0],2);
		МинутаДаты 	=		ЛЕВ(МассивДаты[1],2);
		
		Если   СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧасДаты) 
			И    СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(МинутаДаты) 
			Тогда
			ОжидаемоеВремяПоставки = Дата(1,1,1,ЧасДаты,МинутаДаты,0);
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ОжидаемоеВремяПоставки;
КонецФункции // ()

Функция ЛК_Компания(Контрагент, СоответствиеПолей,ИнформацияОРеквизитах) Экспорт
	
	Контрагент["ID_ЛК"]=СоответствиеПолей["UF_CRM_1636008059"];
	Контрагент["Филиал"]=Булево( Число(СоответствиеПолей["UF_CRM_1636023502"]) ) ;
	Если ТипЗнч(ИнформацияОРеквизитах)=Тип("Массив") И ИнформацияОРеквизитах.Количество()>0 Тогда
		НазваниеСтраны=ВРЕГ(ИнформацияОРеквизитах[0]["UF_CRM_1638253179"]);
		Контрагент["СтранаРегистрации"] = Справочники.СтраныМира.НайтиПоНаименованию(НазваниеСтраны); 
		Контрагент["ФИОДиректора"] = ИнформацияОРеквизитах[0]["RQ_DIRECTOR"];
		Контрагент["ИНН"] = ИнформацияОРеквизитах[0]["RQ_INN"];
		Контрагент["КПП"] = ИнформацияОРеквизитах[0]["RQ_KPP"];
		Контрагент["КодПоОКПО"] = ИнформацияОРеквизитах[0]["RQ_OKPO"];

		
		ЮрОснование = ИнформацияОРеквизитах[0]["RQ_BASE_DOC"];
		Если НЕ ПустаяСтрока(ЮрОснование) Тогда
			ДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","ЮридическоеОснованиеРаботыДиректора_a7bf995706a74ef8a6827b8eedcd1d74");
			Если Не ДопСвойство=Неопределено Тогда
				      СтруктураПоиска = Новый Структура("Свойство",ДопСвойство);
				      МассивСтрок=Контрагент.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
				      Если МассивСтрок.Количество()>0 Тогда
					          МассивСтрок[0].Значение =  ЮрОснование
					  Иначе
						НоваяСтрока = Контрагент.ДополнительныеРеквизиты.Добавить();  
						НоваяСтрока.Свойство  = ДопСвойство;
						НоваяСтрока.Значение  =  ЮрОснование;
					  КонецЕсли; 
			КонецЕсли; 
			
			
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецФункции // ()

Функция Адрес_Компания(КомпанияКонтакт,ТипАдреса,Адрес2) Экспорт
	   Координаты="";
	   Если Строка(ТипАдреса) = "6" Тогда
			    ВидКИ =  Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ИначеЕсли Строка(ТипАдреса) = "11" Тогда
				ВидКИ =  Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
				Координаты=ЗапросКоординатПоАдресу(Адрес2);
		КонецЕсли;
	    НайденнаяСтрока = КомпанияКонтакт.КонтактнаяИнформация.Найти(ВидКИ, "Вид"); 
		Если НайденнаяСтрока = Неопределено Тогда
			НовыйКИ =  КомпанияКонтакт.КонтактнаяИнформация.Добавить();
			НовыйКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НовыйКИ.Вид = ВидКИ;
			НовыйКИ.Представление 	= Адрес2;
        Иначе
		   НайденнаяСтрока.Представление 	= Адрес2;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.id_adress) Тогда
			НайденнаяСтрока.id_adress = Новый УникальныйИдентификатор();
		КонецЕсли;
        Если  НЕ ПустаяСтрока(Координаты) И ТипЗнч(КомпанияКонтакт)=Тип("СправочникОбъект.Контрагенты") Тогда
		     КомпанияКонтакт.GEOКоординаты  =  Координаты;
		КонецЕсли; 
			
		
	КонецФункции	
	
Функция  КонтактноеЛицо_Компания(Компания,Контакт)	Экспорт
	Если ЗначениеЗаполнено(Компания) И ЗначениеЗаполнено(Контакт) 
		  И ТипЗнч(Компания) = Тип("СправочникСсылка.Контрагенты") И  ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица")
		
		Тогда
	      КомпанияОбъект = Компания.ПолучитьОбъект();	
		  КомпанияОбъект.КонтактноеЛицо = Контакт;
	      КомпанияОбъект.Записать();
	КонецЕсли; 
	
	
КонецФункции	

Функция   БанковскийСчет_Компания(БанковскийСчет)  Экспорт
	КомпанияОбъект = БанковскийСчет.Владелец.ПолучитьОбъект();
	КомпанияОбъект.БанковскийСчетПоУмолчанию =  БанковскийСчет.Ссылка;
	КомпанияОбъект.Записать();
КонецФункции

#Область ПроверкаКонтрагентаВКаталоге

Функция ЗапросКонтрагентаПоУНП(ПолныйАдресРесурса)   Экспорт
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса); 
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		Сообщить("Произошла сетевая ошибка!");
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		Сообщить("Код статуса больше 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		Сообщить("Код статуса больше 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Сообщить("Код статуса больше 3XX, Перенаправление. Код статуса: " + Результат.КодСостояния);
		Если Результат.КодСостояния = 302 Тогда
			Сообщить("Код статуса 302, Постоянное перенаправление.");
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				Сообщить("Выполняю запрос по новому адресу " + АдресРесурса);
				ЗапросКонтрагентаПоУНП(АдресРесурса);
			Иначе
				Сообщить("Сервер не сообщил адрес ресурса!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Статусы 1XX и 2XX считаем хорошими
	Возврат Результат
	
	
КонецФункции // ()

Функция ЧитатьКакСтруктуру(XML, ТипПоследнегоЭлемента = Неопределено)
	Ветка = Новый Структура;
	Значение = "";
	
	Пока XML.Прочитать() Цикл
		ТипУзла = XML.ТипУзла;
		Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ТипПоследнегоЭлемента = ТипУзлаXML.НачалоЭлемента;
			Временно = "";
			Если Ветка.Свойство(XML.Имя, Временно) Тогда
				Если ТипЗнч(Временно) <> Тип("Массив") Тогда
					ЭнЗэ = Новый Массив;
					ЭнЗэ.Добавить(Временно);
					Временно = ЭнЗэ;
					ЭнЗэ = "";
					Ветка.Удалить(XML.Имя);
					Ветка.Вставить(XML.Имя, Временно);
				КонецЕсли;
				Временно.Добавить(ЧитатьКакСтруктуру(XML, ТипПоследнегоЭлемента));
			Иначе
				Ветка.Вставить(XML.Имя, ЧитатьКакСтруктуру(XML, ТипПоследнегоЭлемента));
			КонецЕсли;
		ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ТипПоследнегоЭлемента = ТипУзлаXML.КонецЭлемента;
			Возврат ?(ЗначениеЗаполнено(Ветка), Ветка, Значение);
		ИначеЕсли ТипУзла = ТипУзлаXML.Текст И Не ТипПоследнегоЭлемента = ТипУзлаXML.Текст Тогда
			ТипПоследнегоЭлемента = ТипУзлаXML.Текст;
			Значение = XML.Значение;
			XML.Прочитать(); //Вычитка закрывающего тега
			Возврат Значение;
		Иначе
			// игнорируем текст вне узлов
			// можем также добавлять текст вне узлов в текст, находящийся в предыдущем узле через какой нибудь спецсимвол
			// например через Таб, код ниже:
			//Временно[Временно.ВГраница()] = Временно[Временно.ВГраница()] + Символы.Таб + XML.Значение
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ветка;
КонецФункции

Функция JSONМассивКаталог(Результат)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Запись = Новый ЗаписьТекста(ИмяВременногоФайла); 
		Запись.Записать(Результат);
		Запись.Закрыть();
	Иначе    
		Результат.Записать(ИмяВременногоФайла);
	КонецЕсли;
	
	
	ЧтениеJSON= Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	МассивКаталог = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат МассивКаталог; 
КонецФункции // ()

Функция ПроверитьСуществуетЛиКонтрагентВБазе(ИНН,ГоловнойКонтрагент=Неопределено,СсылкаНаКонтрагента=Неопределено)   Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.Недействителен
	|	И НЕ Контрагенты.Ссылка = &СсылкаНаКонтрагента "+?(ГоловнойКонтрагент=Неопределено,""," И НЕ Контрагенты.Ссылка =&ГоловнойКонтрагент И НЕ Контрагенты.Ссылка.ГоловнойКонтрагент=&ГоловнойКонтрагент")+"
	|";
	
	Запрос.УстановитьПараметр("ГоловнойКонтрагент",ГоловнойКонтрагент);
	
	
	Если СсылкаНаКонтрагента=Неопределено Тогда
		Запрос.УстановитьПараметр("СсылкаНаКонтрагента",Справочники.Контрагенты.ПустаяСсылка());
	Иначе	
		Запрос.УстановитьПараметр("СсылкаНаКонтрагента",СсылкаНаКонтрагента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли; 
КонецФункции

Функция ОбработатьКонтрагентаПоИНН(НомерИНН)  Экспорт
	ключAPI="7d26cc075c7f3481e11168adc2a93d5f";
	ПолныйАдресРесурса ="https://api.kartoteka.by/summary/"+СОКРЛП(НомерИНН)+"?access-token="+ ключAPI;
	Ответ=ЗапросКонтрагентаПоУНП(ПолныйАдресРесурса); 		
	Результат = Ответ.ПолучитьТелоКакСтроку();
	Если  ЛЕВ(СОКРЛП(Результат),1)="{" Тогда
		ДанныеКонтрагента=JSONМассивКаталог(Результат);
		// ДанныеАдреса=JSON_ПреобразоватьВСтруктуру(результат);
		Возврат  ДанныеКонтрагента;
		
	Иначе	
		Возврат  Неопределено;
	КонецЕсли; 
	//ДанныеКонтрагента = ЧитатьКакСтруктуру(Результат);
КонецФункции // ()

#КонецОбласти 



Функция ПолучитьНомеклатуруДоставки(Код)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК НоменклатураДоставки
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.НоменклатураДоставки;
	КонецЕсли;
	
	
	
	
КонецФункции // ()


Функция ЗаполнениеСтруктурыДозаполненияСделки(Данные)
	СтруктураСделки 	= СозданиеСтруктурыДозаполненияСделки();
	СтруктураПолей 	= СозданиеСтруктурыСоответсвияПолей();
	ОМ24 = ОбщегоНазначения.ОбщийМодуль("Б24_Синхр_СинхронизацияВызовСервера");
	Если ОМ24 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	GEOКоординаты	= Неопределено;
	АдресДоставки 	= Неопределено;
	Квартира 				= Неопределено;
	ВремяДоставкиС  = Неопределено;
	ОжидаемаяДатаВручения = Неопределено;
	ЗонаТариф 			=  Неопределено;
	
	СоотвАдрДоставки	=	Данные.Получить(СтруктураПолей.АдресДоставки);	
	Если НЕ  СоотвАдрДоставки = Неопределено Тогда
		АдресДоставки 		=  ОМ24.ПолучитьЗначениеПоXML(Тип("Строка"), СоотвАдрДоставки);
		МассивАдресов=СтрРазделить(АдресДоставки,"|",Ложь);
		Если ТипЗнч(МассивАдресов)=Тип("Массив") Тогда
			Если МассивАдресов.Количество()>1 Тогда
				АдресДоставки 	= МассивАдресов[0];
				GEOКоординаты	= СОКРЛП(МассивАдресов[1]);
			КонецЕсли; 
		КонецЕсли;   
	КонецЕсли; 
	
	СоотвКвартира=Данные.Получить(СтруктураПолей.Квартира);
	Если НЕ  СоотвКвартира = Неопределено Тогда
		Квартира =  ОМ24.ПолучитьЗначениеПоXML(Тип("Строка"), СоотвКвартира);
	КонецЕсли;
	
	//"2021-10-27T14:00:00+03:00"
	СоотвВремяДоставкиС=Данные.Получить(СтруктураПолей.ВремяДоставкиС);
	Если НЕ  СоотвВремяДоставкиС = Неопределено Тогда
		ВремяДоставкиС =  СОКРЛП(ОМ24.ПолучитьЗначениеПоXML(Тип("Строка"), СоотвВремяДоставкиС));
		ОжидаемаяДатаВручения =  СОКРЛП(ОМ24.ПолучитьЗначениеПоXML(Тип("Строка"), СоотвВремяДоставкиС));
		Если НЕ  ВремяДоставкиС = Неопределено И НЕ ВремяДоставкиС ="" Тогда
			ВремяДоставкиС =ПолучитьВремяДоставки(ВремяДоставкиС);
			ОжидаемаяДатаВручения = ПолучитьДатуДоставки(ОжидаемаяДатаВручения);
		Иначе
			ВремяДоставкиС ="";
			ОжидаемаяДатаВручения =  Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	//СоотвОжидаемаяДатаВручения=Данные.Получить(СтруктураПолей.ОжидаемаяДатаВручения);
	//Если НЕ  СоотвОжидаемаяДатаВручения = Неопределено Тогда
	//	ОжидаемаяДатаВручения =  СОКРЛП(ОМ24.ПолучитьЗначениеПоXML(Тип("Строка"), ОжидаемаяДатаВручения));
	//КонецЕсли;
	//Если НЕ  ОжидаемаяДатаВручения = Неопределено И НЕ ОжидаемаяДатаВручения ="" Тогда
	//	ОжидаемаяДатаВручения = ПолучитьДатуДоставки(ОжидаемаяДатаВручения);
	//Иначе
	//	ОжидаемаяДатаВручения =  Неопределено;
	//КонецЕсли; 
	
	СоотвЗонаТариф	=	Данные.Получить(СтруктураПолей.ЗонаТариф);
	Если НЕ  СоотвЗонаТариф = Неопределено Тогда
		ЗонаТариф =  СОКРЛП(ОМ24.ПолучитьЗначениеПоXML(Тип("Строка"), СоотвЗонаТариф));
	КонецЕсли;
	Если НЕ  ЗонаТариф  = Неопределено И НЕ ЗонаТариф  ="" Тогда
		ЗонаТариф 	= 	ПолучитьЗоныДоставки(ЗонаТариф);
	Иначе
		ЗонаТариф =  Неопределено;
	КонецЕсли; 
	
	СтруктураСделки.СпособДоставки 	= Перечисления.СпособыДоставки.Курьер;
	СтруктураСделки.СлужбаДоставки	=	Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
	
	СтруктураСделки.НоменклатураДоставки = ПолучитьНомеклатуруДоставки(СтруктураПолей.НоменклатураДоставки);
	
	СтруктураСделки.АдресДоставки   				=  АдресДоставки;
	СтруктураСделки.Квартира            				=  Квартира;
	СтруктураСделки.ВремяДоставкиС 				=  ВремяДоставкиС;
	СтруктураСделки.ОжидаемаяДатаВручения 	=  ОжидаемаяДатаВручения;
	СтруктураСделки.ДатаОтгрузки                    	=  ОжидаемаяДатаВручения;
	СтруктураСделки.ЗонаТариф                       	=  ЗонаТариф;
	СтруктураСделки.GEOКоординаты	           	=  GEOКоординаты;
	
	Возврат СтруктураСделки;
КонецФункции

Функция ПолучитьАдресаКонтрагента(Контрагент,GEOКоординаты)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
	|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтрагентыКонтактнаяИнформация.Значение КАК Значение,
	|	КонтрагентыКонтактнаяИнформация.Ссылка.GEOКоординаты КАК GEOКоординаты
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
	|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
	|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
	|	И КонтрагентыКонтактнаяИнформация.Ссылка.GEOКоординаты = &GEOКоординаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.Представление,
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.ЗначенияПолей,
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.Значение,
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.GEOКоординаты
	|ИЗ
	|	РегистрСведений.саУНФ_ДополнительнаяКонтактнаяИнформация КАК саУНФ_ДополнительнаяКонтактнаяИнформация
	|ГДЕ
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.Контрагент = &Контрагент
	|	И саУНФ_ДополнительнаяКонтактнаяИнформация.Тип = &Тип
	|	И саУНФ_ДополнительнаяКонтактнаяИнформация.Вид = &Вид
	|	И саУНФ_ДополнительнаяКонтактнаяИнформация.GEOКоординаты = &GEOКоординаты";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("GEOКоординаты", GEOКоординаты);
	
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Возврат  ТаблицаРезультат;
	
КонецФункции // ()

Функция ПолучитьИнтернетДоставку()
	ИнтернетДоставка = Справочники.ВидыЗаказовПокупателей.НайтиПоНаименованию("Интернет-доставка");
	Если ИнтернетДоставка = Справочники.ВидыЗаказовПокупателей.ПустаяСсылка() ИЛИ ИнтернетДоставка = Неопределено Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ИнтернетДоставка;
	КонецЕсли;
	
	
КонецФункции // ()


Процедура ДозаполнениеСделки(Данные,Сделка)  Экспорт
	ИнтернетДоставка = ПолучитьИнтернетДоставку();
	Если ИнтернетДоставка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтернетДоставка = Сделка.ВидЗаказа Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСделки = ЗаполнениеСтруктурыДозаполненияСделки(Данные);
	АдресДоставки = "";
	АдресДоставкиЗначение  = "";
	АдресДоставкиЗначенияПолей ="";
	
	
	Если НЕ  СтруктураСделки.АдресДоставки = Неопределено И НЕ СтруктураСделки.АдресДоставки ="" Тогда
		
		АдресДоставки = СтруктураСделки.АдресДоставки;
		Если НЕ  СтруктураСделки.Квартира = Неопределено И НЕ СтруктураСделки.Квартира ="" Тогда
			АдресДоставки = "квартира "+СтруктураСделки.Квартира+", "+СОКРЛП(АдресДоставки);
		КонецЕсли;
	КонецЕсли;
	
	АдресВведенВСвободнойФорме = Истина;
	Если НЕ  СтруктураСделки.GEOКоординаты = Неопределено И НЕ СтруктураСделки.GEOКоординаты ="" Тогда
		ТаблицаРезультат=ПолучитьАдресаКонтрагента(Сделка.Контрагент,СтруктураСделки.GEOКоординаты);
		Если ТаблицаРезультат.Количество()>0 Тогда
			СтрокаТР = ТаблицаРезультат[0];
			Если ЛЕВ(СОКРЛП(СтрокаТР.Значение),1) = "{" Тогда
				АдресВведенВСвободнойФорме = УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(СтрокаТР.Значение);
			КонецЕсли;
			Если НЕ  АдресВведенВСвободнойФорме Тогда
				АдресДоставки 						= 	СтрокаТР.Представление;
				АдресДоставкиЗначение  			= 	СтрокаТР.Значение;
				АдресДоставкиЗначенияПолей 	=	СтрокаТР.ЗначенияПолей;
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
	//Нужно при записи контрагента запрашивать координаты google если 
	//адрес введен не в свободной форме.
	
	Сделка.АдресДоставки								=	  ?(ЗначениеЗаполнено(АдресДоставки),АдресДоставки,"");
	Сделка.АдресДоставкиЗначение				=	  ?(ЗначениеЗаполнено(АдресДоставкиЗначение),АдресДоставкиЗначение,"");
	Сделка.АдресДоставкиЗначенияПолей		=	  ?(ЗначениеЗаполнено(АдресДоставкиЗначенияПолей),АдресДоставкиЗначенияПолей,"");
	
	Сделка.ВремяДоставкиС					=    ?(ЗначениеЗаполнено(СтруктураСделки.ВремяДоставкиС), СтруктураСделки.ВремяДоставкиС,Дата(1,1,1,6,0,0));
	Если Сделка.ВремяДоставкиС >Дата(1,1,1,22,0,0)  Тогда
		Сделка.ВремяДоставкиПо                	=	  Сделка.ВремяДоставкиС;
	Иначе	
		Сделка.ВремяДоставкиПо                	=	  Сделка.ВремяДоставкиС + 4*60*60;
	КонецЕсли; 
	
	
	//Сделка.ВремяДоставкиПо                	=    Дата(1,1,1,23,59,0);
	Сделка.ОжидаемаяДатаВручения		=    ?(ЗначениеЗаполнено(СтруктураСделки.ОжидаемаяДатаВручения),СтруктураСделки.ОжидаемаяДатаВручения,Сделка.Дата);
	Сделка.ДатаОтгрузки						=    ?(ЗначениеЗаполнено(СтруктураСделки.ОжидаемаяДатаВручения),СтруктураСделки.ОжидаемаяДатаВручения,Сделка.Дата);
	Сделка.ЗонаТариф							=    ?(ЗначениеЗаполнено(СтруктураСделки.ЗонаТариф),СтруктураСделки.ЗонаТариф, Справочники.ЗоныТарифыДоставки.ПустаяСсылка());
	Сделка.СпособДоставки					=    СтруктураСделки.СпособДоставки;
	Сделка.СлужбаДоставки					=    СтруктураСделки.СлужбаДоставки;
	Сделка.НоменклатураДоставки			=    ?(ЗначениеЗаполнено(СтруктураСделки.НоменклатураДоставки),СтруктураСделки.НоменклатураДоставки, Справочники.Номенклатура.ПустаяСсылка());
	
	
	
КонецПроцедуры

#Область MAPGoogle

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьАдресДоставкиБитрих(АдресДоставки)  Экспорт
	ключAPI="AIzaSyCuLX4SItpANUucCi-BvIPkpA9rxQ1ulBE";
	МассивПодстрок=СтрРазделить(АдресДоставки,"|",Ложь);
	Если МассивПодстрок.Количество()=0 Тогда
		Возврат  АдресДоставки;
	КонецЕсли; 
	//GEOКоординаты = "";
	
	//ПоследняяСтрока =   МассивПодстрок[МассивПодстрок.Количество()-1];
	//Если  Найти(ПоследняяСтрока,";")>0 Тогда
	//	  GEOКоординаты = СтрЗаменить(ПоследняяСтрока,";",",");
	//Иначе
	//	Возврат  АдресДоставки;
	//КонецЕсли; 
	//
	//Ответ=ЗапросАдресаПоКоординатам("https://maps.googleapis.com/maps/api/geocode/json?latlng="+GEOКоординаты+"&language=ru&key="+ключAPI);
	//Результат = Ответ.ПолучитьТелоКакСтроку();
	//ДанныеАдреса=JSONМассив(Результат);
	//ДанныеАдреса=JSON_ПреобразоватьВСтруктуру(результат);
	Возврат  МассивПодстрок;
КонецФункции // ()

Функция ЗапросКоординатПоАдресу(Знач Адрес)  Экспорт
	ключAPI="AIzaSyCuLX4SItpANUucCi-BvIPkpA9rxQ1ulBE";
	Пока Найти(Адрес," ")>0 Цикл
		Адрес= СтрЗаменить(Адрес," ","%20");
	КонецЦикла; 
	
	
	Ответ=ЗапросАдресаПоКоординатам("https://maps.googleapis.com/maps/api/geocode/json?address="+Адрес+"&key="+ключAPI);
	Результат = Ответ.ПолучитьТелоКакСтроку();
	МассивGoogle=JSONМассив(Результат);
	//МассивGoogle(Структура) - "status"=ОК results(Массив) - results.geometry(Структура) -  "location"(Структура) - "lat","lng"
	Если НЕ ТипЗнч(МассивGoogle) = Тип("Структура") Тогда Возврат ""; КонецЕсли;
	Если НЕ МассивGoogle.Свойство("results") Тогда Возврат ""; КонецЕсли;
	МассивResults =  МассивGoogle.results;
	Если МассивResults.Количество()=0 Тогда Возврат ""; КонецЕсли;
	Если НЕ ТипЗнч(МассивResults) = Тип("Массив") Тогда Возврат ""; КонецЕсли;
	
	Попытка
		geometry=МассивResults[0]["geometry"];
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если НЕ ТипЗнч(geometry) = Тип("Структура") Тогда Возврат ""; КонецЕсли;
	Если НЕ geometry.Свойство("location") Тогда Возврат ""; КонецЕсли;
	
	location =  geometry.location;
	Если НЕ ТипЗнч(location) = Тип("Структура") Тогда Возврат ""; КонецЕсли;
	Если НЕ location.Свойство("lat") Тогда Возврат ""; КонецЕсли;
	Если НЕ location.Свойство("lng") Тогда Возврат ""; КонецЕсли;
	
	Координаты = СОКРЛП(location.lat)+";"+СОКРЛП(location.lng);
	Координаты = СтрЗаменить(Координаты,",",".");
	Возврат Координаты;
КонецФункции // ()




Функция ЗапросАдресаПоКоординатам(ПолныйАдресРесурса)   Экспорт
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса); 
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере); 
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		Сообщить("Произошла сетевая ошибка!");
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		Сообщить("Код статуса больше 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		Сообщить("Код статуса больше 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Сообщить("Код статуса больше 3XX, Перенаправление. Код статуса: " + Результат.КодСостояния);
		Если Результат.КодСостояния = 302 Тогда
			Сообщить("Код статуса 302, Постоянное перенаправление.");
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				Сообщить("Выполняю запрос по новому адресу " + АдресРесурса);
				ЗапросАдресаПоКоординатам(АдресРесурса);
			Иначе
				Сообщить("Сервер не сообщил адрес ресурса!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Статусы 1XX и 2XX считаем хорошими
	Возврат Результат
	
	
КонецФункции // ()



Функция JSONМассив(Результат)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Запись = Новый ЗаписьТекста(ИмяВременногоФайла); 
		Запись.Записать(Результат);
		Запись.Закрыть();
	Иначе    
		Результат.Записать(ИмяВременногоФайла);
	КонецЕсли;
	
	
	ЧтениеJSON= Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяВременногоФайла);
	МассивGoogle = ПрочитатьJSON(ЧтениеJSON);
	
	Если НЕ ТипЗнч(МассивGoogle) = Тип("Структура") Тогда Возврат ""; КонецЕсли;
	Если НЕ МассивGoogle.Свойство("results") Тогда Возврат ""; КонецЕсли;
	МассивResults =  МассивGoogle.results;
	Если НЕ ТипЗнч(МассивResults) = Тип("Массив") Тогда Возврат ""; КонецЕсли;
	Если МассивResults.Количество()=0 Тогда Возврат ""; КонецЕсли;
	
	//СтруктураАдреса=Новый Структура("Страна,Область,Район,НаселенныйПункт,Дом", ); 
	//
	//address_components   = МассивResults[0].address_components;
	//Для каждого СтрADDR  Из address_components Цикл
	
	//   "street_number"
	//    "route"	
	//	"sublocality_level_1"
	//	"locality"
	//	"administrative_area_level_2"
	//	"administrative_area_level_1"
	//	"country" 
	//КонецЦикла; 
	
	
	
	
	Возврат МассивGoogle; 
КонецФункции // ()




#КонецОбласти

Функция ДополнительныеАдреса(Контрагент)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.Представление КАК Адрес,
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.Значение КАК Значение,
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.Вид КАК Вид,
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.id_adress КАК id_adress
	|ИЗ
	|	РегистрСведений.саУНФ_ДополнительнаяКонтактнаяИнформация КАК саУНФ_ДополнительнаяКонтактнаяИнформация
	|ГДЕ
	|	саУНФ_ДополнительнаяКонтактнаяИнформация.Контрагент = &Контрагент
	|	И саУНФ_ДополнительнаяКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Возврат  Запрос.Выполнить().Выгрузить();
	
КонецФункции // ()


Процедура ПодпискаЗаписьКонтрагентаПриЗаписи(Источник, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	УзелЮрЛ =  ПланыОбмена.ОбменКонтрагенты.НайтиПоКоду("2");
	УзелФзЛ =  ПланыОбмена.ОбменКонтрагенты.НайтиПоКоду("3");
	
	Если  НЕ Источник.Покупатель ИЛИ Источник.ПометкаУдаления ИЛИ Источник.Недействителен ИЛИ НЕ ЗначениеЗаполнено(Источник.СтранаРегистрации) 
		ИЛИ  НЕ ВРЕГ(Источник.СтранаРегистрации.Наименование) = "БЕЛАРУСЬ"
		
		Тогда  
		
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		
		Возврат; 
	КонецЕсли;
	
	Если  НЕ Источник.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
		Если  НЕ Источник.Проверен Тогда
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли; 
			
			Возврат; 
			
		КонецЕсли;
	КонецЕсли;
	
	
	Если Источник.ВидКонтрагента=Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
		Или  Источник.ВидКонтрагента=Перечисления.ВидыКонтрагентов.ЮридическоеЛицо
		Тогда
		Если НЕ ЗначениеЗаполнено(Источник.ИНН) ИЛИ НЕ СтрДлина(Источник.ИНН)=9 
			ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Источник.ИНН) Тогда
			
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
			Возврат;
		КонецЕсли; 
		
		
		Если  НЕ ПланыОбмена.ИзменениеЗарегистрировано(УзелЮрЛ,Источник.Ссылка) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелЮрЛ,Источник.Ссылка);		
		КонецЕсли; 
	ИначеЕсли Источник.ВидКонтрагента=Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда		
		Если  НЕ ПланыОбмена.ИзменениеЗарегистрировано(УзелФзЛ,Источник.Ссылка) Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелФзЛ,Источник.Ссылка);		
		КонецЕсли; 
	КонецЕсли; 
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#Область BePaid

&НаСервере
Функция ЗаписьИмениСвойстваJSON(ЗаписьJSON,Имя,Свойство)
	ЗаписьJSON.ЗаписатьИмяСвойства(Имя);
	ЗаписьJSON.ЗаписатьЗначение(Свойство);
КонецФункции // ()

Функция ПолучитьСтруктураНастроекBePaid()   Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = Новый Структура();
	
	РеквизитыРег=Метаданные.РегистрыСведений.НастройкаBePaid.Ресурсы;
	
	Для каждого Реквизит Из  РеквизитыРег Цикл
		СтруктураНастроек.Вставить(Реквизит.Имя);
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.Текст =    "ВЫБРАТЬ  ПЕРВЫЕ 1 *
	|ИЗ
	|	РегистрСведений.НастройкаBePaid КАК НастройкаBePaid";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураНастроек,Выборка);
	КонецЦикла; 
	
	Если ПривилегированныйРежим()  Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	Возврат  СтруктураНастроек;
	
КонецФункции // ()

Функция JSONДляОтчета(Дата,ТипПлатежа)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("report_params");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("date_type");
	ЗаписьJSON.ЗаписатьЗначение("created_at");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("date");
	ЗаписьJSON.ЗаписатьЗначение(Формат(Дата,"ДФ=yyyy-MM-dd"));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("status");
	ЗаписьJSON.ЗаписатьЗначение("successful");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("payment_method_type");
	ЗаписьJSON.ЗаписатьЗначение(ТипПлатежа);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("time_zone");
	ЗаписьJSON.ЗаписатьЗначение("UTC");
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат  СтрокаJSON;
	
КонецФункции // ()

Функция СформироватьТелоОплатыERIP(МассивОтвета="")   Экспорт
	ТекстТело ="<html><head>
	| <meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
	|<style type=""text/css"">
	|.example_image {
	|width: 190px;
	|height: 190px;
	|background: url('data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAALAAAACwAQAAAACHzNnzAAADn0lEQVR4nO2WP2zaWBzH30Pi31BVIQOPVsUw1JnLUm7J0OXo0MvehX9SsYekymUgNrrYRsINy0lJBkyigBlC5/SG44ac
	|1N4AHZrOhQFDdGAGQKVDYyPxym03RPe7sUPe+NNHX39+z/bvPQe9cTnQjeu2fFv+jssUux15XRF7ApPq97AMhEi9kmZZrMu0nZp7AT2yJ6nP3m+KCOGQST2wYOIP9g3CamxH+z/t6DHfqMkcqTQE04wirnSN1x2Wrl3i
	|a4hWmMvJxNktNOUfJcEB0JhaR0oup8jkOHC/SuX/pqlj6HlzwVphfqH7GTdA49PIL9xcUIzf5eEgOQNMaPql54Gk6jR9v23rdajLXd9Oyj0jJC43XhtzyORh60x5y18W2cQGd+yCTN6fphJBQr/OxhHf2ABoHN3H6ycegt
	|fEn1CSg7JTu/GWK5tLGqSs+iXAG+0WK5ao03VUq/SLMpCNXP60auK1XsqZM/xRiLb40mFcHjKFvwboiodMUPbu3VDs+TxKQxennyFa7+/6q6rLxGrCfjKF6I0qh0y7NrCOPIhA3yAWsGBsP/4q8Cya4AjQJa1I5bTCXVWo
	|kW3rGSg71B8X7izISDVPwq1jIBs9Xf8t3B6x5zM6IK4EZPIomZnp1tuXIfSqG5ChbLQnbAnlV58UjdT3foVo05yscE5JRTj1xIwDXaIgadRJUcm1joN1sgrRdn7Ib20HHhYyHTH/L8Ebaaz8M1fd1U6E6HtMCKDpB2/b9m
	|dajREX0+0xYIJzpbBWE8nwtMoi0wdkoz/7tJmp7Aev2vH0cmcAE6G8aKzykkFl2zkA58lgKG5cnlv8wqwp2gsoW2S2iD2SG3PpOuu9B3mbpt57rFntuss8OfgAmKCa9jNuOZf/AjkzpmHI++936KKckz6lrg71lS6UrZNa
	|e5Ko14yGe7PVgLrs3GlylNtpOTclJfoUyj6zKsxRQUUkMb9GBMhGvqGYd0bsBo7E9jF0FmO5MdWKyzeuv6hvGwnI+yMvmysd1tWvdb2ZA8i7/PnRYGPLyhgIxWXoJMGU/ygJkRiWWrWKDs4T9OBAUSfubpUpiXsjwIRi
	|rxL4oV3N3Zu/q5vgDkrGJGGe9SQ5u47IBKJ7cnnt4IvAxqap53loIi9dVN+IUWR0XplaX0Aa7TS1aVQocFhQoR1EjDyOPisZ/eWA1fdBEyW02ouMCtroECW7XoBe3n1UV+YaqyQjBwPgveq2fFv+/srfAE79wVr1Rhs
	|NAAAAAElFTkSuQmCC') center no-repeat;
	|}
	|</style>    
	|</head>
	|<body>
	|<p>Ниже - картинка</p>
	|<div class=""example_image"">&ensp;</div>
	|<p>Выше - картинка</p>
	|</body>
	|</html>";
	
	//Если ТипЗнч(МассивОплат) = Тип("Структура") И МассивОплат.Свойство("transactions") И ТипЗнч(МассивОплат.transactions)=Тип("Структура")  
	//	Тогда
	//	Значение=ПроверитьСвойствоСтруктуры("qr_code",МассивОплат.transactions.erip));
	//	Если ТипЗнч(Значение) = Тип("Строка") И НЕ ПустаяСтрока(Значение) Тогда  
	//		<img src="здесь значение qr_code">
	//		
	//					
	//	КонецЕсли;	
	//КонецЕсли; 
	ТекстТело =ТекстТело +"</body></html>";
	Возврат  ТекстТело;
КонецФункции // ()


Функция ТекстПоясненияЕРИП(Почта=Ложь,АдресВоВременномХранилище="",НомерЗаказа)   Экспорт
	Если Почта Тогда
		//<img  src="+АдресВоВременномХранилище+" /><br />		  
		//"https://1ak.by/img/logo.svg"		  
		Текст="		  
		|<!DOCTYPE html>
		|<html>
		|<head>
		|<title>1ak.by</title>
		|</head>
		|<body>
		|<h2><strong><strong>Как оплатить заказ</strong></strong></h2>
		|<h3><strong><strong>Оплата в системе &quot;Расчёт&quot; (ЕРИП):</strong></strong></h3>
		|<p style=""text-align:justify""><img alt=""qr"" src="+АдресВоВременномХранилище+" style=""float:left; height:190px; margin:2px; width:190px"" />Оплатить услуги интернет-магазина <a href=""https://1ak.by/"" target=""_blank"">1ak.by</a> Вы можете через систему &rdquo;Расчет&ldquo; (ЕРИП),</p>
		|<p style=""text-align:justify"">в любом удобном для Вас месте, в удобное для Вас время, в удобном для</p>
		|<p style=""text-align:justify"">Вас пункте банковского обслуживания &ndash; интернет-банкинге, М-банкинге, инфокиоске,</p>
		|<p style=""text-align:justify"">кассе банков, банкомате и т.д. Совершить оплату можно с использованием наличных денежных</p>
		|<p style=""text-align:justify"">средств, электронных денег и банковских платежных карточек в пунктах банковского обслуживания</p>
		|<p style=""text-align:justify"">банков, которые оказывают услуги по приему платежей, а также посредством инструментов</p>
		|<p style=""text-align:justify"">дистанционного банковского обслуживания.</p>
		|<p><strong><strong>ДЛЯ ПРОВЕДЕНИЯ ПЛАТЕЖА НЕОБХОДИМО:</strong></strong></p>
		|<p><strong><strong>1. Выбрать:&nbsp;</strong></strong></p>
		|<ul>
		|	<li>&nbsp;Пункт &ldquo;Система &ldquo;Расчет&rdquo; (ЕРИП)</li>
		|	<li>&nbsp;&quot;Интернет-магазины/сервисы&quot;</li>
		|	<li>&nbsp;&quot;0-9 Цифровые домены&quot;</li>
		|	<li>&nbsp;&quot;1&quot;</li>
		|	<li>&nbsp;&quot;1ak.by&quot;</li>
		|</ul>
		|<p><strong><strong>2. Для оплаты ввести Номер заказа: "+НомерЗаказа+"</strong></strong></p>
		|<p><strong><strong>3. Проверить корректность информации</strong></strong></p>
		|<p><strong><strong>4. Совершить платеж.</strong></strong></p>
		|<p><strong>Если Вы осуществляете платеж в кассе банка сообщите кассиру о необходимости проведения платежа через систему <strong>&rdquo;Расчет&ldquo; (ЕРИП).</strong></strong></p>
		|
		|</body>
		|</html>";
		
		
		
		
	Иначе	
		
		
		Текст= Символы.Таб+Символы.Таб+"Как оплатить заказ" +Символы.ПС;
		Текст=Текст+"Оплата в системе ""Расчёт"" (ЕРИП):"+Символы.ПС;
		Текст=Текст+"Оплатить услуги интернет-магазина 1ak.by Вы можете через систему ""Расчет"" (ЕРИП),
		|в любом удобном для Вас месте, в удобное для Вас время, в удобном для Вас пункте банковского обслуживания – интернет-банкинге, 
		|М-банкинге, инфокиоске, кассе банков, банкомате и т.д. Совершить оплату можно с использованием наличных денежных средств, 
		|электронных денег и банковских платежных карточек в пунктах банковского обслуживания банков, которые оказывают услуги по приему платежей, 
		|а также посредством инструментов дистанционного банковского обслуживания."+Символы.ПС;
		Текст=Текст+Символы.Таб+Символы.Таб+"ДЛЯ ПРОВЕДЕНИЯ ПЛАТЕЖА НЕОБХОДИМО:"+Символы.ПС;
		Текст=Текст+"1. Выбрать: " +Символы.ПС;
		Текст=Текст+"Пункт Система ""Расчет"" (ЕРИП)" +Символы.ПС;
		Текст=Текст+"Интернет-магазины/сервисы " +Символы.ПС;
		Текст=Текст+"0-9 Цифровые домены " +Символы.ПС;
		Текст=Текст+"1 " +Символы.ПС;
		Текст=Текст+"1ak.by " +Символы.ПС;
		Текст=Текст+"2. Для оплаты ввести Номер заказа. " +НомерЗаказа+Символы.ПС;
		Текст=Текст+"3. Проверить корректность информации " +Символы.ПС;
		Текст=Текст+"4. Совершить платеж. " +Символы.ПС;
		Текст=Текст+"Если Вы осуществляете платеж в кассе банка сообщите кассиру о необходимости проведения платежа через систему ""Расчет"" (ЕРИП)." +Символы.ПС;
		
		
		
	КонецЕсли; 
	
	Возврат Текст;
КонецФункции // ()

Функция ТекстПоясненияONLINE(Почта=Ложь,АдресВоВременномХранилище="",НомерЗаказа,СсылкаНаОплату="")  Экспорт
	Если Почта Тогда
		Текст="		  
		|<!DOCTYPE html>
		|<html>
		|<head>
		|<title>1ak.by</title>
		|</head>
		|<body>
		|<p><strong><strong>Оплата онлайн:</strong></strong></p>
		|<p><strong><strong>ДЛЯ ПРОВЕДЕНИЯ ОПЛАТЫ НЕОБХОДИМО:</strong></strong></p>&nbsp;&nbsp;&nbsp;&nbsp;
		|<p><strong><strong><img alt=""qr"" src="+АдресВоВременномХранилище+" style=""height:190px; width:190px"" />
		|<a href="+СсылкаНаОплату+" target=""_blank"">Ссылка на оплату</a></strong></strong></p>
		|<p><strong><strong>1. Получить от Поставщика ссылку и QR-код на email:</strong></strong></p>
		|<p><strong><em>&nbsp;&nbsp;&nbsp;&nbsp;</em><em>Обращаем Ваше внимание, что оплата по ссылке доступна 24 часа, по истечению этого времени ссылка становится недействительной .</em></strong></p>
		|<p><strong><strong>2.&nbsp; Перейти по полученной ссылке, либо отсканировать QR-код.</strong></strong></p>
		|<p><strong><strong>3. Выбрать тип оплаты:&nbsp;</strong></strong></p>
		|<p><strong>1) оплатить через GPay;</strong></p>
		|<p><strong>2) оплатить картой: <em>выбрать тип карты, после переадресации на защищённую страницу банка ввести номер карточки (16 цифр), срок её действия, имя держателя карты (латиницей, как написано на карте) и уникальный трёхзначный код;</em></strong></p>
		|<p><strong>3) ЕРИП.</strong></p>
		|<p><strong><strong>4. Нажать кнопку Оплатить.</strong></strong></p>
		|<p><strong><strong>5. В случае успешного завершения операции Вы увидите соответствующее уведомление.</strong></strong></p>
		|</body>
		|</html>";
		
	Иначе	
		Текст= Символы.Таб+Символы.Таб+"Оплата онлайн:" +Символы.ПС;
		Текст=Текст+"ДЛЯ ПРОВЕДЕНИЯ ОПЛАТЫ НЕОБХОДИМО:"+Символы.ПС;
		Текст=Текст+"1. Получить от Поставщика ссылку и QR-код на email:" +Символы.ПС;
		Текст=Текст+Символы.Таб+"Обращаем Ваше внимание, что оплата по ссылке доступна 24 часа, по истечению этого времени ссылка становится недействительной."+Символы.ПС;
		Текст=Текст+"2. Перейти по полученной ссылке, либо отсканировать QR-код." +Символы.ПС;
		Текст=Текст+"3. Выбрать тип оплаты:" +Символы.ПС;
		Текст=Текст+Символы.Таб+"1) оплатить через GPay" +Символы.ПС;
		Текст=Текст+Символы.Таб+"2) оплатить картой: выбрать тип карты, после переадресации на защищённую страницу банка ввести номер карточки (16 цифр), срок её действия, имя держателя карты (латиницей, как написано на карте) и уникальный трёхзначный код" +Символы.ПС;
		Текст=Текст+Символы.Таб+"3) ЕРИП" +Символы.ПС;
		Текст=Текст+"4. Нажать кнопку Оплатить." +Символы.ПС;
		Текст=Текст+"5. В случае успешного завершения операции Вы увидите соответствующее уведомление." +Символы.ПС;
		
		
		
	КонецЕсли; 
	Возврат Текст;
	
	
КонецФункции // ()



Процедура ОтправитьНаПочтуОплату(СтруктураПараметров)   Экспорт
	
	
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("Кому",СтруктураПараметров.Кому);
	СтруктураПисьма.Вставить("ТипТекста",Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками);
	СтруктураПисьма.Вставить("ОбрабатыватьТексты",Истина);
	СтруктураПисьма.Вставить("Тема",СтруктураПараметров.Тема);
	//СтруктураПисьма.Вставить("Тело",СтруктураПараметров.Тело);
	
	Если СтруктураПараметров.ЕРИП Тогда
		ДвоичныеДанныеКартинки=Base64Значение(СтруктураПараметров.QRСтрока);
		КартинкаQRКода = Новый Картинка(ДвоичныеДанныеКартинки);
		ФайлНаДиске = Новый Файл(ПолучитьИмяВременногоФайла("jpg"));
		КартинкаQRКода.Записать(ФайлНаДиске.ПолноеИмя);
		//АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(КартинкаQRКода);
  		АдресВоВременномХранилище =ФайлНаДиске.ПолноеИмя;
		Тело=ТекстПоясненияЕРИП(Истина,АдресВоВременномХранилище,СтруктураПараметров.НомерЗаказа);
	Иначе	
		АдресВоВременномХранилище=ВывестиQRКод(СтруктураПараметров.QRСтрока);
		Тело=ТекстПоясненияONLINE(Истина,АдресВоВременномХранилище,СтруктураПараметров.НомерЗаказа,СтруктураПараметров.QRСтрока);
	КонецЕсли; 
		
	СтруктураПисьма.Вставить("Тело",Тело);	
	
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,СтруктураПисьма);
	
КонецПроцедуры

Функция ВывестиQRКод(QRСтрока)   Экспорт
	
	
	Если Не ПустаяСтрока(QRСтрока) Тогда
		
		ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190);
		
		Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			КартинкаQRКода = Новый Картинка(ДанныеQRКода);
			ФайлНаДиске = Новый Файл(ПолучитьИмяВременногоФайла("jpg"));
			КартинкаQRКода.Записать(ФайлНаДиске.ПолноеИмя);
			АдресХранилища = ПоместитьВоВременноеХранилище(КартинкаQRКода);
			Возврат  ФайлНаДиске.ПолноеИмя;
		Иначе
			Шаблон = Нстр("ru = 'Не удалось сформировать QR-код для документа %1.
			|Технические подробности см. в журнале регистрации.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,QRСтрока);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	Возврат  Ложь;
КонецФункции



Функция СоздатьСтруктуруОтветаВыставленияСчета()
	СтруктураОтвета = Новый Структура("UID,
	| НомерЗаказа,
	| Заказ,
	| Сумма,
	| СпособОплаты,
	| ДатаСоздания,
	| ДатаОкончания,
	| email,
	| СервисНомерERIP,
	| QR,
	| QR_RAW,
	|Валюта,
	|Описание");
	
	Возврат  СтруктураОтвета;
	
КонецФункции // ()

&НаСервере
Функция ЗаписьВРегистрСчета(СтрМассивОплат)
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		НаборРегистрОплат = РегистрыСведений.ВыставлениеСчетовBePaid.СоздатьНаборЗаписей();
		НаборРегистрОплат.Отбор.UID.Установить(СтрМассивОплат.UID);
		
		Если НаборРегистрОплат.Количество()>0 Тогда
			Для каждого Запись Из НаборРегистрОплат Цикл
				ЗаполнитьЗначенияСвойств(Запись,СтрМассивОплат);
			КонецЦикла; 	
		Иначе
			Запись =  НаборРегистрОплат.Добавить();
			ЗаполнитьЗначенияСвойств(Запись,СтрМассивОплат);
		КонецЕсли;
		НаборРегистрОплат.Записать();
		
		ЗафиксироватьТранзакцию();
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		Возврат Истина;
	Исключение
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции


Функция РазборОтветаERIP(МассивОтвета,СтруктураЗаказа)  Экспорт
	Ответ=Ложь;
	СтруктураОтвета  =  СоздатьСтруктуруОтветаВыставленияСчета();
	
	
	Если ТипЗнч(МассивОтвета) = Тип("Структура") И МассивОтвета.Свойство("transaction") И ТипЗнч(МассивОтвета.transaction)=Тип("Структура")  
		Тогда
		//Заказ,e-mail, order_id, Сумма
		СтруктураТранз = МассивОтвета.transaction;
		
		Значение=ПроверитьСвойствоСтруктуры("uid",СтруктураТранз);
		Если ТипЗнч(Значение) = Тип("Булево") Тогда  Возврат Ложь; КонецЕсли;
		СтруктураОтвета.UID = Значение;
		
		СтруктураОтвета.НомерЗаказа = СтруктураЗаказа.order_id;
		СтруктураОтвета.Заказ =   СтруктураЗаказа.Заказ;
		СтруктураОтвета.Сумма  =  СтруктураЗаказа.Сумма;
		СтруктураОтвета.СпособОплаты  = Перечисления.СпособОплаты.ERIP;
		СтруктураОтвета.ДатаСоздания = ТекущаяДата();
		СтруктураОтвета.ДатаОкончания=КОНЕЦДНЯ(ТекущаяДата())+3*86400;
		СтруктураОтвета.email =      СтруктураЗаказа.email;
		
		Значение=ПроверитьСвойствоСтруктуры("service_no_erip",СтруктураТранз.erip,Истина);
		Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.СервисНомерERIP=Значение;  КонецЕсли;
		
		Значение=ПроверитьСвойствоСтруктуры("qr_code",СтруктураТранз.erip,Истина);
		Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.QR=Значение;  КонецЕсли; 
		
		Значение=ПроверитьСвойствоСтруктуры("qr_code_raw",СтруктураТранз.erip,Истина);
		Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.QR_RAW=Значение;  КонецЕсли; 
		
		Значение=ПроверитьСвойствоСтруктуры("currency",СтруктураТранз);
		Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда
			СтруктураОтвета.Валюта	= Справочники.Валюты.НайтиПоНаименованию(Значение);				
		КонецЕсли;
		Описание="";
		Значение=ПроверитьСвойствоСтруктуры("instruction",СтруктураТранз.erip,Истина);
		Если ТипЗнч(Значение) = Тип("Массив") И Значение.Количество()>0 Тогда
			Описание=Описание+Значение[0];
		КонецЕсли;
		
		Значение=ПроверитьСвойствоСтруктуры("receipt_text",СтруктураТранз.additional_data,Истина);
		Если ТипЗнч(Значение) = Тип("Массив") И Значение.Количество()>0 Тогда
			Описание=Описание+" "+Значение[0];
		КонецЕсли;
		
		СтруктураОтвета.Описание= Описание;
		
		Ответ= ЗаписьВРегистрСчета(СтруктураОтвета);
	КонецЕсли;
	Возврат Ответ;
КонецФункции // ()



Функция  JSONforERIP(СтруктураСчета)   Экспорт
	//amount,currency,email,order_id,expired_at,first_name,address,phone
	
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства( "request");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"amount",СтруктураСчета.amount) ;
	//для теста
	//ЗаписьИмениСвойстваJSON(ЗаписьJSON,"amount",100) ;
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"currency",СтруктураСчета.currency) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"description", "Оплата заказа "+ СтруктураСчета.order_id) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"email",СтруктураСчета.email) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"ip","127.0.0.1") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"order_id",СтруктураСчета.order_id) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"tracking_id",СтруктураСчета.order_id) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"notification_url","") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"expired_at",СтруктураСчета.expired_at) ;
	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("customer");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"first_name",СтруктураСчета.first_name) ;
	//ЗаписьИмениСвойстваJSON(ЗаписьJSON,"middle_name","Владимирович") ;
	//ЗаписьИмениСвойстваJSON(ЗаписьJSON,"last_name","М-ко") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"country","BY") ;
	//ЗаписьИмениСвойстваJSON(ЗаписьJSON,"city","Минск") ;
	//ЗаписьИмениСвойстваJSON(ЗаписьJSON,"zip","220000") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"address", СтруктураСчета.address) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"phone", СтруктураСчета.phone) ;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();   // customer
	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("payment_method");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"type", "erip") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"account_number", СтруктураСчета.order_id) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"service_no", 877) ;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("service_info");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьЗначение("Оплата заказа "+СтруктураСчета.order_id);
	ЗаписьJSON.ЗаписатьКонецМассива(); // service_info
	
	ЗаписьJSON.ЗаписатьИмяСвойства("receipt");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьЗначение("Спасибо за оплату заказа "+СтруктураСчета.order_id);
	ЗаписьJSON.ЗаписатьКонецМассива(); // receipt
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();   // payment_method
	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("additional_data");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("receipt_text");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьЗначение("Для оплаты заказа введите в ЕРИП номер "+ СтруктураСчета.order_id);
	ЗаписьJSON.ЗаписатьКонецМассива(); // receipt_text
	ЗаписьJSON.ЗаписатьКонецОбъекта();   // additional_data
	
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();   //request
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат  СтрокаJSON;
КонецФункции // ()

Функция ОтправитьВERIP(СтрокаJSON)    Экспорт
	СтруктураНастроек=ПолучитьСтруктураНастроекBePaid();
	
	HTTPСоединение =  Новый HTTPСоединение("api.bepaid.by",,СтруктураНастроек.shop_id,СтруктураНастроек.shop_key,,, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPЗапрос = Новый HTTPЗапрос("/beyag/payments"); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json"); 
	HTTPЗапрос.Заголовки.Вставить("Accept","application/json");
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Ответ= Результат.ПолучитьТелоКакСтроку();
	Если Результат.КодСостояния<300 Тогда
		Если  ЛЕВ(Ответ,1)="{"Тогда
			ЧтениеJSON= Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ);
			МассивОплат = ПрочитатьJSON(ЧтениеJSON);
			Возврат МассивОплат;
		Иначе	
			ОбщегоНазначения.СообщитьПользователю("Не разобрать ответ "+Строка(Результат.КодСостояния));
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Если  ЛЕВ(Ответ,1)="{"Тогда
			ЧтениеJSON= Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ);
			МассивОплат = ПрочитатьJSON(ЧтениеJSON);
		КонецЕсли; 
		
		ОбщегоНазначения.СообщитьПользователю("Ошибка соединения "+Строка(Результат.КодСостояния));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


Функция РазборОтветаONLINE(МассивОтвета,СтруктураЗаказа)  Экспорт
	СтруктураОтвета  =  СоздатьСтруктуруОтветаВыставленияСчета();
	Ответ=Ложь;
	Если ТипЗнч(МассивОтвета) = Тип("Структура") И МассивОтвета.Свойство("checkout") И ТипЗнч(МассивОтвета.checkout)=Тип("Структура")  
		Тогда
		СтруктураТранз = МассивОтвета.checkout;
		Значение=ПроверитьСвойствоСтруктуры("token",СтруктураТранз);
		Если ТипЗнч(Значение) = Тип("Булево") Тогда  Возврат Ложь; КонецЕсли;
		СтруктураОтвета.UID = Значение;
		
		СтруктураОтвета.НомерЗаказа = СтруктураЗаказа.order_id;
		СтруктураОтвета.Заказ =   СтруктураЗаказа.Заказ;
		СтруктураОтвета.Сумма  =  СтруктураЗаказа.Сумма;
		СтруктураОтвета.СпособОплаты  = Перечисления.СпособОплаты.Card;
		СтруктураОтвета.ДатаСоздания = ТекущаяДата();
		СтруктураОтвета.ДатаОкончания=ТекущаяДата()+86400;
		СтруктураОтвета.email =      СтруктураЗаказа.email;
		СтруктураОтвета.Валюта   =  СтруктураЗаказа.Валюта;
		
		Значение=ПроверитьСвойствоСтруктуры("redirect_url",СтруктураТранз);
		Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.QR_RAW=Значение;  КонецЕсли; 
		
		СтруктураОтвета.Описание  = "Оплата по заказу "+ СтруктураЗаказа.order_id;
		Ответ=ЗаписьВРегистрСчета(СтруктураОтвета);
	КонецЕсли; 
	Возврат Ответ;
КонецФункции // ()



Функция  JSONforONLINE(СтруктураСчета)   Экспорт
	//test  currency order_id  address   email  phone
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства( "checkout");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"test",СтруктураСчета.test) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"transaction_type", "payment") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"attempts", 3) ;
	
	ЗаписьJSON.ЗаписатьИмяСвойства( "settings");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"return_url","http://127.0.0.1:4567/return") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"success_url","http://127.0.0.1:4567/success") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"decline_url","http://127.0.0.1:4567/decline") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"fail_url","http://127.0.0.1:4567/fail") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"cancel_url","http://127.0.0.1:4567/cancel") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"notification_url","http://127.0.0.1/") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"auto_return",0) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"language","ru") ;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта(); // settings
	
	ЗаписьJSON.ЗаписатьИмяСвойства( "order");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"currency",СтруктураСчета.currency) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"amount",СтруктураСчета.amount) ;
	//костыль
	//ЗаписьИмениСвойстваJSON(ЗаписьJSON,"amount",100) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"tracking_id",СтруктураСчета.order_id);
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"description","Оплата по заказу "+СтруктураСчета.order_id) ;
	ЗаписьJSON.ЗаписатьКонецОбъекта(); // order
	
	ЗаписьJSON.ЗаписатьИмяСвойства("customer");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"address",СтруктураСчета.address) ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"country","BY") ;
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"email", СтруктураСчета.email); 
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"phone", СтруктураСчета.phone); 
	ЗаписьJSON.ЗаписатьКонецОбъекта(); // customer
	
	ЗаписьJSON.ЗаписатьИмяСвойства("payment_method");
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьИмениСвойстваJSON(ЗаписьJSON,"type", "credit_card") ;
	ЗаписьJSON.ЗаписатьКонецОбъекта(); // payment_method
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();   //payment
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат  СтрокаJSON;
	
	
КонецФункции

Функция ОтправитьONLINE(СтрокаJSON)    Экспорт
	СтруктураНастроек=ПолучитьСтруктураНастроекBePaid();
	
	HTTPСоединение =  Новый HTTPСоединение("checkout.bepaid.by",,СтруктураНастроек.shop_id,СтруктураНастроек.shop_key,,, Новый ЗащищенноеСоединениеOpenSSL);
	HTTPЗапрос = Новый HTTPЗапрос("/ctp/api/checkouts"); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json"); 
	HTTPЗапрос.Заголовки.Вставить("Accept","application/json");
	HTTPЗапрос.Заголовки.Вставить("X-API-Version", 2);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Ответ= Результат.ПолучитьТелоКакСтроку();
	Если Результат.КодСостояния<300 Тогда
		Если  ЛЕВ(Ответ,1)="{"Тогда
			ЧтениеJSON= Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ);
			МассивОплат = ПрочитатьJSON(ЧтениеJSON);
			Возврат МассивОплат;
		Иначе	
			Возврат Ложь;
			ОбщегоНазначения.СообщитьПользователю("Не разобрать ответ "+Строка(Результат.КодСостояния));
		КонецЕсли; 
	Иначе
		Если  ЛЕВ(Ответ,1)="{"Тогда
			ЧтениеJSON= Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(Ответ);
			МассивОплат = ПрочитатьJSON(ЧтениеJSON);
		КонецЕсли; 
		
		
		ОбщегоНазначения.СообщитьПользователю("Ошибка соединения "+Строка(Результат.КодСостояния));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции



Функция ЗапросОтчетаИзБиПэйд(СтруктураНастроек,СтрокаJSON)
	HTTPСоединение =  Новый HTTPСоединение("merchant.bepaid.by",,СОКРЛП(СтруктураНастроек.shop_id),СОКРЛП(СтруктураНастроек.shop_key),,, Новый ЗащищенноеСоединениеOpenSSL);
	
	HTTPЗапрос = Новый HTTPЗапрос("/api/reports"); 
	
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json"); 
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Попытка
		Результат = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		Ответ= Результат.ПолучитьТелоКакСтроку();
		Если Результат.КодСостояния<300 Тогда
			Если  ЛЕВ(Ответ,1)="{"Тогда
				ЧтениеJSON= Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Ответ);
				МассивОплат = ПрочитатьJSON(ЧтениеJSON);
				Возврат МассивОплат;
			Иначе	
				ОбщегоНазначения.СообщитьПользователю("Не разобрать ответ "+Строка(Результат.КодСостояния));
				Возврат Ложь;
			КонецЕсли; 
		Иначе
			ОбщегоНазначения.СообщитьПользователю("Ошибка соединения "+Строка(Результат.КодСостояния));
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Произошла ошибка");
		Возврат Ложь;
		
	КонецПопытки;
	
	
	
КонецФункции // ()

Функция ПроверитьСвойствоСтруктуры(Свойство,Структура,ЧекСтруктура=Ложь)
	Если ЧекСтруктура Тогда
		Если  НЕ ТипЗнч(Структура) = Тип("Структура") Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ Структура.Свойство(Свойство) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Значение= Структура[Свойство] ;
	Если  Значение=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Ложь;
	Иначе
		Возврат  Значение;
	КонецЕсли; 
КонецФункции // ()

Функция ПоискОплаченногоЗаказаUID(UID) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыставлениеСчетовBePaid.Заказ КАК Заказ
	|ИЗ
	|	РегистрСведений.ВыставлениеСчетовBePaid КАК ВыставлениеСчетовBePaid
	|ГДЕ
	|	ВыставлениеСчетовBePaid.UID = &UID";
	
	Запрос.УстановитьПараметр("UID", UID);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Заказ=  Выборка.Заказ;
	КонецЦикла;
	
	Возврат Заказ;
	
КонецФункции	

Функция ПоискОплаченногоЗаказа(НомерЗаказа,ДатаСоздания)
	ПВЧДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","НомерЗаказаССайта_8ce07edaba9d43f084f8e74649e0f2c8");	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяДополнительныеРеквизиты.Ссылка КАК Заказ
	|ИЗ
	|	Документ.ЗаказПокупателя.ДополнительныеРеквизиты КАК ЗаказПокупателяДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказПокупателяДополнительныеРеквизиты.Свойство = &Свойство
	|	И ЗаказПокупателяДополнительныеРеквизиты.Значение = &Значение
	|	И ЗаказПокупателяДополнительныеРеквизиты.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяДополнительныеРеквизиты.Ссылка.Дата";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаСоздания)-10*86400);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаСоздания)+10*86400);
	Запрос.УстановитьПараметр("Значение", НомерЗаказа);
	Запрос.УстановитьПараметр("Свойство", ПВЧДопСвойство);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Заказ=  Выборка.Заказ;
	КонецЦикла;
	
	Возврат Заказ;
	
КонецФункции // ()


//UID 						uid 
//НомерЗаказа  		tracking_id
//Заказ     ищем
//Сумма   					amount
//Комиссия  				transaction_fee
//IDБанка     				payment/ref_id
//СпособОплаты     	payment_method_type "credit_card"  "erip"
//РасшифровкаОплаты   
//credit_card / bin******last_4 brand issuer_name  issuer_country exp_month exp_year holder
//erip / account_number agent_name auth_device_name
//IP   						customer / ip
//ДатаСоздания   		created_at
//ДатаОплаты      		paid_at
//ДатаПеречисления 	settled_at    "2021-12-24"
//Валюта					currency
//Описание 				description


//ДатаОплаты=ПрочитатьДатуJSON("2021-12-29T12:29:51Z",ФорматДатыJSON.ISO);

Функция ОтчетBePaidДляРегистра(ДатаЗапроса,ТипПлатежа="credit_card")  Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	МассивОтвета = Новый Массив;
	СтруктураНастроек=ПолучитьСтруктураНастроекBePaid();
	СтрокаJSON = JSONДляОтчета(ДатаЗапроса,ТипПлатежа);
	МассивОплат=ЗапросОтчетаИзБиПэйд(СтруктураНастроек,СтрокаJSON);
	Если ТипЗнч(МассивОплат) = Тип("Структура") И МассивОплат.Свойство("transactions") И ТипЗнч(МассивОплат.transactions)=Тип("Массив")  
		И МассивОплат.transactions.Количество()>0	
		Тогда
		Для каждого СтрМассивОплат Из МассивОплат.transactions Цикл
			СтруктураОтвета = Новый Структура("UID,НомерЗаказа,Заказ,Сумма,Комиссия,IDБанка,СпособОплаты,РасшифровкаОплаты,IP,ДатаСоздания,ДатаОплаты,ДатаПеречисления,Валюта,Описание");
			
			Значение=ПроверитьСвойствоСтруктуры("uid",СтрМассивОплат);
			Если ТипЗнч(Значение) = Тип("Булево") Тогда  Продолжить; КонецЕсли;
			СтруктураОтвета.UID = Значение;
			//поиск заказа в регистре ВыставлениеСчетовBePaid  по UID
			Значение=ПоискОплаченногоЗаказаUID(СтруктураОтвета.UID);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда   СтруктураОтвета.Заказ = Значение КонецЕсли;
			
			Значение=ПроверитьСвойствоСтруктуры("created_at",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.ДатаСоздания = ПрочитатьДатуJSON(Значение,ФорматДатыJSON.ISO); КонецЕсли;
			
			Значение=ПроверитьСвойствоСтруктуры("tracking_id",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда   
				СтруктураОтвета.НомерЗаказа=Значение; 
				Если НЕ ЗначениеЗаполнено(СтруктураОтвета.Заказ)  Тогда
					Если ЗначениеЗаполнено(СтруктураОтвета.ДатаСоздания) И ЗначениеЗаполнено(СтруктураОтвета.НомерЗаказа) Тогда
						Значение = ПоискОплаченногоЗаказа(СтруктураОтвета.НомерЗаказа,СтруктураОтвета.ДатаСоздания);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда   СтруктураОтвета.Заказ = Значение КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			Платеж = ПроверитьСвойствоСтруктуры("type",СтрМассивОплат);
			Значение=ПроверитьСвойствоСтруктуры("amount",СтрМассивОплат);
			
			
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  
				Если НЕ Платеж=Неопределено И Платеж ="refund" Тогда
					Значение= -1*Значение;
				КонецЕсли; 
				СтруктураОтвета.Сумма = ЧИСЛО(Значение)/100;
			КонецЕсли;
			
			Значение=ПроверитьСвойствоСтруктуры("transaction_fee",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.Комиссия = ЧИСЛО(Значение)/100;  КонецЕсли; 	
			
			Если СтрМассивОплат.Свойство("payment") Тогда
				Значение=ПроверитьСвойствоСтруктуры("ref_id",СтрМассивОплат.payment,Истина);
				Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.IDБанка = Значение; КонецЕсли; 	
			КонецЕсли; 	
			
			Значение=ПроверитьСвойствоСтруктуры("payment_method_type",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда 
				Если  СОКРЛП(Значение) ="credit_card" Тогда
					СтруктураОтвета.СпособОплаты = Перечисления.СпособОплаты.Card;
					//credit_card / bin******last_4 brand issuer_name  issuer_country exp_month exp_year holder	
					Если СтрМассивОплат.Свойство("credit_card") Тогда
						РасшифровкаОплаты="";
						Значение=ПроверитьСвойствоСтруктуры("bin",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = Значение+"******"; КонецЕсли; 
						Значение=ПроверитьСвойствоСтруктуры("last_4",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+Значение; КонецЕсли; 
						Значение=ПроверитьСвойствоСтруктуры("brand",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+" "+Значение; КонецЕсли;
						Значение=ПроверитьСвойствоСтруктуры("issuer_name",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+" "+Значение; КонецЕсли;
						Значение=ПроверитьСвойствоСтруктуры("issuer_country",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+" "+Значение; КонецЕсли;
						Значение=ПроверитьСвойствоСтруктуры("exp_month",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+" "+Значение+"/"; КонецЕсли;
						Значение=ПроверитьСвойствоСтруктуры("exp_year",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+СтрЗаменить(Строка(Значение),Символы.НПП,""); КонецЕсли;
						Значение=ПроверитьСвойствоСтруктуры("holder",СтрМассивОплат.credit_card,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+" "+Значение; КонецЕсли;
						СтруктураОтвета.РасшифровкаОплаты = РасшифровкаОплаты;
					КонецЕсли;
				ИначеЕсли	СОКРЛП(Значение) ="erip" Тогда
					СтруктураОтвета.СпособОплаты = Перечисления.СпособОплаты.ERIP;
					//erip / account_number agent_name auth_device_name
					Если СтрМассивОплат.Свойство("erip") Тогда
						РасшифровкаОплаты="";
						Значение=ПроверитьСвойствоСтруктуры("account_number",СтрМассивОплат.erip,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+Значение; КонецЕсли; 
						Значение=ПроверитьСвойствоСтруктуры("agent_name",СтрМассивОплат.erip,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+" "+Значение; КонецЕсли;
						Значение=ПроверитьСвойствоСтруктуры("auth_device_name",СтрМассивОплат.erip,Истина);
						Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  РасшифровкаОплаты = РасшифровкаОплаты+" "+Значение; КонецЕсли;
						СтруктураОтвета.РасшифровкаОплаты = РасшифровкаОплаты;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если СтрМассивОплат.Свойство("customer") Тогда
				Значение=ПроверитьСвойствоСтруктуры("ip",СтрМассивОплат.customer,Истина);
				Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.IP=Значение; КонецЕсли;
			КонецЕсли;
			
			Значение=ПроверитьСвойствоСтруктуры("paid_at",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.ДатаОплаты = ПрочитатьДатуJSON(Значение,ФорматДатыJSON.ISO); КонецЕсли;
			
			Значение=ПроверитьСвойствоСтруктуры("settled_at",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда  СтруктураОтвета.ДатаПеречисления = ПрочитатьДатуJSON(Значение,ФорматДатыJSON.ISO); КонецЕсли;
			
			Значение=ПроверитьСвойствоСтруктуры("currency",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда
				СтруктураОтвета.Валюта	= Справочники.Валюты.НайтиПоНаименованию(Значение);				
			КонецЕсли;
			
			Значение=ПроверитьСвойствоСтруктуры("description",СтрМассивОплат);
			Если НЕ ТипЗнч(Значение) = Тип("Булево") Тогда
				Если НЕ Платеж=Неопределено И Платеж ="refund" Тогда
					Значение= "ВОЗВРАТ "+Значение;
				КонецЕсли;
				СтруктураОтвета.Описание =  Значение 
			КонецЕсли;
			
			МассивОтвета.Добавить(СтруктураОтвета);
		КонецЦикла;	
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат  МассивОтвета;
	
КонецФункции // ()

&НаСервере
Процедура ЗаписьВРегистр(МассивОплат)
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОплатаЧерезBePaid");
		Блокировка.Заблокировать();
		НаборРегистрОплат = РегистрыСведений.ОплатаЧерезBePaid.СоздатьНаборЗаписей();
		
		Для каждого СтрМассивОплат Из МассивОплат Цикл
			
			НаборРегистрОплат.Отбор.UID.Установить(СтрМассивОплат.UID);
			
			Если НаборРегистрОплат.Количество()>0 Тогда
				Для каждого Запись Из НаборРегистрОплат Цикл
					ЗаполнитьЗначенияСвойств(Запись,СтрМассивОплат);
				КонецЦикла; 	
			Иначе
				Запись =  НаборРегистрОплат.Добавить();
				ЗаполнитьЗначенияСвойств(Запись,СтрМассивОплат);
			КонецЕсли;
			НаборРегистрОплат.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
	Исключение
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры


&НаСервере
Процедура ОтчетНаСервере(ДатаЗапросаСчета,ТипОплаты="credit_card") Экспорт
	ОМ=ОбщегоНазначения.ОбщийМодуль("саУНФ_Bitrix");
	МассивОплат=ОМ.ОтчетBePaidДляРегистра(ДатаЗапросаСчета,ТипОплаты);
	Если МассивОплат.Количество()>0 Тогда
		ЗаписьВРегистр(МассивОплат);
	КонецЕсли; 
	
КонецПроцедуры


Функция ЗапроситьОтчетBePaid(СтруктураПроверки,ТипПлатежа="credit_card")   Экспорт
	СтруктураОтвета=Новый Структура("СуммаОплаты",0);
	
	СтруктураНастроек=ПолучитьСтруктураНастроекBePaid();
	Если ЗначениеЗаполнено(СтруктураНастроек.shop_key) И ЗначениеЗаполнено(СтруктураНастроек.shop_id)  Тогда
		СтрокаJSON = JSONДляОтчета(СтруктураПроверки.Дата,ТипПлатежа);
		МассивОплат=ЗапросОтчетаИзБиПэйд(СтруктураНастроек,СтрокаJSON);
		Если ТипЗнч(МассивОплат) = Тип("Структура") Тогда
			//разберем оплаты
			Если  МассивОплат.Свойство("transactions") Тогда
				Если ТипЗнч(МассивОплат.transactions)=Тип("Массив") Тогда
					Если МассивОплат.transactions.Количество()>0 Тогда
						Для каждого СтрМассива Из  МассивОплат.transactions Цикл
							Если СОКРЛП(СтрМассива.tracking_id) = СтруктураПроверки.НомерССайта Тогда
								СтруктураОтвета.СуммаОплаты=  СтрМассива.amount/100;
								Если СтрМассива.Свойство("credit_card") И ТипЗнч(СтрМассива.credit_card) = Тип("Структура") Тогда
									Для каждого  СтрокаCredit Из СтрМассива.credit_card Цикл
										СтруктураОтвета.Вставить(СтрокаCredit.Ключ,СтрокаCredit.Значение);
									КонецЦикла; 
								ИначеЕсли СтрМассива.Свойство("erip") И ТипЗнч(СтрМассива.erip) = Тип("Структура") Тогда
									Для каждого  СтрокаCredit Из СтрМассива.erip Цикл
										СтруктураОтвета.Вставить(СтрокаCredit.Ключ,СтрокаCredit.Значение);
									КонецЦикла; 		  
									
								КонецЕсли;
								Прервать;
							КонецЕсли; 
						КонецЦикла; 										
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьПоследнийВыставленныйСчет(МассивОбъектов)  Экспорт
	             		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыставлениеСчетовBePaid.QR_RAW КАК QR_RAW,
		|	ВыставлениеСчетовBePaid.QR КАК QR,
		|	ВыставлениеСчетовBePaid.ДатаСоздания КАК ДатаСоздания,
		|	ВыставлениеСчетовBePaid.email КАК email,
		|	ВыставлениеСчетовBePaid.Сумма КАК Сумма,
		|	ВыставлениеСчетовBePaid.Заказ.Контрагент.Представление КАК Контрагент,
		|	ВыставлениеСчетовBePaid.НомерЗаказа КАК НомерЗаказа,
		|	ВыставлениеСчетовBePaid.СпособОплаты КАК СпособОплаты,
		|	ВыставлениеСчетовBePaid.Валюта.Представление КАК Валюта
		|ИЗ
		|	РегистрСведений.ВыставлениеСчетовBePaid КАК ВыставлениеСчетовBePaid
		|ГДЕ
		|	ВыставлениеСчетовBePaid.Заказ В(&МассивЗаказов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
	
	Запрос.УстановитьПараметр("МассивЗаказов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	        Возврат Ложь;
	КонецЕсли; 
	
	ТаблицаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	СтрокаТаб = ТаблицаДетальныеЗаписи[ТаблицаДетальныеЗаписи.Количество()-1];
	СтруктураЗаказа = Новый Структура("QR_RAW,QR,ДатаСоздания,email,Сумма,Контрагент,НомерЗаказа,СпособОплаты,Валюта");
	ЗаполнитьЗначенияСвойств(СтруктураЗаказа,СтрокаТаб);	
	
	Возврат  СтруктураЗаказа;
		
	
	КонецФункции // ()

#КонецОбласти 