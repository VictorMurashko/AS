#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Установка тблицы дат.
// 
// Параметры:
//  ДатаОбработки - Число, Дата, Неопределено - Дата обработки
//  КолДней - Число - Кол дней
// 
// Возвращаемое значение:
//  ТаблицаЗначений -- Установка тблицы дат::
// * Дата - Дата -
// * ДеньНедели - Число -
Функция УстановкаТблицыДат(ДатаОбработки,КолДней=0)
	//для открытия требуется только текущая дата - смотрим что сейчас открыта, магазин на выходных нас не волнует
	//для закрытия нужно определить когда последний раз магазин работал начиная со вчерашней даты	
	Сутки = 86400;
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблицаДат.Колонки.Добавить("ДеньНедели",Новый ОписаниеТипов("Число"));
	
	ДатаНачала = НачалоДня(ДатаОбработки);
	
	Для i=0 По КолДней Цикл
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Дата =  ДатаНачала-i*Сутки;
		НоваяСтрока.ДеньНедели =ДеньНедели(НоваяСтрока.Дата);
	КонецЦикла;
	Возврат  ТаблицаДат;
КонецФункции // ()

// План открытия.
// 
// Параметры:
//  МВТ - МенеджерВременныхТаблиц - МВТ
//  Организация Организация
//  ЭтоЛето - Булево - Это лето
//  ТаблицаДат - ТаблицаЗначений - Таблица дат:
// * Дата - Дата -
// * ДеньНедели - Число -
// 
// Возвращаемое значение:
//  Булево - План открытия
Функция ПланОткрытия(МВТ,Организация,ЭтоЛето,ТаблицаДат)
	//Сутки = 86400;
	//ВЫБОРКА ШАБЛОНОВ С УЧЕТОМ ВЫХОДНЫХ. ОПРЕДЕЛЕНИЯ ВРЕМЕНИ ПЛАН НАЧАЛО КОНЕЦ
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.УстановитьПараметр("ВТ_ДАТЫ", ТаблицаДат);
	Запрос.Текст="ВЫБРАТЬ
	|	ВТ_ДАТЫ.Дата КАК Дата,
	|	ВТ_ДАТЫ.ДеньНедели КАК ДеньНедели
	|ПОМЕСТИТЬ ВТ_ДАТЫПОДНЯМ
	|ИЗ
	|	&ВТ_ДАТЫ КАК ВТ_ДАТЫ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ДАТЫПОДНЯМ.Дата) КАК Дата,
	|	ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.Ссылка КАК Шаблон
	|ПОМЕСТИТЬ ВТ_ДНИРАБОТЫ
	|ИЗ
	|	ВТ_ДАТЫПОДНЯМ КАК ВТ_ДАТЫПОДНЯМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныЗаполненияГрафиковРТТ.РасписаниеРаботы КАК ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы
	|		ПО ВТ_ДАТЫПОДНЯМ.ДеньНедели = ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.НомерДняЦикла
	|			И (ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.КоличествоРабочихЧасов > 0)
	|ГДЕ
	|	НЕ ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.НомерДняЦикла КАК НомерДняЦикла,
	|	ЧАС(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяНачала) КАК ЧасНачала,
	|	ЧАС(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяОкончания) КАК ЧасОкончания,
	|	ВТ_ДНИРАБОТЫ.Дата КАК Дата,
	|	ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.Ссылка КАК Шаблон,
	|	МИНУТА(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяНачала) КАК МинутаНачала,
	|	МИНУТА(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяОкончания) КАК МинутаОкончания,
	|	ЧАС(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяНачала) * 60 + МИНУТА(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяНачала) КАК КолМинутНачало,
	|	ЧАС(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяОкончания) * 60 + МИНУТА(ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.ВремяОкончания) КАК КолМинутОкончание
	|ПОМЕСТИТЬ ВТ_ШАБЛОНЫ
	|ИЗ
	|	Справочник.ШаблоныЗаполненияГрафиковРТТ.РасписаниеРаботы КАК ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДНИРАБОТЫ КАК ВТ_ДНИРАБОТЫ
	|		ПО ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.Ссылка = ВТ_ДНИРАБОТЫ.Шаблон
	|			И (ДЕНЬНЕДЕЛИ(ВТ_ДНИРАБОТЫ.Дата) = ШаблоныЗаполненияГрафиковРТТРасписаниеРаботы.НомерДняЦикла)";
	
	Запрос.Выполнить();
	
	//саУНФ_ОбщийМодуль.ПоказатьВременнуюТаблицу(МВТ, "ВТ_ШАБЛОНЫ")
	
	//ВЫБОРКА МАГАЗИНОВ И ОБЪЕДИНЕНИЕ С ШАБЛОНАМИ	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("ДатаОбработки", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЭтоЛето", ЭтоЛето);
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.Ссылка КАК Магазин,
	|	ВЫБОР
	|		КОГДА &ЭтоЛето
	|			ТОГДА СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.саУНФ_ЛетнееРасписание
	|		ИНАЧЕ СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.саУНФ_ЗимнееРасписание
	|	КОНЕЦ КАК Расписание
	|ПОМЕСТИТЬ ВТ_РТТ
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.ДополнительныеРеквизиты КАК СтруктурныеЕдиницыДополнительныеРеквизиты
	|ГДЕ
	|	СтруктурныеЕдиницыДополнительныеРеквизиты.Свойство.Имя ПОДОБНО ""%ДействующийМагазин%""
	|	И ТИПЗНАЧЕНИЯ(СтруктурныеЕдиницыДополнительныеРеквизиты.Значение) = ТИП(БУЛЕВО)
	|	И СтруктурныеЕдиницыДополнительныеРеквизиты.Значение = ИСТИНА
	|	И СтруктурныеЕдиницыДополнительныеРеквизиты.Ссылка.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РТТ.Магазин КАК Магазин,
	|	ВТ_РТТ.Расписание КАК Расписание,
	|	ГрафикиРаботыРТТШаблоныПоГоду.ШаблонЗаполненияГрафика КАК ШаблонЗаполненияГрафика
	|ПОМЕСТИТЬ ВТ_РАСП
	|ИЗ
	|	ВТ_РТТ КАК ВТ_РТТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыРТТ.ШаблоныПоГоду КАК ГрафикиРаботыРТТШаблоныПоГоду
	|		ПО ВТ_РТТ.Расписание = ГрафикиРаботыРТТШаблоныПоГоду.Ссылка
	|			И (ГрафикиРаботыРТТШаблоныПоГоду.Год = ГОД(&ДатаОбработки))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ШАБЛОНЫ.Дата КАК Дата,
	|	ВТ_ШАБЛОНЫ.КолМинутНачало КАК КолМинутНачало,
	|	ВТ_ШАБЛОНЫ.КолМинутОкончание КАК КолМинутОкончание,
	|	ВТ_ШАБЛОНЫ.МинутаНачала КАК МинутаНачала,
	|	ВТ_ШАБЛОНЫ.МинутаОкончания КАК МинутаОкончания,
	|	ВТ_ШАБЛОНЫ.НомерДняЦикла КАК НомерДняЦикла,
	|	ВТ_ШАБЛОНЫ.ЧасНачала КАК ЧасНачала,
	|	ВТ_ШАБЛОНЫ.ЧасОкончания КАК ЧасОкончания,
	|	ВТ_ШАБЛОНЫ.Шаблон КАК Шаблон,
	|	ВТ_РАСП.Магазин КАК Магазин,
	|	ВТ_РАСП.Расписание КАК Расписание
	|ПОМЕСТИТЬ ВТ_РАСПШАБ
	|ИЗ
	|	ВТ_РАСП КАК ВТ_РАСП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ШАБЛОНЫ КАК ВТ_ШАБЛОНЫ
	|		ПО ВТ_РАСП.ШаблонЗаполненияГрафика = ВТ_ШАБЛОНЫ.Шаблон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РАСПШАБ.Дата КАК Дата,
	|	ВТ_РАСПШАБ.КолМинутНачало КАК КолМинутНачало,
	|	ВТ_РАСПШАБ.КолМинутОкончание КАК КолМинутОкончание,
	|	ВТ_РАСПШАБ.МинутаНачала КАК МинутаНачала,
	|	ВТ_РАСПШАБ.МинутаОкончания КАК МинутаОкончания,
	|	ВТ_РАСПШАБ.НомерДняЦикла КАК НомерДняЦикла,
	|	ВТ_РАСПШАБ.ЧасНачала КАК ЧасНачала,
	|	ВТ_РАСПШАБ.ЧасОкончания КАК ЧасОкончания,
	|	ВТ_РАСПШАБ.Шаблон КАК Шаблон,
	|	ВТ_РАСПШАБ.Магазин КАК Магазин,
	|	ВТ_РАСПШАБ.Расписание КАК Расписание,
	|	КассыККМ.Ссылка КАК Касса
	|ПОМЕСТИТЬ ВТ_КАССЫ
	|ИЗ
	|	ВТ_РАСПШАБ КАК ВТ_РАСПШАБ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|		ПО ВТ_РАСПШАБ.Магазин = КассыККМ.СтруктурнаяЕдиница";
	
	Запрос.Выполнить();		
	// саУНФ_ОбщийМодуль.ПоказатьВременнуюТаблицу(МВТ, "ВТ_КАССЫ")
	Возврат Истина;
КонецФункции // ()

// Кассовые смены начало.
// 
// Параметры:
//  МВТ - МенеджерВременныхТаблиц - МВТ
//  ДатаОбработки - Дата, Неопределено - Дата обработки
// 
// Возвращаемое значение:
//  ТаблицаЗначений --- Кассовые смены начало
Функция КассовыеСменыНачало(МВТ,ДатаОбработки)
	//КАССОВЫЕ СМЕНЫ
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА КассоваяСмена.Ссылка ЕСТЬ NULL
	|				ТОГДА ДОБАВИТЬКДАТЕ(&ДатаОбработки, ДЕНЬ, 1)
	|			ИНАЧЕ КассоваяСмена.НачалоКассовойСмены
	|		КОНЕЦ) КАК НачалоКассовойСмены,
	|	ВТ_КАССЫ.Магазин КАК Магазин,
	|	ВТ_КАССЫ.КолМинутНачало КАК КолМинутНачало,
	|	ВТ_КАССЫ.МинутаНачала КАК МинутаНачала,
	|	ВТ_КАССЫ.ЧасНачала КАК ЧасНачала
	|ПОМЕСТИТЬ ВТ_НАЧ
	|ИЗ
	|	ВТ_КАССЫ КАК ВТ_КАССЫ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО (КассоваяСмена.КассаККМ = ВТ_КАССЫ.Касса)
	|			И (НАЧАЛОПЕРИОДА(ВТ_КАССЫ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(КассоваяСмена.Дата, ДЕНЬ))
	|			И (КассоваяСмена.ПометкаУдаления = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КАССЫ.Магазин,
	|	ВТ_КАССЫ.КолМинутНачало,
	|	ВТ_КАССЫ.МинутаНачала,
	|	ВТ_КАССЫ.ЧасНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НАЧ.НачалоКассовойСмены КАК КассоваяСмена,
	|	ВТ_НАЧ.Магазин КАК Магазин,
	|	ВТ_НАЧ.КолМинутНачало КАК КолМинутНачало,
	|	ВТ_НАЧ.МинутаНачала КАК МинутаНачала,
	|	ВТ_НАЧ.ЧасНачала КАК ЧасНачала,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ВТ_НАЧ.НачалоКассовойСмены, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаОбработки, ДЕНЬ)
	|			ТОГДА 5000
	|		ИНАЧЕ ЧАС(ВТ_НАЧ.НачалоКассовойСмены) * 60 + МИНУТА(ВТ_НАЧ.НачалоКассовойСмены)
	|	КОНЕЦ КАК КолМинутНачалоФакт,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ВТ_НАЧ.НачалоКассовойСмены, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаОбработки, ДЕНЬ)
	|			ТОГДА 5000
	|		ИНАЧЕ ЧАС(ВТ_НАЧ.НачалоКассовойСмены) * 60 + МИНУТА(ВТ_НАЧ.НачалоКассовойСмены) - ВТ_НАЧ.КолМинутНачало
	|	КОНЕЦ КАК Отклонение
	|ИЗ
	|	ВТ_НАЧ КАК ВТ_НАЧ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НАЧАЛОПЕРИОДА(ВТ_НАЧ.НачалоКассовойСмены, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&ДатаОбработки, ДЕНЬ)
	|				ТОГДА 5000
	|			ИНАЧЕ ЧАС(ВТ_НАЧ.НачалоКассовойСмены) * 60 + МИНУТА(ВТ_НАЧ.НачалоКассовойСмены)
	|		КОНЕЦ > ВТ_НАЧ.КолМинутНачало
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаОбработки",ДатаОбработки);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	// саУНФ_ОбщийМодуль.ПоказатьВременнуюТаблицу(МВТ, "ВТ_КАССЫ")
	
	Возврат РезультатЗапроса;
	
КонецФункции // ()

// Кассовые смены конец.
// 
// Параметры:
//  МВТ - МенеджерВременныхТаблиц - МВТ
//  ДатаОбработки - Число - Дата обработки
// 
// Возвращаемое значение:
//  ТаблицаЗначений -- Кассовые смены конец
Функция КассовыеСменыКонец(МВТ,ДатаОбработки)
	//КАССОВЫЕ СМЕНЫ
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_КАССЫ.Магазин КАК Магазин,
	|	МАКСИМУМ(КассоваяСмена.ОкончаниеКассовойСмены) КАК ОкончаниеКассовойСмены,
	|	ВТ_КАССЫ.КолМинутОкончание КАК КолМинутОкончание,
	|	ВТ_КАССЫ.МинутаОкончания КАК МинутаОкончания,
	|	ВТ_КАССЫ.ЧасОкончания КАК ЧасОкончания
	|ПОМЕСТИТЬ ВТ_НАЧ
	|ИЗ
	|	ВТ_КАССЫ КАК ВТ_КАССЫ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО (КассоваяСмена.КассаККМ = ВТ_КАССЫ.Касса)
	|			И (НАЧАЛОПЕРИОДА(ВТ_КАССЫ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(КассоваяСмена.Дата, ДЕНЬ))
	|			И (КассоваяСмена.ПометкаУдаления = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КАССЫ.Магазин,
	|	ВТ_КАССЫ.КолМинутОкончание,
	|	ВТ_КАССЫ.МинутаОкончания,
	|	ВТ_КАССЫ.ЧасОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НАЧ.Магазин КАК Магазин,
	|	ВТ_НАЧ.ОкончаниеКассовойСмены КАК КассоваяСмена,
	|	ВТ_НАЧ.КолМинутОкончание КАК КолМинутОкончание,
	|	ВТ_НАЧ.МинутаОкончания КАК МинутаОкончания,
	|	ВТ_НАЧ.ЧасОкончания КАК ЧасОкончания,
	|	ЧАС(ВТ_НАЧ.ОкончаниеКассовойСмены) * 60 + МИНУТА(ВТ_НАЧ.ОкончаниеКассовойСмены) КАК КолМинутОкончаниеФакт,
	|	ВТ_НАЧ.КолМинутОкончание - (ЧАС(ВТ_НАЧ.ОкончаниеКассовойСмены) * 60 + МИНУТА(ВТ_НАЧ.ОкончаниеКассовойСмены)) КАК Отклонение
	|ИЗ
	|	ВТ_НАЧ КАК ВТ_НАЧ
	|ГДЕ
	|	ЧАС(ВТ_НАЧ.ОкончаниеКассовойСмены) * 60 + МИНУТА(ВТ_НАЧ.ОкончаниеКассовойСмены) < ВТ_НАЧ.КолМинутОкончание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Магазин
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаОбработки",ДатаОбработки);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	// саУНФ_ОбщийМодуль.ПоказатьВременнуюТаблицу(МВТ, "ВТ_КАССЫ")
	
	Возврат РезультатЗапроса;
	
КонецФункции // ()

// Сезон. Для РТТ существует летнее и зимнее расписание
// 
// Параметры:
//  ДатаОбработки - Число, Неопределено, Дата - Дата обработки
// 
// Возвращаемое значение:
//  Булево - Сезон
Функция Сезон(ДатаОбработки)
	ТекГод =  Год(ДатаОбработки);
	Если  НачалоДня(ДатаОбработки) >=	НачалоДня( Дата(ТекГод,3,1))
		И 	  КонецДня(ДатаОбработки)  <    	НачалоДня( Дата(ТекГод,10,1))  Тогда
		ЭтоЛето=Истина;
	Иначе	 
		ЭтоЛето=Ложь;
	КонецЕсли; 
	
	Возврат ЭтоЛето;
	
КонецФункции // ()

// Контроль.
// 
// Параметры:
//  ДатаОбработки - Неопределено - Дата обработки
Процедура Контроль(ДатаОбработки = Неопределено)  Экспорт
	 Если ДатаОбработки = Неопределено Тогда
	         ДатаОбработки = ТекущаяДатаСеанса();
	 КонецЕсли; 
	 ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.са_УНФ_КонтрольРасписания);
	
	МВТ = НОВЫЙ МенеджерВременныхТаблиц;
	Организация	=	УправлениеНебольшойФирмойПовтИсп.ОрганизацияПоУмолчанию();
	Сутки = 86400;
	
	//ВРЕМЯ ОТКРЫТИЯ
	//ДатаОбработки = ТекущаяДата()-16*Сутки;
	ЭтоЛето=Сезон(ДатаОбработки); 
	ТаблицаДат= УстановкаТблицыДат(ДатаОбработки,0);
	ПланОткрытия(МВТ,Организация,ЭтоЛето,ТаблицаДат);
	ТаблицаНачала=КассовыеСменыНачало(МВТ,ДатаОбработки);
	саУНФ_АтозаказВызовСервера.ОчисткаВременныхТаблиц(МВТ);
	//ВРЕМЯ ЗАКРЫТИЯ
	ДатаОбработки2 = ДатаОбработки-1*Сутки;
	ЭтоЛето=Сезон(ДатаОбработки2); 
	ТаблицаДат= УстановкаТблицыДат(ДатаОбработки2,6);
	ПланОткрытия(МВТ,Организация,ЭтоЛето,ТаблицаДат);
	ТаблицаОкончания=КассовыеСменыКонец(МВТ,ДатаОбработки2);
	
	
	Результат =  саУНФ_ДеньгиКассы.ОстаткиВКассах(ДатаОбработки);
	саУНФ_АтозаказВызовСервера.ОтправитьОтклонения(ТаблицаНачала,ТаблицаОкончания,Результат);
КонецПроцедуры

#КонецЕсли
