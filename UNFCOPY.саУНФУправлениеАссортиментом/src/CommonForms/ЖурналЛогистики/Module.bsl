#Область ЗакладкаФормирование
	
#Область ДобавлениеТаблицуМаршрута
&НаСервере
Процедура ЗачеркнутьВыбранные()
	ТабВДинСписок=ТаблицаМаршрута.Выгрузить(,"Документ");
	МасивВДинСписок=ТабВДинСписок.ВыгрузитьКолонку("Документ");
    Список.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МойПараметр", МасивВДинСписок);
    Элементы.Список.Обновить();


КонецПроцедуры


&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПеретаскивания = Новый Структура();
	Для каждого СтрКлюча Из ВыбраннаяСтрока Цикл
		СтруктураПеретаскивания.Вставить(СтрКлюча.Ключ,СтрКлюча.Значение);
	КонецЦикла; 
	Если СтруктураПеретаскивания.Количество()>0 Тогда
		СписокНачалоПеретаскиванияНаСервере(СтруктураПеретаскивания);
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура СписокНачалоПеретаскиванияНаСервере(МассивПеретаскивания)
	Если ТипЗнч(МассивПеретаскивания) = Тип("Массив") ИЛИ  ТипЗнч(МассивПеретаскивания) = Тип("ТаблицаЗначений") Тогда
		Для каждого  СтрМассива Из МассивПеретаскивания Цикл
			Если ДокументЕстьВТаблицеМаршрута(СтрМассива.Документ)	Тогда
				Продолжить;
			КонецЕсли;	
			НоваяСтрока = ТаблицаМаршрута.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрМассива);
			Если ЗначениеЗаполнено(СтрМассива.ЗонаДоставки) Тогда
				ЗонаТариф=СтрМассива.ЗонаДоставки; 
			КонецЕсли; 
			НоваяСтрока.Комментарий =  СтрМассива.Документ.Комментарий;
			Если ТипЗнч(СтрМассива.Документ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			         НоваяСтрока.Комментарий =НоваяСтрока.Комментарий +" "+СокрЛП(СтрМассива.Документ.ДополнительнаяИнформацияПоДоставке);
			КонецЕсли; 
		КонецЦикла; 
	ИначеЕсли ТипЗнч(МассивПеретаскивания) = Тип("Структура")  Тогда
		Если ДокументЕстьВТаблицеМаршрута(МассивПеретаскивания.Документ)	Тогда
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаМаршрута.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивПеретаскивания);
		Если ЗначениеЗаполнено(МассивПеретаскивания.ЗонаДоставки) Тогда
			ЗонаТариф=МассивПеретаскивания.ЗонаДоставки; 
		КонецЕсли;                                       
		НоваяСтрока.Комментарий =  МассивПеретаскивания.Документ.Комментарий;
		Если ТипЗнч(МассивПеретаскивания.Документ)=Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			         НоваяСтрока.Комментарий =НоваяСтрока.Комментарий +" "+СокрЛП(МассивПеретаскивания.Документ.ДополнительнаяИнформацияПоДоставке);
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли; 
	ТаблицаМаршрутаПриИзмененииНаСервере();
	
КонецПроцедуры     

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СписокНачалоПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекущий(Команда)
	МассивПеретаскивания = Элементы.Список.ВыделенныеСтроки;
	СписокНачалоПеретаскиванияНаСервере(МассивПеретаскивания);
КонецПроцедуры


&НаСервере
Процедура ТаблицаМаршрутаПриИзмененииНаСервере()
	ИтогВес 			=  ТаблицаМаршрута.Итог("Вес")/1000;
	ИтогВесЛом 		=  ТаблицаМаршрута.Итог("ВесЛома")/1000;
	ИтогОбъем 		=  ТаблицаМаршрута.Итог("Объем");
	ИтогСумма 		=  ТаблицаМаршрута.Итог("Сумма");
	ИтогСтрок 		=  ТаблицаМаршрута.Количество();
	
	Элементы.ТаблицаМаршрутаВесЛома.ТекстПодвала 		= ФОРМАТ(ИтогВесЛом,"ЧЦ=15; ЧДЦ=3")+" т."; 
	Элементы.ТаблицаМаршрутаВес.ТекстПодвала 				= ФОРМАТ(ИтогВес,"ЧЦ=15; ЧДЦ=3")+" т."; 
	Элементы.ТаблицаМаршрутаОбъем.ТекстПодвала 		= ФОРМАТ(ИтогОбъем,"ЧЦ=15; ЧДЦ=0"); 
	Элементы.ТаблицаМаршрутаСумма.ТекстПодвала 		= ФОРМАТ(ИтогСумма,"ЧЦ=15; ЧДЦ=2"); 
	ЗачеркнутьВыбранные();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаПриИзменении(Элемент)
	ТаблицаМаршрутаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВМаршрут(Команда)
	ОтборЗаполнен = Ложь;
	ЭлементыОтбора=Список.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора)=Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗонаДоставки") И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение)=Тип("СписокЗначений") Тогда
				Если ЭлементОтбора.ПравоеЗначение.Количество()>0 Тогда
					ОтборЗаполнен = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	
	
	Если НЕ ОтборЗаполнен Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "ОтборЗонаДоставки";
		Сообщение.Текст = "Для переноса всего списка нужно установить отбор по зоне доставки";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли; 
	ПолучитьСодержаниеСписка();
КонецПроцедуры

&НаСервере 
Функция ПолучитьСодержаниеСписка()
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТаблицаПеретаскивания = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаПеретаскивания);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	СписокНачалоПеретаскиванияНаСервере(ТаблицаПеретаскивания);
КонецФункции // ()

&НаСервере
Процедура ОчиститьТаблицуМаршрута()
	ТаблицаМаршрута.Очистить();
	ТаблицаДетализация.Очистить();
	ТаблицаМаршрутаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	ОчиститьТаблицуМаршрута();
КонецПроцедуры


#КонецОбласти

#КонецОбласти

&НаСервере
Функция ЗаполнитьСписокВыбораПосторонних(ГруппаПосторонних);
	 	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ПометкаУдаления
		|	И НЕ ФизическиеЛица.ЭтоГруппа
		|	И ФизическиеЛица.Родитель = &Родитель
		|	И НЕ ФизическиеЛица.Недействителен";
	
	Запрос.УстановитьПараметр("Родитель", ГруппаПосторонних);
	
	Результат = Запрос.Выполнить();
	
	Если  НЕ Результат.Пустой() Тогда
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		   Элементы.СписокПостороннихВодителей.СписокВыбора.Добавить(Выборка.Ссылка,Выборка.Наименование);
	КонецЦикла;
	     СписокПостороннихВодителей = Элементы.СписокПостороннихВодителей.СписокВыбора[0].Значение;
	 КонецЕсли; 

	
	
	
КонецФункции	

&НаСервере
Процедура ВидимостьСамовывоза()
	    Элементы.Список.ПодчиненныеЭлементы.СписокСамовывоз.Видимость = ПоказыватьСамовывоз;
КонецПроцедуры
 
&НаСервере
Процедура ПолучитьПостороннихВодителей()
	Элементы.СписокПостороннихВодителей.СписокВыбора.Очистить();
	
	ОМ=ОбщегоНазначения.ОбщийМодуль("саУНФ_ОбщийМодуль");
	Если ОМ=Неопределено Тогда Возврат; КонецЕсли;

	Выборка=ОМ.ПолучитьНастройкиЛогистики();
	СтруктураПоиска = Новый Структура("Параметр","Группа посторонних"); 
	Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
		ГруппаПосторонних = Выборка.Значение;
		Если ЗначениеЗаполнено(ГруппаПосторонних)  И ТипЗнч(ГруппаПосторонних)=Тип("СправочникСсылка.ФизическиеЛица") И ГруппаПосторонних.ЭтоГруппа Тогда
			ЗаполнитьСписокВыбораПосторонних(ГруппаПосторонних);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры
 



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "&ЗаменаНаВсе", " ПеремещениеЗапасов.Вес");
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "И &ПоказыватьСамовывоз", "");
	
	ВПути							=	Истина;
	ПоказыватьСамовывоз  = Ложь;
	ПоказыватьСамовывоз();
	ПоказыватьВПути();
	//Если ПоказыватьСамовывоз Тогда
	//	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "И &ПоказыватьСамовывоз", "");
	//Иначе	
	//	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "&ПоказыватьСамовывоз", " НЕ ПеремещениеЗапасов.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)");
	//КонецЕсли; 
	 

	 ОтборНаличка = Ложь;
	 
	СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ВРаботе",Перечисления.СостояниеМаршрута.ВРаботе);
	
	Список.Параметры.УстановитьЗначениеПараметра("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Список.Параметры.УстановитьЗначениеПараметра("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	
	
	Если Параметры.Свойство("ДатаНачала") Тогда
		ПараметрыДатаНачала = НачалоДня(Параметры.ДатаНачала);
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ПараметрыДатаНачала);
		ОтборПериод.ДатаНачала =	Параметры.ДатаНачала; 
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаНачалаМаршрута",ПараметрыДатаНачала);
		
	КонецЕсли; 
	Если Параметры.Свойство("ДатаОкончания") Тогда
		ПараметрыДатаОкончания = КонецДня(Параметры.ДатаОкончания);
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ПараметрыДатаОкончания);
		ОтборПериод.ДатаОкончания =	Параметры.ДатаОкончания;
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияМаршрута",КонецМесяца(ДобавитьМесяц(ПараметрыДатаОкончания,1)));
	КонецЕсли; 
	
	   ТабВДинСписок=ТаблицаМаршрута.Выгрузить(,"Документ");
	   МасивВДинСписок=ТабВДинСписок.ВыгрузитьКолонку("Документ");

      Список.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МойПараметр", МасивВДинСписок);
	
	
	
	
	УпорядочитьПоДате();
	УстановитьОтборТекущиеДела();
	
	ВариантДоставки = "Курьер";
	СлужбаДоставки = Справочники.СлужбыДоставки.ДоставкаСобственнымиСилами;
	Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКурьер;
	СлужбаДоставки=ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	СпособОтгрузки = Неопределено;
	СпособДоставки = Перечисления.СпособыДоставки.Курьер;
	ОМ=ОбщегоНазначения.ОбщийМодуль("саУНФ_ОбщийМодуль");
	Если НЕ ОМ=Неопределено Тогда
		     Выборка=ОМ.ПолучитьНастройкиЛогистики();
			 
	Иначе
		  Закрыть();
	КонецЕсли; 
	СтруктураПоиска = Новый Структура("Параметр","Основной склад"); 
	Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
		Склад = Выборка.Значение;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад = Новый Массив(1);
		МассивСклад[0]=Склад;
		СкладПриИзмененииНаСервере(МассивСклад);
	КонецЕсли; 	  
	
ПолучитьПостороннихВодителей();		
ВидимостьСамовывоза();	
КонецПроцедуры



#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "ДатаДоставки",,,"ПриОкончанииВыбораПериода");
	ОчиститьТаблицуМаршрута();
	

КонецПроцедуры



&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

#КонецОбласти

#Область СборкаМаршрута


&НаСервере
Процедура УпорядочитьПоДате()
	ПолеД = "ДатаОтгрузки";
	
	Список.Порядок.Элементы.Очистить();
	НовыйПорядок = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	НовыйПорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	
	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(ПолеД);
	НовыйПорядок.Использование = Истина;
	
	СписокМаршрутов.Порядок.Элементы.Очистить();
	НовыйПорядок = СписокМаршрутов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	НовыйПорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	
	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных("Дата");
	НовыйПорядок.Использование = Истина;
	
	
КонецПроцедуры


&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	//Если НЕ Параметры.Свойство("ТекущиеДела") Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//АвтоЗаголовок = Ложь;
	//Заголовок = НСтр("ru='Заказы поставщикам'");
	//
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Проведен", Истина);
	//
	//УстановитьМеткуИОтборСписка(
	//	"ВариантЗавершения",
	//	Элементы.ОтборЗавершениеЗаказа.Родитель.Имя,
	//	ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.ПустаяСсылка"), // В текущих делах все заказы Не завершенные
	//	Элементы.ОтборЗавершениеЗаказа.СписокВыбора.НайтиПоЗначению("ПустаяСсылка").Представление
	//);
	//
	//РаботаСОтборами.ПрикрепитьМеткиОтбораИзМассива(ЭтотОбъект, "Ответственный", "ГруппаОтборОтветственный", УправлениеНебольшойФирмойСервер.ПолучитьСотрудниковПользователя());
	//РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, "Ответственный");
	//
	//Если Параметры.Свойство("ПросроченоВыполнение") Тогда
	//	
	//	Заголовок = Заголовок + ": " + НСтр("ru='просрочено выполнение'");
	//	Список.УстановитьОбязательноеИспользование("ПросроченоВыполнение", Истина);
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченоВыполнение", Истина);
	//	
	//ИначеЕсли Параметры.Свойство("ПросроченаОплата") Тогда
	//	
	//	Заголовок = Заголовок + ": " + НСтр("ru='просрочена оплата'");
	//	Список.УстановитьОбязательноеИспользование("ПросроченаОплата", Истина);
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПросроченаОплата", Истина);
	//	
	//ИначеЕсли Параметры.Свойство("НаСегодня") Тогда
	//	
	//	Заголовок = Заголовок + ": " + НСтр("ru='на сегодня'");
	//	Список.УстановитьОбязательноеИспользование("НаСегодня", Истина);
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "НаСегодня", Истина);
	//	
	//ИначеЕсли Параметры.Свойство("ВРаботе") Тогда
	//	
	//	Заголовок = Заголовок + ": " + НСтр("ru='в работе'");
	//	
	//КонецЕсли;
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры


&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОтборПериод.ДатаНачала);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ОтборПериод.ДатаОкончания);
	УпорядочитьПоДате();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	ПериодПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПоДатеОтгрузкиПриИзмененииНаСервере()
	ПериодПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоДатеОтгрузкиПриИзменении(Элемент)
	ПоДатеОтгрузкиПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборЗонаДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ЗонаДоставки", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	ОчиститьТаблицуМаршрута();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Подразделение", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидЗаказа", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры



&НаСервере
Функция ДокументЕстьВТаблицеМаршрута(Док)
	СтруктураПоиска = Новый Структура("Документ",Док);
	МассивНайденных = ТаблицаМаршрута.НайтиСтроки(СтруктураПоиска);
	Если МассивНайденных.Количество()>0 Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли; 
КонецФункции // ()





                                                                                                                         







&НаКлиенте
Процедура ВариантДоставкиПриИзменении(Элемент)
	СобственнаяДоставка = (ВариантДоставки="Курьер");
	Если СобственнаяДоставка Тогда
		Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКурьер;
		СлужбаДоставки=ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
		СпособОтгрузки = Неопределено;
	Иначе
		Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаСлужбаДоставки;
		СлужбаДоставки = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ПустаяСсылка");
		СпособОтгрузки = ПредопределенноеЗначение("Перечисление.СпособыОтгрузки.ПередатьКурьеруСлужбыДоставки");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьГруппуВодители()
	ГруппаВодители=Справочники.ФизическиеЛица.НайтиПоНаименованию("Водители");
	Если  НЕ ЗначениеЗаполнено(ГруппаВодители) ИЛИ НЕ ГруппаВодители.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Возврат  ГруппаВодители;
	
КонецФункции // ()



&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ГруппаВодители = ПолучитьГруппуВодители();	
	Если НЕ ГруппаВодители = Неопределено  Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ГруппаВодители",ГруппаВодители);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаЛогистики", ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор );
	КонецЕсли; 	
	
КонецПроцедуры


&НаКлиенте
Процедура ВодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ПриОкончанииВыбораПериода" Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОтборПериод.ДатаНачала);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ОтборПериод.ДатаОкончания);
		
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаНачалаМаршрута",ОтборПериод.ДатаНачала);
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияМаршрута",КонецМесяца(ДобавитьМесяц(ОтборПериод.ДатаНачала,1)));
		
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвто()
	
	Автомобиль =  Водитель.Автомобиль;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение)=Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ВыбранВодитель") Тогда
			Водитель = ПолучитьИзВременногоХранилища( ВыбранноеЗначение.Адрес);
			Если  ЗначениеЗаполнено(Водитель) Тогда
				ЗаполнитьАвто();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры




&НаСервере
Процедура ЗонаТарифПриИзмененииНаСервере()
	Автомобиль =  Водитель.Автомобиль;
КонецПроцедуры


&НаКлиенте
Процедура ЗонаТарифПриИзменении(Элемент)
	ЗонаТарифПриИзмененииНаСервере();
КонецПроцедуры

#Область МаршрутныйЛист
Функция ПолучитьВременнуюТаблицуСПодчиненнымиДокументами(МВТ,ДатаДоставки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаМаршрута.ДатаДоставки КАК ДатаДоставки,
	|	ТаблицаМаршрута.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ТаблицаМаршрута.Сумма КАК Сумма,
	|	ТаблицаМаршрута.Подразделение КАК Подразделение,
	|	ТаблицаМаршрута.Объем КАК Объем,
	|	ТаблицаМаршрута.Контрагент КАК Контрагент,
	|	ТаблицаМаршрута.ЗонаДоставки КАК ЗонаДоставки,
	|	ВЫРАЗИТЬ(ТаблицаМаршрута.Документ КАК Документ.ЗаявкаНаЛом) КАК Заказ,
	|	ТаблицаМаршрута.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ТаблицаМаршрута.ВесЛома КАК ВесЛома,
	|	ТаблицаМаршрута.АдресДоставки КАК АдресДоставки,
	|	ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка) КАК РасходнаяНакладная,
	|	"""" КАК КонтактПредставление,
	|	"""" КАК Телефон,
	|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка) КАК Контакт,
	|	0 КАК Номер,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Менеджер,
	|	0 КАК Вес
	|ПОМЕСТИТЬ ВТ_ЗАЯВКАЛОМ
	|ИЗ
	|	&ТаблицаМаршрута КАК ТаблицаМаршрута
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаМаршрута.Документ) = ТИП(Документ.ЗаявкаНаЛом)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМаршрута.ДатаДоставки КАК ДатаДоставки,
	|	ТаблицаМаршрута.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ТаблицаМаршрута.Сумма КАК Сумма,
	|	ТаблицаМаршрута.Подразделение КАК Подразделение,
	|	ТаблицаМаршрута.Объем КАК Объем,
	|	ТаблицаМаршрута.Контрагент КАК Контрагент,
	|	ТаблицаМаршрута.ЗонаДоставки КАК ЗонаДоставки,
	|	ВЫРАЗИТЬ(ТаблицаМаршрута.Документ КАК Документ.ПеремещениеЗапасов) КАК Документ,
	|	ТаблицаМаршрута.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ТаблицаМаршрута.Вес КАК Вес,
	|	ТаблицаМаршрута.АдресДоставки КАК АдресДоставки,
	|	ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка) КАК РасходнаяНакладная,
	|	"""" КАК КонтактПредставление,
	|	"""" КАК Телефон,
	|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка) КАК Контакт,
	|	0 КАК Номер,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Менеджер,
	|	0 КАК ВесЛома
	|ПОМЕСТИТЬ ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ
	|ИЗ
	|	&ТаблицаМаршрута КАК ТаблицаМаршрута
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаМаршрута.Документ) = ТИП(Документ.ПеремещениеЗапасов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМаршрута.ДатаДоставки КАК ДатаДоставки,
	|	ТаблицаМаршрута.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ТаблицаМаршрута.Сумма КАК Сумма,
	|	ТаблицаМаршрута.Подразделение КАК Подразделение,
	|	ТаблицаМаршрута.Объем КАК Объем,
	|	ТаблицаМаршрута.Контрагент КАК Контрагент,
	|	ТаблицаМаршрута.ЗонаДоставки КАК ЗонаДоставки,
	|	ВЫРАЗИТЬ(ТаблицаМаршрута.Документ КАК Документ.ЗаказПокупателя) КАК Документ,
	|	ТаблицаМаршрута.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ТаблицаМаршрута.Вес КАК Вес,
	|	ТаблицаМаршрута.АдресДоставки КАК АдресДоставки,
	|	0 КАК ВесЛома
	|ПОМЕСТИТЬ ВТ_МАРШРУТ
	|ИЗ
	|	&ТаблицаМаршрута КАК ТаблицаМаршрута
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаМаршрута.Документ) = ТИП(Документ.ЗаказПокупателя)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МАРШРУТ.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_МАРШРУТ.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВТ_МАРШРУТ.Сумма КАК Сумма,
	|	ВТ_МАРШРУТ.Подразделение КАК Подразделение,
	|	ВТ_МАРШРУТ.Объем КАК Объем,
	|	ВТ_МАРШРУТ.Контрагент КАК Контрагент,
	|	ВТ_МАРШРУТ.ЗонаДоставки КАК ЗонаДоставки,
	|	ВТ_МАРШРУТ.Документ КАК Документ,
	|	ВТ_МАРШРУТ.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВТ_МАРШРУТ.Вес КАК Вес,
	|	ВТ_МАРШРУТ.АдресДоставки КАК АдресДоставки,
	|	ЕСТЬNULL(РасходнаяНакладная.Ссылка, ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)) КАК РасходнаяНакладная,
	|	&ДоговорОтвественный КАК ДоговорОтвественный,
	|	ВТ_МАРШРУТ.ВесЛома КАК ВесЛома
	|ПОМЕСТИТЬ ВТ_ЗАКАЗ
	|ИЗ
	|	ВТ_МАРШРУТ КАК ВТ_МАРШРУТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ПО ВТ_МАРШРУТ.Документ = РасходнаяНакладная.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗАКАЗ.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_ЗАКАЗ.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВТ_ЗАКАЗ.Сумма КАК Сумма,
	|	ВТ_ЗАКАЗ.Подразделение КАК Подразделение,
	|	ВТ_ЗАКАЗ.Объем КАК Объем,
	|	ВТ_ЗАКАЗ.Контрагент КАК Контрагент,
	|	ВТ_ЗАКАЗ.ЗонаДоставки КАК ЗонаДоставки,
	|	ВТ_ЗАКАЗ.Документ КАК Документ,
	|	ВТ_ЗАКАЗ.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВТ_ЗАКАЗ.Вес КАК Вес,
	|	ВТ_ЗАКАЗ.АдресДоставки КАК АдресДоставки,
	|	ВТ_ЗАКАЗ.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ВЫБОР
	|		КОГДА СвязиКонтрагентКонтактСрезПоследних.Контакт.Представление ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(Контрагенты.Представление, """")
	|		ИНАЧЕ СвязиКонтрагентКонтактСрезПоследних.Контакт.Представление
	|	КОНЕЦ КАК КонтактПредставление,
	|	ВЫБОР
	|		КОГДА СвязиКонтрагентКонтактСрезПоследних.Контакт.НомерТелефонаДляПоиска ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(Контрагенты.НомерТелефонаДляПоиска, """")
	|		ИНАЧЕ СвязиКонтрагентКонтактСрезПоследних.Контакт.НомерТелефонаДляПоиска
	|	КОНЕЦ КАК КонтактНомерТелефонаДляПоиска,
	|	ЕСТЬNULL(СвязиКонтрагентКонтактСрезПоследних.Контакт, ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)) КАК Контакт,
	|	АВТОНОМЕРЗАПИСИ() КАК Номер,
	|	ЕСТЬNULL(ВТ_ЗАКАЗ.ДоговорОтвественный, ВТ_ЗАКАЗ.Документ.Ответственный) КАК ДоговорОтвественный,
	|	ВТ_ЗАКАЗ.ВесЛома КАК ВесЛома
	|ПОМЕСТИТЬ ВТ_КОНТАКТЫ
	|ИЗ
	|	ВТ_ЗАКАЗ КАК ВТ_ЗАКАЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(
	|				&ДатаДоставки,
	|				Контрагент В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ЗАКАЗ.Контрагент КАК Контрагент
	|					ИЗ
	|						ВТ_ЗАКАЗ КАК ВТ_ЗАКАЗ)) КАК СвязиКонтрагентКонтактСрезПоследних
	|		ПО ВТ_ЗАКАЗ.Контрагент = СвязиКонтрагентКонтактСрезПоследних.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_ЗАКАЗ.Контрагент = Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КОНТАКТЫ.Документ КАК Документ,
	|	МАКСИМУМ(ВТ_КОНТАКТЫ.Номер) КАК Номер
	|ПОМЕСТИТЬ ВТ_МАКС
	|ИЗ
	|	ВТ_КОНТАКТЫ КАК ВТ_КОНТАКТЫ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КОНТАКТЫ.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КОНТАКТЫ.ДатаДоставки КАК ДатаДоставки,
	|	ВТ_КОНТАКТЫ.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВТ_КОНТАКТЫ.Сумма КАК Сумма,
	|	ВТ_КОНТАКТЫ.Подразделение КАК Подразделение,
	|	ВТ_КОНТАКТЫ.Объем КАК Объем,
	|	ВТ_КОНТАКТЫ.Контрагент КАК Контрагент,
	|	ВТ_КОНТАКТЫ.ЗонаДоставки КАК ЗонаДоставки,
	|	ВТ_КОНТАКТЫ.Документ КАК Заказ,
	|	ВТ_КОНТАКТЫ.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВТ_КОНТАКТЫ.Вес КАК Вес,
	|	ВТ_КОНТАКТЫ.АдресДоставки КАК АдресДоставки,
	|	ВТ_КОНТАКТЫ.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ВТ_КОНТАКТЫ.КонтактПредставление КАК КонтактПредставление,
	|	ВТ_КОНТАКТЫ.КонтактНомерТелефонаДляПоиска КАК Телефон,
	|	ВТ_КОНТАКТЫ.Контакт КАК Контакт,
	|	ВТ_КОНТАКТЫ.Номер КАК Номер,
	|	ВТ_КОНТАКТЫ.ДоговорОтвественный КАК Менеджер,
	|	ВТ_КОНТАКТЫ.ВесЛома КАК ВесЛома
	|ИЗ
	|	ВТ_МАКС КАК ВТ_МАКС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КОНТАКТЫ КАК ВТ_КОНТАКТЫ
	|		ПО ВТ_МАКС.Документ = ВТ_КОНТАКТЫ.Документ
	|			И ВТ_МАКС.Номер = ВТ_КОНТАКТЫ.Номер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.ДатаДоставки,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.ВремяДоставкиПо,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Сумма,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Подразделение,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Объем,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Контрагент,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.ЗонаДоставки,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Документ,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.ВремяДоставкиС,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Вес,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.АдресДоставки,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.РасходнаяНакладная,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.КонтактПредставление,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Телефон,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Контакт,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Номер,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.Менеджер,
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ.ВесЛома
	|ИЗ
	|	ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ КАК ВТ_ПЕРЕМЕЩЕНИЕЗАПАСОВ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗАЯВКАЛОМ.ДатаДоставки,
	|	ВТ_ЗАЯВКАЛОМ.ВремяДоставкиПо,
	|	ВТ_ЗАЯВКАЛОМ.Сумма,
	|	ВТ_ЗАЯВКАЛОМ.Подразделение,
	|	ВТ_ЗАЯВКАЛОМ.Объем,
	|	ВТ_ЗАЯВКАЛОМ.Контрагент,
	|	ВТ_ЗАЯВКАЛОМ.ЗонаДоставки,
	|	ВТ_ЗАЯВКАЛОМ.Заказ,
	|	ВТ_ЗАЯВКАЛОМ.ВремяДоставкиС,
	|	ВТ_ЗАЯВКАЛОМ.Вес,
	|	ВТ_ЗАЯВКАЛОМ.АдресДоставки,
	|	ВТ_ЗАЯВКАЛОМ.РасходнаяНакладная,
	|	ВТ_ЗАЯВКАЛОМ.КонтактПредставление,
	|	ВТ_ЗАЯВКАЛОМ.Телефон,
	|	ВТ_ЗАЯВКАЛОМ.Контакт,
	|	ВТ_ЗАЯВКАЛОМ.Номер,
	|	ВТ_ЗАЯВКАЛОМ.Менеджер,
	|	ВТ_ЗАЯВКАЛОМ.ВесЛома
	|ИЗ
	|	ВТ_ЗАЯВКАЛОМ КАК ВТ_ЗАЯВКАЛОМ";
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"&ДоговорОтвественный", " ВТ_МАРШРУТ.Документ.Договор.ПакОтветственный ");
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	Запрос.УстановитьПараметр("ТаблицаМаршрута", ТаблицаМаршрута.Выгрузить());
	Результат = Запрос.Выполнить();
	ТаблицаМ = Результат.Выгрузить();
	
	//	саУНФ_ОбщийМодуль.ПоказатьВременнуюТаблицу(МВТ, "ВТ_МАРШРУТ")
	Возврат  ТаблицаМ;
	
КонецФункции // ()

&НаСервере
Функция ПроверитьДаты()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМаршрута.ДатаДоставки КАК ДатаДоставки
	|ПОМЕСТИТЬ ВТ_ДАТАДОСТАВКИ
	|ИЗ
	|	&ТаблицаМаршрута КАК ТаблицаМаршрута
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДАТАДОСТАВКИ.ДатаДоставки КАК ДатаДоставки
	|ИЗ
	|	ВТ_ДАТАДОСТАВКИ КАК ВТ_ДАТАДОСТАВКИ";
	
	Запрос.УстановитьПараметр("ТаблицаМаршрута", ТаблицаМаршрута.Выгрузить());
	Результат = Запрос.Выполнить();
	
	
	
	Если Результат.Пустой() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнена таблица маршрута";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	Иначе
		Выборка = Результат.Выбрать();
		Если Выборка.Количество()>1 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Даты доставки в маршруте должны быть одинаковые";
			Сообщение.Сообщить();
			Возврат Ложь;
		Иначе
			Выборка.Следующий();
			Возврат Выборка.ДатаДоставки;
		КонецЕсли; 
	КонецЕсли; 
	
	
КонецФункции // ()

&НаСервере
Функция ПроверитьЗаписатьСегменты()
	Если НЕ ЗначениеЗаполнено(ЗонаТариф) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаМаршрута.Контрагент КАК Контрагент,
	|	ТаблицаМаршрута.ЗонаДоставки КАК ЗонаДоставки
	|ПОМЕСТИТЬ ВТ_ЗОНАД
	|ИЗ
	|	&ТаблицаМаршрута КАК ТаблицаМаршрута
	|ГДЕ
	|	ТаблицаМаршрута.ЗонаДоставки <> &ЗонаДоставки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗОНАД.Контрагент КАК Контрагент
	|ИЗ
	|	ВТ_ЗОНАД КАК ВТ_ЗОНАД";
	
	Запрос.УстановитьПараметр("ТаблицаМаршрута", ТаблицаМаршрута.Выгрузить());
	Запрос.УстановитьПараметр("ЗонаДоставки", ЗонаТариф);
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		КонтрагентОбъект =  Выборка.Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.НаправлениеДоставки =	ЗонаТариф;
		КонтрагентОбъект.Записать();
	КонецЦикла; 
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	Возврат Истина;
КонецФункции	

&НаСервере
Функция ПроверитьСуществованиеМаршрута(ДатаДоставки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПАК_МаршрутныйЛист.Ссылка КАК Ссылка,
	|	ПАК_МаршрутныйЛист.ДатаЗагрузки КАК ДатаЗагрузки
	|ИЗ
	|	Документ.ПАК_МаршрутныйЛист КАК ПАК_МаршрутныйЛист
	|ГДЕ
	|	ПАК_МаршрутныйЛист.Дата = &Дата
	|	И ПАК_МаршрутныйЛист.ЗонаТариф = &ЗонаТариф
	|	И НЕ ПАК_МаршрутныйЛист.ПометкаУдаления
	|	И ПАК_МаршрутныйЛист.Состояние = &Состояние
	|	И ПАК_МаршрутныйЛист.ФИОВодителя = &Курьер";
	
	Запрос.УстановитьПараметр("Дата", ДатаДоставки);
	Запрос.УстановитьПараметр("ЗонаТариф", ЗонаТариф);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеМаршрута.ВРаботе);
	
	 Если  ВариантДоставки = "Курьер" Тогда
			ФИОВодителя  = Водитель.Наименование;
	Иначе
		   ФИОВодителя  =   ВодительСтороннегоСервиса;
	КонецЕсли; 
	Запрос.УстановитьПараметр("Курьер",ФИОВодителя);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Истина;
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		АдресХранилищаМаршрута=ПоместитьВоВременноеХранилище(Выборка.Ссылка) ;
		СписокМ = Новый Структура("АдресХранилищаМаршрута,ДатаЗагрузки",АдресХранилищаМаршрута, Выборка.ДатаЗагрузки);
		
		Возврат  СписокМ;
	КонецЕсли; 
	
	
КонецФункции // ()

&НаКлиенте
АСИНХ Функция ЗадатьВопросОДобавленииВМаршрут(ДатаДоставки,СписокМ)
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Добавить", НСтр("ru = ' Добавить в существующий'", "ru"));
	СписокКнопок.Добавить("Новый", НСтр("ru = ' Создать новый'", "ru"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ТекстВопроса = "По зоне доставки'"+Строка(ЗонаТариф) + "' маршрут уже существует.";
	Если ДатаЗагрузкиАвтомобиля<>СписокМ.ДатаЗагрузки Тогда
	        ТекстВопроса = ТекстВопроса + " дата загрузки будет установлена на "+Строка(ДатаЗагрузкиАвтомобиля)+ "(была " + Строка(СписокМ.ДатаЗагрузки)+")";
	КонецЕсли; 
	
	
	Результат = Ждать ВопросАсинх(ТекстВопроса, СписокКнопок);
	Если Результат = "Добавить" Тогда
		СоздатьМаршрутныйЛистНаСервере(ДатаДоставки,СписокМ);
	ИначеЕсли Результат = "Новый" Тогда
		СоздатьМаршрутныйЛистНаСервере(ДатаДоставки);
	КонецЕсли;

	
	
КонецФункции // ()


&НаСервере
Процедура СоздатьМаршрутныйЛистНаСервере(ДатаДоставки,СписокМ="")
	Если НЕ  ПроверитьЗаписатьСегменты() Тогда
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(СписокМ)=Тип("Строка") Тогда
	      АдресХранилищаМаршрута=""
    Иначе
		  АдресХранилищаМаршрута=СписокМ.АдресХранилищаМаршрута;
	КонецЕсли; 
			
	Элементы.Список.Обновить();
	
	МВТ = Новый МенеджерВременныхТаблиц;
	ТаблицаМ =	ПолучитьВременнуюТаблицуСПодчиненнымиДокументами(МВТ,ДатаДоставки);
	//=========
	Организация = УправлениеНебольшойФирмойПовтИсп.ОрганизацияПоУмолчанию();
	
	Если  ЭтоАдресВременногоХранилища(АдресХранилищаМаршрута) Тогда
		НовыйМаршрутныйЛистСсылка 					= 	ПолучитьИзВременногоХранилища(АдресХранилищаМаршрута);
		НовыйМаршрутныйЛист 								= 	НовыйМаршрутныйЛистСсылка.ПолучитьОбъект();
		НовыйМаршрутныйЛист.ДатаЗагрузки			=	?(ЗначениеЗаполнено(ДатаЗагрузкиАвтомобиля), ДатаЗагрузкиАвтомобиля, ДатаДоставки);
	Иначе
		НовыйМаршрутныйЛист = Документы.ПАК_МаршрутныйЛист.СоздатьДокумент();
		НовыйМаршрутныйЛист.Дата							=	ДатаДоставки;
		НовыйМаршрутныйЛист.Организация				=	Организация;
		НовыйМаршрутныйЛист.Автор							=	Пользователи.ТекущийПользователь();
		НовыйМаршрутныйЛист.ДатаЗагрузки				=	?(ЗначениеЗаполнено(ДатаЗагрузкиАвтомобиля), ДатаЗагрузкиАвтомобиля, ДатаДоставки);
		
		
		
		//НовыйМаршрутныйЛист.Курьер  						= 	Водитель;
		//НовыйМаршрутныйЛист.ФИОВодителя             =  ?(ВариантДоставки = "Курьер",Водитель.Наименование,СОКРЛП(ВодительСтороннегоСервиса)) ;
		
		НовыйМаршрутныйЛист.НомерПутевогоЛиста  	= 	НомерПутевогоЛиста;
		НовыйМаршрутныйЛист.ЗонаТариф					=	ЗонаТариф;
		НовыйМаршрутныйЛист.Автомобиль 				=	Автомобиль;
		НовыйМаршрутныйЛист.СпособДоставки      	=	ПредопределенноеЗначение("Перечисление.СпособыДоставки.Курьер");
		НовыйМаршрутныйЛист.СпособОтгрузки     		=  СпособОтгрузки;
		Если  ВариантДоставки = "Курьер" Тогда
			НовыйМаршрутныйЛист.СлужбаДоставки  = ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
			ОМ=ОбщегоНазначения.ОбщийМодуль("саУНФ_ОбщийМодуль");
			Если НЕ ОМ=Неопределено Тогда
				НовыйМаршрутныйЛист.ТелефонКурьера	=	ОМ.ТелефонКурьера(Водитель);
			КонецЕсли;
		Иначе
			НовыйМаршрутныйЛист.СлужбаДоставки  =	СлужбыДоставки;
			НовыйМаршрутныйЛист.СпособДоставки      	=	ПредопределенноеЗначение("Перечисление.СпособыДоставки.ПунктВыдачи");
		КонецЕсли;
		НовыйМаршрутныйЛист.Склад                     =  Склад;
		НовыйМаршрутныйЛист.АдресОтправки       = 	АдресСклада;
		
		Если ВариантДоставки = "Курьер" Тогда
			НовыйМаршрутныйЛист.Курьер                                 	=     	Водитель;
			НовыйМаршрутныйЛист.ВодительПосторонний             =		Справочники.ФизическиеЛица.ПустаяСсылка();
			НовыйМаршрутныйЛист.ФИОВодителя                         =		Водитель.Наименование;
		Иначе	
			//НовыйМаршрутныйЛист.ФИОВодителя                         =		СОКРЛП(ВодительСтороннегоСервиса);
			НовыйМаршрутныйЛист.ФИОВодителя							=		СписокПостороннихВодителей.Наименование;
			НовыйМаршрутныйЛист.ВодительПосторонний				=      СписокПостороннихВодителей;
			НовыйМаршрутныйЛист.Курьер                                   	=      Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли; 

		
	КонецЕсли; 
	
	
	НовыйМаршрутныйЛист.Состояние               = 	Перечисления.СостояниеМаршрута.ВРаботе;
	
	Для каждого СтрокаТЗ Из ТаблицаМ Цикл
		НоваяТЧЗапас =  НовыйМаршрутныйЛист.Заказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяТЧЗапас,СтрокаТЗ);
		НоваяТЧЗапас.Контакты  =  СтрокаТЗ.КонтактПредставление+" " +СтрокаТЗ.Телефон;
		Если ТипЗнч(СтрокаТЗ.Заказ)=Тип("ДокументСсылка.ЗаявкаНаЛом") Тогда
			НоваяТЧЗапас.ТипОперации  = Перечисления.ТипыОперацийМаршрута.Забор;
		Иначе
			НоваяТЧЗапас.ТипОперации  = Перечисления.ТипыОперацийМаршрута.Доставка;
		КонецЕсли; 
		
	КонецЦикла; 
	
	НовыйМаршрутныйЛист.Записать(РежимЗаписиДокумента.Проведение);
	ТаблицаМаршрута.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьМаршрутныйЛист(Команда)
	Если НЕ ЗначениеЗаполнено(ДатаЗагрузкиАвтомобиля)  Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите дату загрузки автомобиля");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Водитель) И ВариантДоставки = "Курьер" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Заполните водителя");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЗонаТариф) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите зону доставки");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Автомобиль) И ВариантДоставки = "Курьер" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Выберите автомобиль");
		Возврат;
	КонецЕсли; 
	
	 Если НЕ ЗначениеЗаполнено(НомерПутевогоЛиста) И ВариантДоставки = "Курьер"  Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите дату номер путевого листа");
		Возврат;
	КонецЕсли; 

	ДатаДоставки = ПроверитьДаты();
	Если ТипЗнч(ДатаДоставки)=Тип("Булево") Тогда
		Возврат;
	КонецЕсли; 
	
	Если ДатаЗагрузкиАвтомобиля >ДатаДоставки  Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Дата загрузки должна быть меньше либо равна дате доставки");
		Возврат;
	КонецЕсли; 

	
	//проверим маршрут
	СписокМ = ПроверитьСуществованиеМаршрута(ДатаДоставки);
	Если ТипЗнч(СписокМ)=Тип("Булево") Тогда
		СоздатьМаршрутныйЛистНаСервере(ДатаДоставки);
	Иначе	
		ЗадатьВопросОДобавленииВМаршрут(ДатаДоставки,СписокМ);
	КонецЕсли; 
	
	Если НЕ Элементы.СписокМаршрутов.ТекущиеДанные = неопределено Тогда
		СписокМаршрутовПриАктивизацииСтрокиНаСервере(Элементы.СписокМаршрутов.ТекущиеДанные.Ссылка);
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти 



&НаКлиенте
Процедура ВодительОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Водитель) Тогда
		ПараметрыФормы = Новый Структура("Ключ",Водитель);
		ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаЭлемента", ПараметрыФормы);
	КонецЕсли; 
КонецПроцедуры

//выбор первой записи по одному полю
&НаСервере
Процедура АдресаСкладовСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Представление КАК Представление
	|ПОМЕСТИТЬ ВТ_КИ
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК СтруктурныеЕдиницыКонтактнаяИнформация
	|ГДЕ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Тип = &Тип
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Вид = &Вид
	|	И НЕ СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка.ПометкаУдаления
	|	И НЕ СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КИ.Ссылка КАК Ссылка,
	|	ВТ_КИ.Представление КАК Представление
	|ИЗ
	|	ВТ_КИ КАК ВТ_КИ
	|ГДЕ
	|	(ВТ_КИ.Ссылка, ВТ_КИ.Представление) В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ВТ_КОНТАКТЫ.Ссылка КАК СсылкаКИ,
	|				ВТ_КОНТАКТЫ.Представление КАК ПредставлениеКИ
	|			ИЗ
	|				ВТ_КИ КАК ВТ_КОНТАКТЫ
	|			ГДЕ
	|				ВТ_КОНТАКТЫ.Ссылка = ВТ_КИ.Ссылка)";
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	
	
	РезультатЗапроса = Запрос.Выполнить();
	Т = РезультатЗапроса.Выгрузить();
	
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаСкладов1(Команда)
	АдресаСкладовСервер();
КонецПроцедуры


&НаСервере
Процедура СкладПриИзмененииНаСервере(МассивСклад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК СтруктурныеЕдиницыКонтактнаяИнформация
	|ГДЕ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка В (&МассивСклад)
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Тип = &Тип
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("МассивСклад", МассивСклад);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресСклада =  Выборка.Представление;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад = Новый Массив(1);
		МассивСклад[0]=Склад;
		СкладПриИзмененииНаСервере(МассивСклад);
	КонецЕсли; 	
КонецПроцедуры


&НаСервере
Процедура СписокМаршрутовПриАктивизацииСтрокиНаСервере(СсылкаНаМаршрут)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
	|	ПАК_МаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	ПАК_МаршрутныйЛистЗаказы.Контрагент КАК Контрагент,
	|	ПАК_МаршрутныйЛистЗаказы.Заказ КАК Заказ,
	|	ПАК_МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ПАК_МаршрутныйЛистЗаказы.Доставлен КАК Доставлен,
	|	ПАК_МаршрутныйЛистЗаказы.Контакты КАК Контакты,
	|	ПАК_МаршрутныйЛистЗаказы.ТипОперации КАК ТипОперации,
	|	ПАК_МаршрутныйЛистЗаказы.Менеджер КАК Менеджер,
	|	ПАК_МаршрутныйЛистЗаказы.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ПАК_МаршрутныйЛистЗаказы.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ПАК_МаршрутныйЛистЗаказы.Вес КАК Вес,
	|	ПАК_МаршрутныйЛистЗаказы.АдресДоставки КАК АдресДоставки,
	|	ПАК_МаршрутныйЛистЗаказы.Объем КАК Объем,
	|	ПАК_МаршрутныйЛистЗаказы.Сумма КАК Сумма,
	|	ПАК_МаршрутныйЛистЗаказы.ВесЛома КАК ВесЛома
	|ИЗ
	|	Документ.ПАК_МаршрутныйЛист.Заказы КАК ПАК_МаршрутныйЛистЗаказы
	|ГДЕ
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка = &СсылкаНаДокумент";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаМаршрут);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаДетализация.Очистить();
	ТаблицаДетализация.Загрузить(ТаблицаРезультата);
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутовПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = неопределено Тогда
		СписокМаршрутовПриАктивизацииСтрокиНаСервере(Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры



&НаКлиенте
Процедура Напечатать(Команда)
	МассивВыделенныеСтроки=Элементы.СписокМаршрутов.ВыделенныеСтроки;
	ИмяМенеджераПечати = "Документ.ПАК_МаршрутныйЛист";
	ИменаМакетов ="МаршрутныйЛист";
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати,ИменаМакетов,МассивВыделенныеСтроки,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

&НаСервере
Процедура УбратьИзМаршрутаНаСервере()
	МассивСтрок = Новый Массив();
	ВыделенныеСтроки=Элементы.ТаблицаДетализация.ВыделенныеСтроки;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденныйЗаказ = ТаблицаДетализация.НайтиПоИдентификатору(Строка).Заказ;    
		МассивСтрок.Добавить(НайденныйЗаказ);
	КонецЦикла;
	
	Если  МассивСтрок.Количество()>0 Тогда
		
		ТекМаршрут = Элементы.СписокМаршрутов.ТекущаяСтрока;
		Если  НЕ ЗначениеЗаполнено(ТекМаршрут) Тогда
			Возврат;
		КонецЕсли; 
		
		МаршрутОбъект = ТекМаршрут.ПолучитьОбъект();
		ТабЧасть=МаршрутОбъект.Заказы.Выгрузить();
		Для каждого СтрМассива Из МассивСтрок Цикл
			СтруктураДляПоиска = Новый Структура("Заказ",СтрМассива);
			МассивПустыхСтрок = ТабЧасть.НайтиСтроки(СтруктураДляПоиска); 
			Для каждого Строка Из МассивПустыхСтрок Цикл 
				ТабЧасть.Удалить(Строка); 
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			
			ЗаказНаУдалениеОбъект =  СтрМассива.ПолучитьОбъект();
			ЗаказНаУдалениеОбъект.ПАК_МаршрутныйЛист = Документы.ПАК_МаршрутныйЛист.ПустаяСсылка();
			ЗаказНаУдалениеОбъект.ФИОВодителя="";
			
			
			ЗаказНаУдалениеОбъект.Записать();
			
			Если ПривилегированныйРежим() Тогда
			         УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли; 
		КонецЦикла; 
		УстановитьПривилегированныйРежим(Истина);

		МаршрутОбъект.Заказы.Очистить();
		МаршрутОбъект.Заказы.Загрузить(ТабЧасть);
		МаршрутОбъект.Записать();
		Если ПривилегированныйРежим() Тогда
			         УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 

		СписокМаршрутовПриАктивизацииСтрокиНаСервере(МаршрутОбъект.Ссылка);
		Элементы.СписокМаршрутов.Обновить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзМаршрута(Команда)
	УбратьИзМаршрутаНаСервере();
	ЗачеркнутьВыбранные();
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПоказыватьСамовывоз()
	Если ПоказыватьСамовывоз Тогда
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "И НЕ ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)", " ");
	Иначе	
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "И ЗаказПокупателя.ПАК_МаршрутныйЛист = ЗНАЧЕНИЕ(Документ.ПАК_МаршрутныйЛист.ПустаяСсылка)", 
		"И ЗаказПокупателя.ПАК_МаршрутныйЛист = ЗНАЧЕНИЕ(Документ.ПАК_МаршрутныйЛист.ПустаяСсылка) 
		| И НЕ ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)");
	КонецЕсли; 
КонецПроцедуры

 

&НаСервере
Процедура ПоказыватьВПути()
	Если ВПути Тогда
	     ПоказыватьСамовывоз = Ложь;
		 Элементы.ПоказыватьСамовывоз.Доступность=Ложь;
	Иначе
		 Элементы.ПоказыватьСамовывоз.Доступность=Истина;
	КонецЕсли;

	
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_ОбщийМодуль");
	Если НЕ  ОМ = Неопределено Тогда
		СписокСостояний=ОМ.ПолучитьСписокСостоянийЗаказовПокупателя(ВПути); 
	Иначе
		СписокСостояний = Новый Массив;
	КонецЕсли; 
	Список.Параметры.УстановитьЗначениеПараметра("СписокСостояний", СписокСостояний);
	
КонецПроцедуры



&НаСервере
Процедура ПоказыватьНаличку()
	Если ОтборНаличка Тогда
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "ВТ_ОБЪЕДИНЕНИЕ.Наличка = 1 ИЛИ ВТ_ОБЪЕДИНЕНИЕ.Наличка = 0", "ВТ_ОБЪЕДИНЕНИЕ.Наличка = 1");
	Иначе	
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса,  "ВТ_ОБЪЕДИНЕНИЕ.Наличка = 1", "ВТ_ОБЪЕДИНЕНИЕ.Наличка = 1 ИЛИ ВТ_ОБЪЕДИНЕНИЕ.Наличка = 0");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаличкаПриИзменении(Элемент)
	ПоказыватьНаличку();
	Элементы.Список.Обновить();
КонецПроцедуры



&НаКлиенте
Процедура ПоказыватьСамовывозПриИзменении(Элемент)
	ПоказыватьСамовывоз();
	ВидимостьСамовывоза();
	Элементы.Список.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура ВПутиПриИзменении(Элемент)
	ПоказыватьВПути();
	Элементы.Список.Обновить();
КонецПроцедуры




#КонецОбласти 

&НаСервере
Процедура ПередатьВКлиентскийСервисНаСервере()
	МассивСтрок 	=	Элементы.СписокМаршрутов.ВыделенныеСтроки;
	
	Если  МассивСтрок.Количество()>0 Тогда
		Для каждого СтрМаршрут Из МассивСтрок Цикл
			МаршрутОбъект = СтрМаршрут.ПолучитьОбъект();
			МаршрутОбъект.Состояние = Перечисления.СостояниеМаршрута.ПереданВКлиентскийСервис;
			МаршрутОбъект.Записать();
		КонецЦикла; 
	КонецЕсли;	
	ТаблицаДетализация.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВКлиентскийСервис(Команда)
	ПередатьВКлиентскийСервисНаСервере();
	Элементы.СписокМаршрутов.Обновить();
	Элементы.ТаблицаДетализация.Обновить();
	Оповестить("ПриПередачеВКлиентскийСервис");
КонецПроцедуры


&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	// Вставить содержимое обработчика.
КонецПроцедуры




&НаКлиенте
Процедура СписокПослеУдаления(Элемент)
	ТаблицаМаршрутаПриИзмененииНаСервере();
КонецПроцедуры


#Область УстановкаВодителя

&НаСервере
Процедура ПредварительноНаСервере(МассивПеретаскивания)
	 Если  НЕ ЗначениеЗаполнено(Водитель) И НЕ ЗначениеЗаполнено(СписокПостороннихВодителей) Тогда
	           ОбщегоНазначения.СообщитьПользователю("Выберите какого нибудь водителя");
	 	       Возврат;
	 КонецЕсли;
	
	 Если  ВариантДоставки = "Курьер" Тогда
		 
		 Если НЕ ЗначениеЗаполнено(Водитель) Тогда
			 ОбщегоНазначения.СообщитьПользователю("Выберите водителя");
			 Возврат;
		 Иначе
			 ПредварительноВодитель = 	Водитель;
			 
		 КонецЕсли;
		 
	 Иначе
		 
		 Если НЕ ЗначениеЗаполнено(СписокПостороннихВодителей) Тогда
			 ОбщегоНазначения.СообщитьПользователю("Выберите стороннего водителя");
			 Возврат;
		 Иначе
			 ПредварительноВодитель = 	СписокПостороннихВодителей;
		 КонецЕсли;
		 
		 
	 КонецЕсли; 
	
	 ФИОВодителя = ПредварительноВодитель.Наименование;
	
	Для каждого  ЭлСписка Из МассивПеретаскивания  Цикл
		Если 	ТипЗнч(ЭлСписка.Документ)=Тип("ДокументСсылка.ЗаказПокупателя") ИЛИ
					ТипЗнч(ЭлСписка.Документ)=Тип("ДокументСсылка.ЗаявкаНаЛом") ИЛИ
					ТипЗнч(ЭлСписка.Документ)=Тип("ДокументСсылка.ПеремещениеЗапасов")
			Тогда
			Если ЗначениеЗаполнено(ЭлСписка.Документ.ПАК_МаршрутныйЛист) Тогда
				Продолжить;
			КонецЕсли;
			ДокументОбъект =  ЭлСписка.Документ.ПолучитьОбъект();
			ДокументОбъект.ФИОВодителя = ФИОВодителя; 
			
			
			Если  ТипЗнч(ЭлСписка.Документ)=Тип("ДокументСсылка.ПеремещениеЗапасов") Тогда
				
				Если  ВариантДоставки = "Курьер" Тогда
					ДокументОбъект.Водитель = ПредварительноВодитель;  //Водитель  только в перемещении запасов
					ДокументОбъект.ВодительПосторонний   = Справочники.ФизическиеЛица.ПустаяСсылка();
				Иначе
					ДокументОбъект.Водитель = Справочники.ФизическиеЛица.ПустаяСсылка();  //Водитель  только в перемещении запасов
					ДокументОбъект.ВодительПосторонний   = ПредварительноВодитель;
				КонецЕсли;
			Иначе
				Если  ВариантДоставки = "Курьер" Тогда
					ДокументОбъект.Курьер = ПредварительноВодитель;  //Водитель  только в перемещении запасов
					ДокументОбъект.ВодительПосторонний   = Справочники.ФизическиеЛица.ПустаяСсылка();
				Иначе
					ДокументОбъект.Курьер = Справочники.ФизическиеЛица.ПустаяСсылка();  //Водитель  только в перемещении запасов
					ДокументОбъект.ВодительПосторонний   = ПредварительноВодитель;
				КонецЕсли;
			КонецЕсли;
			 Попытка
			 	 ДокументОбъект.Записать();
			 Исключение
			     ОбщегоНазначения.СообщитьПользователю("Не записан документ "+Строка(ЭлСписка.Документ) +" " +ОписаниеОшибки());
			 КонецПопытки;
						
		КонецЕсли; 		
	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура Предварительно(Команда)
	МассивПеретаскивания = Элементы.Список.ВыделенныеСтроки;
	Если  НЕ МассивПеретаскивания=Неопределено И МассивПеретаскивания.Количество()>0 Тогда
	     ПредварительноНаСервере(МассивПеретаскивания);
		 Элементы.Список.Обновить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПосторонних(Команда)
	ПолучитьПостороннихВодителей();
КонецПроцедуры



#КонецОбласти 

