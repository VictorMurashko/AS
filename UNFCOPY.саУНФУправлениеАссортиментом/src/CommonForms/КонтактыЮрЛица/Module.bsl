

#Область ВспомогательныеФункции

&НаСервере
Функция ВидКИТелефон()
	
	Возврат   Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	
КонецФункции // ()

&НаСервере
Функция ПолучитьСтруктуруТелефона(ЗначениеJSON)
	ОМ_Ремонт = ОбщегоНазначения.ОбщийМодуль("сфУНФ_РемонтБатарей");
	Если НЕ ОМ_Ремонт =Неопределено Тогда
		Возврат ОМ_Ремонт.фПрочитатьJSON(ЗначениеJSON);
	Иначе
		Возврат "";
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Функция ПроверитьСтруктуру()
	ТекстВозврата = "Телефон введен не верно. Введите телефон в формате +375 29 123-34-45";
	
	Если СтруктураТелефона=Неопределено Тогда
		Возврат ТекстВозврата;
	КонецЕсли;	
	
	Если НЕ ТипЗнч(СтруктураТелефона) = Тип("Структура") Тогда	
		Возврат ТекстВозврата;
	КонецЕсли;	
	
	Если НЕ СтруктураТелефона.Свойство("Значение") Тогда
		Возврат ТекстВозврата;
	КонецЕсли;		
	
	Если НЕ СтруктураТелефона.Свойство("Представление") Тогда
		Возврат ТекстВозврата;
	КонецЕсли;	
	
	Если ПустаяСтрока(СтруктураТелефона.Представление)  Тогда
		Возврат ТекстВозврата;
	КонецЕсли;
	
	
	Если Лев(СокрЛП(СтруктураТелефона.Значение),1) ="{" Тогда
		СтруктураПоиска = ПолучитьСтруктуруТелефона(СтруктураТелефона.Значение); 
	Иначе			          
		Возврат  ТекстВозврата;
	КонецЕсли;						
	
	Если НЕ СтруктураПоиска.Свойство("countryCode") Тогда
		Возврат ТекстВозврата;
	КонецЕсли;	
	
	КодСтраны = СокрЛП(СтруктураПоиска.countryCode);
	Если ПустаяСтрока(КодСтраны) ИЛИ  Лев(КодСтраны,1) <>"+" Тогда
		Возврат "Код страны должен начинаться с +";
	КонецЕсли;	
	
	Если НЕ СтруктураПоиска.Свойство("areaCode") Тогда
		Возврат ТекстВозврата;
	КонецЕсли;	
	
	КодГорода = СокрЛП(СтруктураПоиска.areaCode);
	Если ПустаяСтрока(КодГорода)  Тогда
		Возврат "Нужно ввести код города"
	КонецЕсли;	
	
	
	Если НЕ СтруктураПоиска.Свойство("number") Тогда
		Возврат ТекстВозврата;
	КонецЕсли;	
	
	НомерТел = СокрЛП(СтруктураПоиска.number);
	Если ПустаяСтрока(НомерТел)  Тогда
		Возврат ТекстВозврата;
	КонецЕсли;	
	
	Если СтрДлина(ПреобразоватьТелефон(НомерТел)) <>7 Тогда
		Возврат "В номере должно быть 7 цифр"
	КонецЕсли;	
	
	Дефис=СтрНайти(НомерТел,"-");
	
	Если Дефис>0 И Дефис<=3 Тогда
		//Номер телефона должен начинаться с 123- или без дефиса. Неправильно 12-3 
		Возврат ТекстВозврата;;
	КонецЕсли;
	
	Возврат "ОК";
КонецФункции // ()



&НаСервере 
Функция  НайтиКонтрагентаПоНомеруТелефона(Тел)
	СписокКонтрагентов = Новый СписокЗначений;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
	|	КонтрагентыКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Вид = &Вид
	|	И КонтрагентыКонтактнаяИнформация.Ссылка.ВидКонтрагента = &ФизЛицо
	|	И КонтрагентыКонтактнаяИнформация.НомерТелефонаБезКодов ПОДОБНО ""%"" + &ТриСимвола + ""%""";
	
	Запрос.УстановитьПараметр("ТриСимвола", ЛЕВ(Тел,3));
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	Запрос.УстановитьПараметр("ФизЛицо", Перечисления.ВидыКонтрагентов.ФизическоеЛицо);
	
	ТелПоиска = ПреобразоватьТелефон(Тел); 
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка =  РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерТелефонаБезКодов=Выборка.НомерТелефонаБезКодов;
		Если ПРАВ(ПреобразоватьТелефон(НомерТелефонаБезКодов),7) = ТелПоиска Тогда
			СписокКонтрагентов.Добавить(Выборка.Ссылка);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат  СписокКонтрагентов;
КонецФункции


&НаКлиенте
Процедура СообщитьНеправильныйТелефон(Тел)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Ничего не понимаю! "+Тел;
	Сообщение.Сообщить();
КонецПроцедуры

&НаСервере
Функция ПреобразоватьТелефон(Тел)
	Тел = СокрЛП(Тел);
	Тел = СтрЗаменить(Тел,"-","");
	Тел = СтрЗаменить(Тел," ","");
	Возврат Тел;
	
КонецФункции // ()



#КонецОбласти 

#Область ПоискПоТелефону

&НаКлиенте
Процедура НомерТелефонаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект);
	П = Новый Структура("ВидКонтактнойИнформации",ВидКИТелефон());
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона", П, Элементы.НомерТелефона,
	УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект);
	П = Новый Структура("ВидКонтактнойИнформации",ВидКИТелефон());
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона", П, Элементы.НомерТелефона,
	УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	СтруктураТелефона = ВыбранноеЗначение;
	
	Флаг = ПроверитьСтруктуру();
	Если Флаг <>"ОК"  Тогда
		СообщитьНеправильныйТелефон(Флаг);
		НомерТелефона="";
		Возврат;
	КонецЕсли; 
	
	НомерТелефона=СтруктураТелефона.Представление;	
	СписокКонтрагентов = НайтиКонтрагентаПоНомеруТелефона(СтруктураПоиска.number);
	Если НЕ СписокКонтрагентов.Количество() =0 тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияСозданияКонтрагента",ЭтаФорма, );
		ПоказатьВыборИзСписка(ОписаниеОповещения,СписокКонтрагентов,Элементы.НомерТелефона);
	Иначе	
		ТекстВопроса = "По телефону клиент не найден. Хотите ввести нового клиента?";
		ЗадатьВопросОВводеНовогоКлиента(ТекстВопроса);
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПослеОкончания(Результат,ДопПараметры)  Экспорт
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
	         Возврат;
	КонецЕсли; 
	Если Результат.Свойство("Контрагент") Тогда
		Возврат;
	КонецЕсли;
		 
	СтруктураТелефона = Результат;
	Флаг = ПроверитьСтруктуру();
	Если Флаг <>"ОК"  Тогда
		СообщитьНеправильныйТелефон(Флаг);
		НомерТелефонаКлиента="";
		Возврат;
	КонецЕсли; 
	
	НомерТелефонаКлиента=СтруктураТелефона.Представление;	
КонецПроцедуры

#КонецОбласти 


#Область ВводМобильного

&НаКлиенте
Процедура НомерТелефонаКлиентаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект);
	
	П = Новый Структура("ВидКонтактнойИнформации",ВидКИТелефон());
	
	Флаг =  ПроверитьСтруктуру();
	Если Флаг ="ОК" Тогда
		П.Вставить("Значение",СтруктураТелефона.Значение);
	КонецЕсли; 
	
	
	
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона", П, Элементы.НомерТелефонаКлиента,
	УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект);
	П = Новый Структура("ВидКонтактнойИнформации",ВидКИТелефон());
	
	Флаг =  ПроверитьСтруктуру();
	Если Флаг ="ОК" Тогда
		П.Вставить("Значение",СтруктураТелефона.Значение);
	КонецЕсли; 
	
	
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона", П, Элементы.НомерТелефонаКлиента,
	УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаКлиентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	СтруктураТелефона = ВыбранноеЗначение;
	
	Флаг = ПроверитьСтруктуру();
	Если Флаг <>"ОК"  Тогда
		СообщитьНеправильныйТелефон(Флаг);
		НомерТелефонаКлиента="";
		Возврат;
	КонецЕсли; 
	
	НомерТелефонаКлиента=СтруктураТелефона.Представление;	
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаКлиентаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект);
	П = Новый Структура("ВидКонтактнойИнформации",ВидКИТелефон());
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона", П, Элементы.НомерТелефонаКлиента,
	УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры



#КонецОбласти 

#Область ВводНовогоКлиента

&НаКлиенте
Процедура ПослеЗакрытияВопросаОНовомКлиенте(Результат, Параметры) Экспорт
	ОчиститьСообщения();
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		НовыйКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОСуществующемКлиенте(Результат, Параметры) Экспорт
	ОчиститьСообщения();
	Если Результат = "Выбрать" Тогда
		ОповеститьОВыборе(Параметры);
	Иначе
		НовыйКлиент();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОВводеНовогоКлиента(ТекстВопроса)
	Режим = РежимДиалогаВопрос.ДаНет;
	П = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОНовомКлиенте", ЭтотОбъект, П);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещенияСозданияКонтрагента(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора=Неопределено Тогда
		ТекстВопроса = "Вы ничего не выбрали. Хотите ввести нового клиента?";
		ЗадатьВопросОВводеНовогоКлиента(ТекстВопроса);
	Иначе
		ТекстВопроса = "Выбрать "+СТРОКА(ЗначениеВыбора)+" или  хотите ввести нового клиента?";
		//Режим = РежимДиалогаВопрос.ДаНет;
		Режим =  Новый СписокЗначений;
		Режим.Добавить("Выбрать","Выбрать");
		Режим.Добавить("Нового","Ввести нового");
		П = Новый Структура("Контрагент",ЗначениеВыбора);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОСуществующемКлиенте", ЭтотОбъект, П);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);	
	КонецЕсли; 
	
	
КонецПроцедуры




&НаСервере
Процедура НовыйКлиент()
	Элементы.СтраницаНомерТелефона.Видимость=Ложь;
	Элементы.СтраницаНовыйКонтрагент.Видимость=Истина;
	
	Флаг = ПроверитьСтруктуру();
	Если Флаг ="ОК"  Тогда
		
		НомерТелефонаКлиента=СтруктураТелефона.Представление;
		
	КонецЕсли; 
	
	Пол = Перечисления.ПолФизическогоЛица.Мужской;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФИО()
	ОМ_Ремонт = ОбщегоНазначения.ОбщийМодуль("сфУНФ_РемонтБатарей");
	Если НЕ ОМ_Ремонт =Неопределено Тогда
		Возврат ОМ_Ремонт.ФИО(Фамилия,Имя,Отчество);
	Иначе
		Возврат "";
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Функция ПроверитьМыло()
	ОМ_Ремонт = ОбщегоНазначения.ОбщийМодуль("сфУНФ_РемонтБатарей");
	Если НЕ ОМ_Ремонт =Неопределено Тогда
		Возврат ОМ_Ремонт.EmailValid(Мыло)
	Иначе
		Возврат Истина;
		
	КонецЕсли; 
КонецФункции // 

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	ФИО=ПолучитьФИО();
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	ФИО=ПолучитьФИО();
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	ФИО=ПолучитьФИО();
КонецПроцедуры

&НаСервере
Функция ПроверитьОбязательныеПоля()
	Если ПустаяСтрока(НомерТелефонаКлиента) Тогда
		Возврат "Не введен мобильный телефон";
	КонецЕсли;
	Если ПустаяСтрока(Фамилия) Тогда
		Возврат "Не введена фамилия";
	КонецЕсли;
	Если ПустаяСтрока(Имя) Тогда
		Возврат "Не введено имя";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Пол) Тогда
		Возврат "Не введен пол клиента";
	КонецЕсли;
	
	Возврат "ОК"
КонецФункции // ()


&НаСервере
Функция ВвестиНовогоНаСервере()
	УстановитьПривилегированныйРежим(Истина);
	ГруппаСЦ=Справочники.Контрагенты.НайтиПоНаименованию("Клиенты РТТ");
	Если ГруппаСЦ = Справочники.Контрагенты.ПустаяСсылка() Тогда
		ГруппаСЦОбъект = Справочники.Контрагенты.СоздатьГруппу();
		ГруппаСЦОбъект.Наименование ="Клиенты РТТ";
		ГруппаСЦОбъект.Записать();
		ГруппаСЦ=ГруппаСЦОбъект.Ссылка;
	КонецЕсли; 
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	
	Если НЕ ГруппаСЦ =Справочники.Контрагенты.ПустаяСсылка() Тогда
		НовыйКонтрагент.Родитель =  ГруппаСЦ;
	КонецЕсли; 
	
	НовыйКонтрагент.Наименование 				= 	Наименование;
	НовыйКонтрагент.НаименованиеПолное 	= 	НаименованиеПолное;
	НовыйКонтрагент.Покупатель 					= 	Истина;
	НовыйКонтрагент.ВидКонтрагента 			= 	Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	НовыйКонтрагент.ИНН								=	ИНН;				
	
	НовыйКонтрагент.ФИО = ФИО;
	НовыйКонтрагент.Комментарий = "Создан  программно при оформлении продажи на РТТ ";
	НовыйКонтрагент.ОбменДанными.Загрузка = Истина;
	НовыйКонтрагент.ВестиРасчетыПоЗаказам = Истина;
	НовыйКонтрагент.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	НовыйКонтрагент.ГруппаДоступа = Справочники.ГруппыДоступаКонтрагентов.ГруппаДоступаПоУмолчанию();
	НовыйКонтрагент.ВалютаРасчетовПоУмолчанию = Константы.НациональнаяВалюта.Получить();
	НовыйКонтрагент.СпособЗачетаПредоплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаПредоплатыПоУмолчанию();
	НовыйКонтрагент.СпособРазнесенияОплатыПоУмолчанию = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособРазнесенияОплатыПоУмолчанию();
	
	НовыйКонтрагент.ВестиРасчетыПоДоговорам              	=	Истина;
	
	НовыйКонтрагент.СтатьяДДСПоУмолчанию                  	=	Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	НовыйКонтрагент.СчетУчетаАвансовПокупателя           	=	ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	НовыйКонтрагент.СчетУчетаРасчетовСПокупателем     	=	ПланыСчетов.Управленческий.РасчетыСПокупателями;
	НовыйКонтрагент.СчетУчетаРасчетовСПоставщиком     =	ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	НовыйКонтрагент.СчетУчетаАвансовПоставщику			=	ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	НовыйКонтрагент.Пол 													= 	Пол;
		
	
	НовыйКонтрагент.КонтактнаяИнформация.Очистить();
	
		
	ТелКИ 											= 	НовыйКонтрагент.КонтактнаяИнформация.Добавить();
	ТелКИ.Тип 									= 	Перечисления.ТипыКонтактнойИнформации.Телефон;
	ТелКИ.Вид 									= 	Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ТелКИ.ЗначенияПолей 					= 	СтруктураТелефона.КонтактнаяИнформация;
	ТелКИ.Значение 							=  СтруктураТелефона.Значение;
	
	НовыйКонтрагент.НомерТелефонаДляПоиска  = ТелКИ.Представление;
	НовыйКонтрагент.СтранаРегистрации  = Справочники.СтраныМира.НайтиПоКоду("112");
	
	Если ТипЗнч(СтруктураПоиска)=Тип("Структура") Тогда
		Если СтруктураПоиска.Свойство("value") И СтруктураПоиска.Свойство("number") И СтруктураПоиска.Свойство("countryCode") Тогда
			ТелКИ.НомерТелефона 					= 	СтруктураПоиска.value;
			ТелКИ.НомерТелефонаБезКодов 	=	СтруктураПоиска.number;
			ТелКИ.Представление  					=  СтруктураПоиска.value;
		КонецЕсли; 
		
		Если СтруктураПоиска.countryCode="+375" Тогда
			НовыйКонтрагент.СтранаРегистрации  = Справочники.СтраныМира.НайтиПоКоду("112");
		ИначеЕсли СтруктураПоиска.countryCode="+7" Тогда
			НовыйКонтрагент.СтранаРегистрации  =Справочники.СтраныМира.Россия;
		КонецЕсли; 
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Мыло) Тогда
		МылоКИ = НовыйКонтрагент.КонтактнаяИнформация.Добавить();
		МылоКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		МылоКИ.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		МылоКИ.АдресЭП = Мыло;	
		МылоКИ.Представление = Мыло;  
		НовыйКонтрагент.АдресЭПДляПоиска  =Мыло; 
	КонецЕсли;
	НовыйКонтрагент.ДатаСоздания  = ТекущаяДата();
	
	СвойствоДоп = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Сегмент");
	Если СвойствоДоп<>ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка() Тогда
		РемонтАКБ = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("Торговля",Ложь);
		Если  РемонтАКБ = Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка() Тогда
			РемонтАКБОбъект = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
			РемонтАКБОбъект.Наименование ="Торговля"; 
			РемонтАКБОбъект.ПолноеНаименование =  "Торговля"; 
			РемонтАКБОбъект.Владелец =  СвойствоДоп;
			РемонтАКБОбъект.Записать();
			РемонтАКБ = РемонтАКБОбъект.Ссылка;
		КонецЕсли; 
		НовыйКонтрагент.ДополнительныеРеквизиты.Очистить();;
		НовоеДопСвойство = НовыйКонтрагент.ДополнительныеРеквизиты.Добавить();
		НовоеДопСвойство.Свойство =  СвойствоДоп;
		НовоеДопСвойство.Значение = РемонтАКБ;
		НовоеДопСвойство.ТекстоваяСтрока =  "Торговля";
	КонецЕсли; 
	НовыйКонтрагентСсылка = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор);
    НовыйКонтрагент.УстановитьСсылкуНового(НовыйКонтрагентСсылка);
	
	//НовыйКонтрагентСсылка =	НовыйКонтрагент.Ссылка;
	//Контактное лицо
	КонтактОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
	КонтактОбъект.ДатаСоздания                     		=	НовыйКонтрагентСсылка.ДатаСоздания;
	КонтактОбъект.Комментарий                      		=	НовыйКонтрагентСсылка.Комментарий;
	КонтактОбъект.НомерТелефонаДляПоиска       	=	НовыйКонтрагентСсылка.НомерТелефонаДляПоиска;
	КонтактОбъект.Ответственный                    		=	НовыйКонтрагентСсылка.Ответственный;
	КонтактОбъект.Пол                              				=	НовыйКонтрагентСсылка.Пол;
	КонтактОбъект.Наименование 							= 	ФИО;
	КонтактОбъект.Записать();
	
	КонтактОбъект.КонтактнаяИнформация.Очистить();
	ТелКИ 													= 	КонтактОбъект.КонтактнаяИнформация.Добавить();
	ТелКИ.Тип 											= 	Перечисления.ТипыКонтактнойИнформации.Телефон;
	ТелКИ.Вид 											= 	Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
	Если ТипЗнч(СтруктураПоиска)=Тип("Структура") Тогда
		Если СтруктураПоиска.Свойство("value") И СтруктураПоиска.Свойство("number") И СтруктураПоиска.Свойство("countryCode") Тогда
			
			ТелКИ.НомерТелефона 							= 	СтруктураПоиска.value;
			ТелКИ.НомерТелефонаБезКодов 			=	СтруктураПоиска.number;
			ТелКИ.Представление  							=  СтруктураПоиска.value;
			
			ТелКИ.ЗначенияПолей 							= 	СтруктураТелефона.КонтактнаяИнформация;
			ТелКИ.Значение 									=  СтруктураТелефона.Значение;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Мыло) Тогда
		МылоКИ 											= КонтактОбъект.КонтактнаяИнформация.Добавить();
		МылоКИ.Тип 										= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		МылоКИ.Вид 									= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		МылоКИ.АдресЭП 							= Мыло;	
		МылоКИ.Представление 					= Мыло;  
		КонтактОбъект.АдресЭПДляПоиска   = Мыло;
	КонецЕсли;
	КонтактОбъект.Записать();
	
	РегистрыСведений.СвязиКонтрагентКонтакт.НоваяСвязь(НовыйКонтрагентСсылка, КонтактОбъект.Ссылка, "",,);
	
	НовыйКонтрагент.КонтактноеЛицо                    =  КонтактОбъект.Ссылка;
	
	
	НовыйКонтрагент.СформироватьОсновныеСведения(); 
	Попытка
	      НовыйКонтрагент.Записать();
	Исключение
	       Возврат Ложь;
	КонецПопытки;

	УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(НовыйКонтрагент.Ссылка,ЮрАдрес,
	Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,,Истина);

	
	Контрагент = НовыйКонтрагент.Ссылка;
	СоздатьНовыйДоговор(Контрагент);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Контрагент;
КонецФункции

&НаСервере
Функция СоздатьНовыйДоговор(Контрагент)
    НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();		
	ОрганизацияПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
		НовыйДоговор.Организация = ОрганизацияПоУмолчанию;
	Иначе
		НовыйДоговор.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	НовыйДоговор.Владелец = Контрагент;
	НовыйДоговор.Наименование = "договор с "+СокрЛП(Контрагент.Наименование);
	НовыйДоговор.ВалютаРасчетов                                      		=    Константы.НациональнаяВалюта.Получить();
	НовыйДоговор.ВидДоговора                                           		=    Перечисления.ВидыДоговоров.СПокупателем;
	НовыйДоговор.ДатаДоговора                                          		=    ТекущаяДата();
	НовыйДоговор.Комментарий                                           		=    "Введен при покупке из РТТ";
	НовыйДоговор.НомерДоговора                                       		=    Контрагент.Код;
	НовыйДоговор.СпособЗаполненияСтавкиНДС                 		=   Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически;
	НовыйДоговор.СпособЗачетаПредоплатыПоУмолчанию    		=    Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	НовыйДоговор.СпособРазнесенияОплатыПоУмолчанию    	=    Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	НовыйДоговор.СрокДействия                                           		=    Дата(1,1,1);
	НовыйДоговор.СрокОплатыПокупателя                               	=   3;
	НовыйДоговор.СтатьяДДСПоУмолчанию                             	=    Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	 
	ВидЦенПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнойВидЦенПродажи");
	
	Если ЗначениеЗаполнено(ВидЦенПродажи) Тогда
		НовыйДоговор.ВидЦен = ВидЦенПродажи;
	КонецЕсли;
    НовыйДоговор.ПакОтветственный   =   Контрагент.Ответственный;

	Попытка
	
		НовыйДоговор.Записать();
	    НаборЗаписей=РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(НовыйДоговор.Ссылка.Организация);
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		НаборЗаписей.Отбор.ВидДоговора.Установить(НовыйДоговор.Ссылка.ВидДоговора); 
		
		
		
		
		НаборЗаписей.Записать();
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация          	=    НовыйДоговор.Ссылка.Организация;
		Запись.Контрагент             	=    Контрагент;
		Запись.ВидДоговора         	=    НовыйДоговор.Ссылка.ВидДоговора;
		Запись.Договор                 	=    НовыйДоговор.Ссылка;
		
		НаборЗаписей.Записать();

		
	Исключение
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Договор не удалось записать.'"),, ,, Отказ);
	КонецПопытки;			
		
	

КонецФункции // ()


&НаКлиенте
Процедура ВвестиНового(Команда)
	Флаг = ПроверитьСтруктуру();
	Если Флаг <>"ОК"  Тогда
		СообщитьНеправильныйТелефон(Флаг);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Мыло) И НЕ ПроверитьМыло() Тогда
		СообщитьНеправильныйТелефон("Не корректно введен e-mail");
		Возврат;
	КонецЕсли;
	
	Флаг = ПроверитьОбязательныеПоля();
	Если Флаг <>"ОК"  Тогда
		СообщитьНеправильныйТелефон(Флаг);
		Возврат;
	КонецЕсли;
	
	
	Контрагент=ВвестиНовогоНаСервере();
	Если ТипЗнч(Контрагент) = Тип("Булево") Тогда
	      ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось создать контрагента.'"),, ,, );
	КонецЕсли; 
	
	
	СтруктураКонтрагента = Новый Структура("Контрагент",Контрагент); 
	 //ОповеститьОВыборе(СтруктураКонтрагента);
	 
	  Оповестить("ВведенКонтрагент",СтруктураКонтрагента);
	  Закрыть();
КонецПроцедуры


#КонецОбласти 





&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.СтраницаНомерТелефона.Видимость=Ложь;
	Элементы.СтраницаНовыйКонтрагент.Видимость=Истина;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект);
	П = Новый Структура("ВидКонтактнойИнформации",ВидКИТелефон());
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона", П, Элементы.НомерТелефона,
	УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ПолучитьКодыСтраныИГорода()
	СписокКодовГорода = Новый Массив;
	СписокКодовГорода.Добавить("25");
	СписокКодовГорода.Добавить("29");
	СписокКодовГорода.Добавить("33");
	СписокКодовГорода.Добавить("44");
	
	КодыСтраныИГорода = Новый Структура("КодСтраны,КодГорода,СписокКодовГорода","+375","33",СписокКодовГорода);
	Возврат КодыСтраныИГорода;
	
КонецФункции // ()


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ИНН") Тогда
		ИНН 								=  Параметры.ИНН;
		Наименование 				=  Параметры.Наименование;
		НаименованиеПолное 	=  Параметры.НаименованиеПолное;
		ЮрАдрес 						=  Параметры.ЮрАдрес;
		
		ХранилищеОбщихНастроек.Сохранить("Обработка.ВводКонтактнойИнформации.Форма.ВводТелефона", "КодыСтраныИГорода", ПолучитьКодыСтраныИГорода());
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Что то пошло не так.'"),, ,, Истина);
		Закрыть();
	КонецЕсли; 
КонецПроцедуры







