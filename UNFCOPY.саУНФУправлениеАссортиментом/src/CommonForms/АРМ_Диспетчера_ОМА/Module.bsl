#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата",,,"ПриОкончанииВыбораПериода");
КонецПроцедуры



&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект,Список);
	
КонецПроцедуры


&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Статус", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьСодержаниеСписка(ТаблицаСпискаПриемки,НужныйСписок)
	Схема = Элементы[НужныйСписок].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы[НужныйСписок].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаСпискаПриемки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат  ТаблицаСпискаПриемки;
КонецФункции // ()

#КонецОбласти

#Область Кнопки

&НаСервере
Процедура ВзятьВРаботуНаСервере(МассивПеретаскивания,Состояние)
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(МассивПеретаскивания) = Тип("Массив") ИЛИ  ТипЗнч(МассивПеретаскивания) = Тип("ТаблицаЗначений") Тогда
		Узел =СписокНастроек.УзелОбмена;
		Для каждого  СтрМассива Из МассивПеретаскивания Цикл
			Если НЕ СтрМассива.СостояниеЗаказа = СписокНастроек.СостояниеНовый Тогда
				Продолжить;
			КонецЕсли; 
			ЗаказОбъект = СтрМассива.ПолучитьОбъект();
			ЗаказОбъект.СостояниеЗаказа  = Состояние;
			Попытка
				ЗаказОбъект.Записать();
				Если  НЕ ПланыОбмена.ИзменениеЗарегистрировано(Узел,ЗаказОбъект.Ссылка) Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(Узел,ЗаказОбъект.Ссылка);		
				КонецЕсли; 
				
			Исключение
				УстановитьПривилегированныйРежим(Ложь);
				ВызватьИсключение("Не возможно изменить статус заказа: "+Строка(СтрМассива) +" " + ОписаниеОшибки());
				Возврат;
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьВРаботу(Команда)
	МассивПеретаскивания = Элементы.Список.ВыделенныеСтроки;
	ВзятьВРаботуНаСервере(МассивПеретаскивания,СписокНастроек.СостояниеВРаботе);
	Элементы.Список.Обновить();
	СписокДетали.Очистить();
	
КонецПроцедуры


&НаКлиенте
Процедура Отклонить(Команда)
	МассивПеретаскивания = Элементы.Список.ВыделенныеСтроки;
	ВзятьВРаботуНаСервере(МассивПеретаскивания,СписокНастроек.СостояниеОтклонен);
	Элементы.Список.Обновить();
	СписокДетали.Очистить();
КонецПроцедуры

#КонецОбласти 


#Область Детали

&НаСервере
Процедура СписокПриАктивизацииСтрокиНаСервере(СсылкаЗаказ)
	СписокДетали.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЗаказПокупателяЗапасы.Номенклатура.Вес, 0) * ЗаказПокупателяЗапасы.Количество КАК Вес,
	|	ЗаказПокупателяЗапасы.Номенклатура.Длина КАК Длина,
	|	ЗаказПокупателяЗапасы.Номенклатура.Ширина КАК Ширина,
	|	ЗаказПокупателяЗапасы.Номенклатура.Высота КАК Высота,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаЗаказ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокДетали.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = неопределено Тогда
		СсылкаЗаказ = Элемент.ТекущиеДанные.Ссылка;
		СписокПриАктивизацииСтрокиНаСервере(СсылкаЗаказ);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если Параметры.Свойство("ДатаНачала") Тогда
		ПараметрыДатаНачала = НачалоДня(Параметры.ДатаНачала);
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ПараметрыДатаНачала);
		СписокПриемки.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ПараметрыДатаНачала);
		СписокВозвраты.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ПараметрыДатаНачала);
		
		ОтборПериод.ДатаНачала =	Параметры.ДатаНачала; 
		
	КонецЕсли; 
	Если Параметры.Свойство("ДатаОкончания") Тогда
		ПараметрыДатаОкончания = КонецДня(Параметры.ДатаОкончания);
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ПараметрыДатаОкончания);
		СписокПриемки.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ПараметрыДатаОкончания);
		СписокВозвраты.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ПараметрыДатаОкончания);
		
		ОтборПериод.ДатаОкончания =	Параметры.ДатаОкончания;
	КонецЕсли; 
	
	ОМ =ОбщегоНазначения.ОбщийМодуль("саУНФ_РаботаСОМА");
	Если  ОМ=Неопределено Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли; 	  
	
	УстановитьОтборТекущиеДела();
	
	СписокНастроек= ОМ.ПолучитьСтруктураНастроекОМА(); 
	Список.Параметры.УстановитьЗначениеПараметра("ВидЗаказа",СписокНастроек.ВидЗаказаОМА);
	Список.Параметры.УстановитьЗначениеПараметра("Контрагент",СписокНастроек.Поставщик);
	
	СписокПриемки.Параметры.УстановитьЗначениеПараметра("ВидЗаказаПриемка",СписокНастроек.СостояниеНаРЦ);
	СписокПриемки.Параметры.УстановитьЗначениеПараметра("Контрагент",СписокНастроек.Поставщик);
	
	ВидЗаказаВозврата	=	Новый Массив;
	ВидЗаказаВозврата.Добавить(СписокНастроек.СостояниеВозврат);
	ВидЗаказаВозврата.Добавить(СписокНастроек.СостояниеЧастичныйВозврат);
	
	
	СписокВозвраты.Параметры.УстановитьЗначениеПараметра("ВидЗаказаВозврата",ВидЗаказаВозврата);
	СписокВозвраты.Параметры.УстановитьЗначениеПараметра("Контрагент",СписокНастроек.Поставщик);
	
	Отклонен =  СписокНастроек.СостояниеОтклонен;
	ВосстановитьНастройкиОтборов();	
	СписокДетали.Очистить();
КонецПроцедуры


&НаСервере
Процедура ПередЗакрытиемНаСервере()
	СохранитьНастройкиОтборов();
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПередЗакрытиемНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ПриОкончанииВыбораПериода" Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОтборПериод.ДатаНачала);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ОтборПериод.ДатаОкончания);
		
		СписокПриемки.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОтборПериод.ДатаНачала);
		СписокПриемки.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",КонецМесяца(ДобавитьМесяц(ОтборПериод.ДатаНачала,1)));
		
		СписокВозвраты.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОтборПериод.ДатаНачала);
		СписокВозвраты.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",КонецМесяца(ДобавитьМесяц(ОтборПериод.ДатаНачала,1)));
		
		
	КонецЕсли; 
	
КонецПроцедуры

#Область ПеремещениеЗапасов

&НаСервере
Процедура СоздатьПеремещениеНаСервере(НужныйСписок)
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_АтозаказВызовСервера");
	СтруктураЗаказа=ОМ.ОбщиеРеквизитыЗаказа(СписокНастроек.Организация);
	ТаблицаСпискаПриемки = Новый ТаблицаЗначений;
	ПолучитьСодержаниеСписка(ТаблицаСпискаПриемки,НужныйСписок);
	МассивКолонка		=	ТаблицаСпискаПриемки.ВыгрузитьКолонку("Точка");
	МассивСсылок		=	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКолонка);
	
	Для каждого СтрМассивСсылок Из  МассивСсылок Цикл
		СписокПоиска = Новый Структура("Точка", СтрМассивСсылок);
		
		МассивСпискаПриемки = 	ТаблицаСпискаПриемки.НайтиСтроки(СписокПоиска);
		Если МассивСпискаПриемки.Количество()>0 Тогда
			Если НужныйСписок="СписокПриемки" Тогда
				СоздатьПеремещенияВызовСервера(МассивСпискаПриемки);	
			ИначеЕсли НужныйСписок="СписокВозвраты" Тогда
				СоздатьВозвратыВызовСервера(МассивСпискаПриемки);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПолучитьПеремещения(СтруктурнаяЕдиницаПолучатель,ДатаОтгрузки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеремещениеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеЗапасов КАК ПеремещениеЗапасов
	|ГДЕ
	|	НЕ ПеремещениеЗапасов.ПометкаУдаления
	|	И ПеремещениеЗапасов.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ПеремещениеЗапасов.СтруктурнаяЕдиницаПолучатель = &СтруктурнаяЕдиницаПолучатель
	|	И ПеремещениеЗапасов.НаправлениеДеятельности	= &НаправлениеДеятельности
	|	И НАЧАЛОПЕРИОДА(ПеремещениеЗапасов.ДатаОтгрузки, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОтгрузки, ДЕНЬ)";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СписокНастроек.Склад);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиницаПолучатель", СтруктурнаяЕдиницаПолучатель);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", СписокНастроек.Направление);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузки);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьЗаявкиНаВывоз(Перемещение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаНаЛом.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаЛом КАК ЗаявкаНаЛом
	|ГДЕ
	|	ЗаявкаНаЛом.ТипЗаявки = &ТипЗаявки
	|	И НЕ ЗаявкаНаЛом.ЗабратьУКлиента
	|	И ЗаявкаНаЛом.СтруктурнаяЕдиницаРезерв = &Точка
	|	И ЗаявкаНаЛом.СтруктурнаяЕдиницаПродажи = &СкладВозврата
	|	И ЗаявкаНаЛом.ДокументОснование = &Перемещение
	|	И НЕ ЗаявкаНаЛом.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТипЗаявки", Перечисления.ТипыЗаявкиНаЛом.ОМА);
	Запрос.УстановитьПараметр("Точка", Перемещение.СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("СкладВозврата", Перемещение.СтруктурнаяЕдиницаПолучатель);
	Запрос.УстановитьПараметр("Перемещение", Перемещение);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	
	
КонецФункции




&НаСервере
Функция ОпределитьБлижайшуюДатуДоставки(График)
	Запрос = Новый Запрос;
	Запрос.Текст="
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ГрафикиРаботыМагазиновИФилиалов.ВремяНачала, ДЕНЬ))   КАК Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыМагазиновИФилиалов КАК ГрафикиРаботыМагазиновИФилиалов
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ГрафикиРаботыМагазиновИФилиалов.ВремяНачала, ДЕНЬ) > НАЧАЛОПЕРИОДА(&ДатаОбработки, ДЕНЬ)
	|	И ГрафикиРаботыМагазиновИФилиалов.ЧасыРаботы > 0
	|	И ГрафикиРаботыМагазиновИФилиалов.ГрафикРаботы = &ГрафикРаботы
	|	И НЕ ГрафикиРаботыМагазиновИФилиалов.ГрафикРаботы.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("ГрафикРаботы",График);
	Запрос.УстановитьПараметр("ДатаОбработки",ТекущаяДата());
	
	
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТекущаяДата()+86400;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Дата;
	КонецЕсли; 
	
	
	
КонецФункции // ()

&НаСервере
Функция СоздатьПеремещенияВызовСервера(МассивСпискаПриемки)  
	
	
	НачатьТранзакцию();
	Попытка
		
		
		
		УстановитьПривилегированныйРежим(Истина);
		БлижайшаяДатаДоставки =  ОпределитьБлижайшуюДатуДоставки(МассивСпискаПриемки[0].Точка.саУНФ_ГрафикДоставки) ;
		Перемещение=ПолучитьПеремещения(МассивСпискаПриемки[0].Точка,БлижайшаяДатаДоставки);
		
		Если Перемещение<>Неопределено Тогда
			ПеремещениеОбъект =  Перемещение.ПолучитьОбъект();
			ПеремещениеОбъект.Запасы.Очистить();
		Иначе	
			ПеремещениеОбъект = Документы.ПеремещениеЗапасов.СоздатьДокумент();
		КонецЕсли; 
		ПеремещениеОбъект.Автор = Пользователи.ТекущийПользователь();
		ОМ=ОбщегоНазначения.ОбщийМодуль("саУНФ_АтозаказВызовСервера");
		Если  НЕ ОМ=Неопределено Тогда
			ПеремещениеОбъект.АдресДоставки  = саУНФ_АтозаказВызовСервера.ПолучитьАдрес(МассивСпискаПриемки[0].Точка);
		КонецЕсли; 
		ПеремещениеОбъект.ЗонаТариф	=  МассивСпискаПриемки[0].Точка. НаправлениеДоставки;
		ПеремещениеОбъект.ВидОперации	= Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение;
		ПеремещениеОбъект.Дата = НачалоДня(ТекущаяДата())+8*3600;
		ПеремещениеОбъект.ДатаОтгрузки	= НачалоДня(БлижайшаяДатаДоставки)+9*3600;
		ПеремещениеОбъект.Комментарий	= "Введено из диспетчера ОМА";
		ПеремещениеОбъект.НаправлениеДеятельности	= СписокНастроек.Направление;
		ПеремещениеОбъект.Организация	= СписокНастроек.Организация;
		ПеремещениеОбъект.СтруктурнаяЕдиница	=   СписокНастроек.Склад;
		ПеремещениеОбъект.СтруктурнаяЕдиницаПолучатель	=  МассивСпискаПриемки[0].Точка;
		ПеремещениеОбъект.СтруктурнаяЕдиницаРеципиент	=  МассивСпискаПриемки[0].Точка;
		ПеремещениеОбъект.ХозяйственнаяОперация	 = Справочники.ХозяйственныеОперации.Перемещение;
		ПеремещениеОбъект.ПоложениеЗаказаПокупателя  =   Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Для каждого  Строка Из  МассивСпискаПриемки Цикл
			Заказ = Строка.Ссылка;
			Для каждого СтрЗаказ Из Заказ.Запасы Цикл
				НоваяСтрока =  ПеремещениеОбъект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрЗаказ);
				НоваяСтрока.ЗаказПокупателя =  Заказ;
			КонецЦикла; 
		КонецЦикла; 
		ПеремещениеОбъект.Вес =  ПеремещениеОбъект.Запасы.Итог("Вес");
		
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
		Для каждого СтрТаб Из  ПеремещениеОбъект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрТаб.ЗаказПокупателя) Тогда
				ЗаказаОбъект =СтрТаб.ЗаказПокупателя.ПолучитьОбъект();
				ЗаказаОбъект.СостояниеЗаказа = СписокНастроек.СостояниеВПути;
				ЗаказаОбъект.Записать();
			КонецЕсли;
		КонецЦикла; 
		
		
		
		ЗафиксироватьТранзакцию();
		Элементы.СписокПриемки.Обновить();
		
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;

	Исключение
		Элементы.Список.Обновить();
		ОтменитьТранзакцию();
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;

		ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ "+ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	
	
	
	
КонецФункции // ()

&НаКлиенте
Процедура СоздатьПеремещение(Команда)
	СоздатьПеремещениеНаСервере("СписокПриемки");
КонецПроцедуры

#КонецОбласти


#Область ПеремещениеЗапасовИЗаявка

Функция ПолучитьТаблицуЗапас(Заказ)
	ТаблицаЗапас=Новый ТаблицаЗначений;
	Если Заказ.СостояниеЗаказа =СписокНастроек.СостояниеВозврат Тогда
		Заказ.Запасы.Выгрузить(ТаблицаЗапас);
	ИначеЕсли	Заказ.СостояниеЗаказа =СписокНастроек.СостояниеЧастичныйВозврат Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЧекККМЗапасы.Номенклатура КАК Номенклатура,
		|	СУММА(ЧекККМЗапасы.Количество) КАК Количество,
		|	ЧекККМЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЧекККМЗапасы.Заказ КАК Заказ,
		|	ЧекККМЗапасы.Партия КАК Партия
		|ПОМЕСТИТЬ ВТ_ЧЕК
		|ИЗ
		|	Документ.ЧекККМ.Запасы КАК ЧекККМЗапасы
		|ГДЕ
		|	ЧекККМЗапасы.Заказ = &Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМЗапасы.ЕдиницаИзмерения,
		|	ЧекККМЗапасы.Партия,
		|	ЧекККМЗапасы.Заказ,
		|	ЧекККМЗапасы.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяЗапасы.Количество КАК Количество,
		|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяЗапасы.Вес КАК Вес,
		|	ЗаказПокупателяЗапасы.Партия КАК Партия,
		|	ЗаказПокупателяЗапасы.Ссылка КАК ЗаказПокупателя
		|ПОМЕСТИТЬ ВТ_ЗАКАЗ
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Ссылка = &Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗАКАЗ.Номенклатура КАК Номенклатура,
		|	ВТ_ЗАКАЗ.Количество - ЕСТЬNULL(ВТ_ЧЕК.Количество, 0) КАК Количество,
		|	ВТ_ЗАКАЗ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_ЗАКАЗ.Вес КАК Вес,
		|	ВТ_ЗАКАЗ.Партия КАК Партия
		|ИЗ
		|	ВТ_ЗАКАЗ КАК ВТ_ЗАКАЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЧЕК КАК ВТ_ЧЕК
		|		ПО ВТ_ЗАКАЗ.Номенклатура = ВТ_ЧЕК.Номенклатура
		|			И ВТ_ЗАКАЗ.ЕдиницаИзмерения = ВТ_ЧЕК.ЕдиницаИзмерения
		|			И ВТ_ЗАКАЗ.Партия = ВТ_ЧЕК.Партия
		|ГДЕ
		|	ВТ_ЗАКАЗ.Количество - ЕСТЬNULL(ВТ_ЧЕК.Количество, 0) > 0");
		
		Запрос.УстановитьПараметр("Заказ",Заказ);
		ТаблицаЗапас = Запрос.Выполнить().Выгрузить();	 
	КонецЕсли; 
	Возврат ТаблицаЗапас;
	
КонецФункции // ()

&НаСервере
Функция СоздатьВозвратыВызовСервера(МассивСпискаПриемки)  
	НачатьТранзакцию();
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		СкладВозврата = СписокНастроек.СкладВозврата;
		
		БлижайшаяДатаДоставки =  ОпределитьБлижайшуюДатуДоставки(МассивСпискаПриемки[0].Точка.саУНФ_ГрафикДоставки) ;
		Перемещение=ПолучитьПеремещения(СкладВозврата,БлижайшаяДатаДоставки);
		
		Если Перемещение<>Неопределено Тогда
			ПеремещениеОбъект =  Перемещение.ПолучитьОбъект();
			ПеремещениеОбъект.Запасы.Очистить();
		Иначе	
			ПеремещениеОбъект = Документы.ПеремещениеЗапасов.СоздатьДокумент();
		КонецЕсли; 
		ПеремещениеОбъект.Автор = Пользователи.ТекущийПользователь();
		ОМ=ОбщегоНазначения.ОбщийМодуль("саУНФ_АтозаказВызовСервера");
		Если  НЕ ОМ=Неопределено Тогда
			ПеремещениеОбъект.АдресДоставки  = саУНФ_АтозаказВызовСервера.ПолучитьАдрес(СкладВозврата);
		КонецЕсли; 
		ПеремещениеОбъект.ЗонаТариф	=  СкладВозврата.НаправлениеДоставки;
		ПеремещениеОбъект.ВидОперации	= Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение;
		ПеремещениеОбъект.Дата = НачалоДня(ТекущаяДата())+8*3600;
		ПеремещениеОбъект.ДатаОтгрузки	= НачалоДня(БлижайшаяДатаДоставки)+9*3600;
		ПеремещениеОбъект.Комментарий	= "Введено из диспетчера ОМА";
		ПеремещениеОбъект.НаправлениеДеятельности	= СписокНастроек.Направление;
		ПеремещениеОбъект.Организация	= СписокНастроек.Организация;
		ПеремещениеОбъект.СтруктурнаяЕдиница	=   МассивСпискаПриемки[0].Точка;
		ПеремещениеОбъект.СтруктурнаяЕдиницаПолучатель	=  СкладВозврата;
		ПеремещениеОбъект.СтруктурнаяЕдиницаРеципиент	=  СкладВозврата;
		ПеремещениеОбъект.ХозяйственнаяОперация	 = Справочники.ХозяйственныеОперации.Перемещение;
		ПеремещениеОбъект.ПоложениеЗаказаПокупателя  =   Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
		Для каждого  Строка Из  МассивСпискаПриемки Цикл
			Заказ = Строка.Ссылка;
			ТаблицаЗапас = ПолучитьТаблицуЗапас(Заказ);
			
			Для каждого СтрЗаказ Из ТаблицаЗапас Цикл
				НоваяСтрока =  ПеремещениеОбъект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрЗаказ);
				НоваяСтрока.ЗаказПокупателя =  Заказ;
			КонецЦикла; 
			
			
		КонецЦикла; 
		ПеремещениеОбъект.Вес =  ПеремещениеОбъект.Запасы.Итог("Вес");
		
		//ПеремещениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ПеремещениеОбъект.Записать();		
		//Создать заявку на возврат
		Перемещение =  ПеремещениеОбъект.Ссылка;
		ЗаявкаНаВывоз = ПолучитьЗаявкиНаВывоз(Перемещение);
		Если ЗаявкаНаВывоз<>Неопределено Тогда
			ЗаявкаНаВывозОбъект =  ЗаявкаНаВывоз.ПолучитьОбъект();
			ЗаявкаНаВывозОбъект.Запасы.Очистить();
		Иначе	
			ЗаявкаНаВывозОбъект = Документы.ЗаявкаНаЛом.СоздатьДокумент();
		КонецЕсли; 

	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЗаявкаНаВывозОбъект, Перемещение, ,"СостояниеЗаказа, ВариантЗавершения, ПричинаОтмены");
	ЗаявкаНаВывозОбъект.ТипЗаявки = Перечисления.ТипыЗаявкиНаЛом.ОМА;	
	ЗаявкаНаВывозОбъект.СтруктурнаяЕдиницаПродажи = СкладВозврата;
	ЗаявкаНаВывозОбъект.Дата = НачалоДня(ТекущаяДата())+8*3600;
	ЗаявкаНаВывозОбъект.ДатаОтгрузки	= НачалоДня(БлижайшаяДатаДоставки)+9*3600;
	ЗаявкаНаВывозОбъект.Комментарий	= "Введено из диспетчера ОМА";
	ЗаявкаНаВывозОбъект.ЗабратьУКлиента =Ложь;	
	ЗаявкаНаВывозОбъект.СтруктурнаяЕдиницаРезерв = Перемещение.СтруктурнаяЕдиница;
    ЗаявкаНаВывозОбъект.ДокументОснование = Перемещение;
	ЗаявкаНаВывозОбъект.ЗонаТариф	=	Перемещение.СтруктурнаяЕдиница.НаправлениеДоставки;
	ЗаявкаНаВывозОбъект.АдресДоставки 					=  Документы.ЗаявкаНаЛом.ПолучитьАдресПогрузки(Перемещение.СтруктурнаяЕдиница);

	Для каждого  СтрокаПеремещение Из Перемещение.Запасы Цикл
	      СтрокаТабЧасть= ЗаявкаНаВывозОбъект.Запасы.Добавить();
          ЗаполнитьЗначенияСвойств(СтрокаТабЧасть,СтрокаПеремещение);
	КонецЦикла; 
	 
	Если ЗначениеЗаполнено(ЗаявкаНаВывозОбъект.Ответственный) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.СтруктурнаяЕдиница КАК Подразделение
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Ответственный";
		
		Запрос.УстановитьПараметр("Ответственный", ЗаявкаНаВывозОбъект.Ответственный);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаявкаНаВывозОбъект.Подразделение  =	 Выборка.Подразделение;
		КонецЦикла; 	
	КонецЕсли; 
	 
    ЗаявкаНаВывозОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Для каждого СтрТаб Из  ПеремещениеОбъект.Запасы Цикл
			Если ЗначениеЗаполнено(СтрТаб.ЗаказПокупателя) Тогда
				ЗаказаОбъект =СтрТаб.ЗаказПокупателя.ПолучитьОбъект();
				ЗаказаОбъект.СостояниеЗаказа = СписокНастроек.СостояниеВПутиНаРЦ;
				ЗаказаОбъект.Записать();
			КонецЕсли;
		КонецЦикла; 
		
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;

		
		ЗафиксироватьТранзакцию();
		Элементы.СписокПриемки.Обновить();
		
	Исключение
		Элементы.Список.Обновить();
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ "+ОписаниеОшибки());
		
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;

		Возврат Ложь;
	КонецПопытки;
	
	
	
	
	
КонецФункции // ()

&НаКлиенте
Процедура СоздатьПеремещениеИЗаявкуНаВывоз(Команда)
	СоздатьПеремещениеНаСервере("СписокВозвраты");
КонецПроцедуры

#КонецОбласти
