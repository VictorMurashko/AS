&НаСервере
Функция ДобавитьРеквизит()
	
	// Массив для новых реквизитов
	ДобавляемыеРеквизиты	= Новый Массив;
	// Опишем ревизиты формы
	Реквизит_ТипБСО = Новый РеквизитФормы("ТипБСО",	Новый ОписаниеТипов("СправочникСсылка.ТипБСО", , , ),	, "Тип БСО");
	
	// Заполним массив после описания реквизитов формы
	ДобавляемыеРеквизиты.Добавить(Реквизит_ТипБСО);
	
	// Добавим новые реквизиты в форму
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	
	// Элементы
	ИмяГруппы = "СозданиеРН";
	ГруппаФормы = ЭтаФорма.Элементы.Найти(ИмяГруппы);
	Если ГруппаФормы <> Неопределено Тогда
		
		ИмяЭлемента = "ТипБСО";
		Если ЭтаФорма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			ЭлементФормы = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаФормы);        
			ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
			ЭлементФормы.ПутьКДанным = "ТипБСО";
			ЭлементФормы.ПоложениеЗаголовка =  ПоложениеЗаголовкаЭлементаФормы.Нет;
			ЭлементФормы.ПодсказкаВвода = "Тип БСО";
			ЭтаФорма.Элементы.Переместить(ЭлементФормы,ГруппаФормы, ЭтаФорма.Элементы.СоздатьРасходныеНакладные);
			
		КонецЕсли;   
		
	КонецЕсли;
	
	ЭтотОБъект.ТипБСО = Справочники["ТипБСО"].НайтиПоНаименованию("402961 ТТН-1",Ложь);
	
	
КонецФункции // ()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ДатаНачала") Тогда
		ПараметрыДатаНачала = НачалоДня(Параметры.ДатаНачала);
		
		ОтборПериод.ДатаНачала =	Параметры.ДатаНачала; 
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаНачалаМаршрута",ПараметрыДатаНачала);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачалаМаршрута",ПараметрыДатаНачала);
		
	КонецЕсли; 
	Если Параметры.Свойство("ДатаОкончания") Тогда
		ПараметрыДатаОкончания = КонецДня(Параметры.ДатаОкончания);
		
		ОтборПериод.ДатаОкончания =	Параметры.ДатаОкончания;
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияМаршрута",ПараметрыДатаОкончания);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияМаршрута",ПараметрыДатаОкончания);
		
	КонецЕсли; 
	ДобавитьРеквизит();
	СерияБланка = "ТП";
	
	УпорядочитьПоДате();
	УстановитьОтборТекущиеДела();
	
	
	Выборка=саУНФ_ОбщийМодуль.ПолучитьНастройкиЛогистики();
	СтруктураПоиска = Новый Структура("Параметр","Основной склад"); 
	Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
		Склад = Выборка.Значение;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад = Новый Массив(1);
		МассивСклад[0]=Склад;
		СкладПриИзмененииНаСервере(МассивСклад);
	КонецЕсли; 	  
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере(МассивСклад)
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК СтруктурныеЕдиницыКонтактнаяИнформация
	|ГДЕ
	|	СтруктурныеЕдиницыКонтактнаяИнформация.Ссылка В (&МассивСклад)
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Тип = &Тип
	|	И СтруктурныеЕдиницыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("МассивСклад", МассивСклад);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресСтруктурнойЕдиницы"));
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АдресСклада =  Выборка.Представление;
	КонецЦикла;
	
	СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("Склад",Склад);
	Список.Параметры.УстановитьЗначениеПараметра("Склад",Склад);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад = Новый Массив(1);
		МассивСклад[0]=Склад;
		СкладПриИзмененииНаСервере(МассивСклад);
		ОбновитьЗакладкуМаршруты();
		ОбновитьЗакладкуКонтроль();
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ПриОкончанииВыбораПериода" Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачалаМаршрута",ОтборПериод.ДатаНачала);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияМаршрута",ОтборПериод.ДатаОкончания);
		
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаНачалаМаршрута",ОтборПериод.ДатаНачала);
		СписокМаршрутов.Параметры.УстановитьЗначениеПараметра("ДатаОкончанияМаршрута",ОтборПериод.ДатаОкончания);
		
	ИначеЕсли	ИмяСобытия="ПриПередачеВКлиентскийСервис" Тогда
		Элементы.СписокМаршрутов.Обновить();
	КонецЕсли; 
КонецПроцедуры


#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "СписокМаршрутов", "Дата",,,"ПриОкончанииВыбораПериода");
	
	ОбновитьЗакладкуКонтроль();
	ОбновитьЗакладкуМаршруты();
КонецПроцедуры



&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьПоДате()
	ПолеД = "Дата";
	
	Список.Порядок.Элементы.Очистить();
	НовыйПорядок = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	НовыйПорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	
	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(ПолеД);
	НовыйПорядок.Использование = Истина;
	
	СписокМаршрутов.Порядок.Элементы.Очистить();
	НовыйПорядок = СписокМаршрутов.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	НовыйПорядок.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
	
	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных("Дата");
	НовыйПорядок.Использование = Истина;
	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти

#Область ЗакладкаМаршруты

&НаСервере
Процедура ОчиститьТаблицуДетализации()
	ТаблицаДетализация.Очистить();
КонецПроцедуры

&НаСервере
Процедура ОбнулитьСсылку()
	СсылкаНаМаршрут = Документы.ПАК_МаршрутныйЛист.ПустаяСсылка();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЗакладкуМаршруты()
	ОчиститьТаблицуДетализации();
	Элементы.СписокМаршрутов.Обновить();
	Элементы.ТаблицаДетализация.Обновить();
КонецПроцедуры	




&НаСервере
Процедура СписокМаршрутовПриАктивизацииСтрокиНаСервере()
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц =  Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПАК_МаршрутныйЛистЗаказы.Заказ КАК Заказ,
	|	ПАК_МаршрутныйЛистЗаказы.Менеджер КАК Менеджер,
	|	ПАК_МаршрутныйЛистЗаказы.Заказ.Доставлен КАК Доставлен
	|ПОМЕСТИТЬ ВТ_МАРШРУТ
	|ИЗ
	|	Документ.ПАК_МаршрутныйЛист.Заказы КАК ПАК_МаршрутныйЛистЗаказы
	|ГДЕ
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка = &СсылкаНаДокумент
	|	И НЕ ПАК_МаршрутныйЛистЗаказы.Ссылка.Состояние = &Состояние
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК ЗаказПокупателя,
	|	ВТ_МАРШРУТ.Менеджер КАК Менеджер,
	|	ВТ_МАРШРУТ.Доставлен КАК Доставлен
	|ПОМЕСТИТЬ ВТ_ЗАКПОК
	|ИЗ
	|	ВТ_МАРШРУТ КАК ВТ_МАРШРУТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ПО ВТ_МАРШРУТ.Заказ = ЗаказПокупателя.Ссылка
	|ГДЕ
	|	НЕ ЗаказПокупателя.ПометкаУдаления
	|	И ЗаказПокупателя.ДатаОтгрузки >= НАЧАЛОПЕРИОДА(&ДатаНачала, ДЕНЬ)
	|	И ЗаказПокупателя.ДатаОтгрузки <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	И ЗаказПокупателя.ПАК_МаршрутныйЛист = &СсылкаНаДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗАКПОК.ЗаказПокупателя КАК Заказ,
	|	ЕСТЬNULL(РасходнаяНакладная.Ссылка, ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)) КАК РасходнаяНакладная,
	|	&НомерБланкаРН КАК НомерБланка,
	|	ВТ_ЗАКПОК.Доставлен КАК Доставлен
	|ПОМЕСТИТЬ ВТ_РАСХН
	|ИЗ
	|	ВТ_ЗАКПОК КАК ВТ_ЗАКПОК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|		ПО ВТ_ЗАКПОК.ЗаказПокупателя = РасходнаяНакладная.Заказ
	|ГДЕ
	|	РасходнаяНакладная.Дата >= НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, -1), ДЕНЬ)
	|	И РасходнаяНакладная.Дата <= КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, 1), ДЕНЬ)
	|	И РасходнаяНакладная.Заказ В
	|			(ВЫБРАТЬ
	|				ВТ_ЗАКПОК.ЗаказПокупателя КАК ЗаказПокупателя
	|			ИЗ
	|				ВТ_ЗАКПОК КАК ВТ_ЗАКПОК)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_МАРШРУТ.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА (ВЫРАЗИТЬ(ВТ_МАРШРУТ.Заказ.Комментарий КАК СТРОКА(100))) + "" "" + (ВЫРАЗИТЬ(ВТ_МАРШРУТ.Заказ.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(100)))
	|		ИНАЧЕ ВЫРАЗИТЬ(ВТ_МАРШРУТ.Заказ.Комментарий КАК СТРОКА(200))
	|	КОНЕЦ КАК Комментарий,
	|	ВТ_МАРШРУТ.Менеджер КАК Менеджер,
	|	ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) КАК Тип,
	|	ВТ_РАСХН.РасходнаяНакладная КАК РасходнаяНакладная,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА &НомерБланкаЗаказ
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТ_РАСХН.НомерБланка, """") = """"
	|						ТОГДА &НомерБланкаЗаказ
	|					ИНАЧЕ ВТ_РАСХН.НомерБланка
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерБланка,
	|	ВТ_МАРШРУТ.Заказ.АдресДоставки КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ВТ_МАРШРУТ.Заказ.АдресДоставкиЗначение
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиЗначение,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА 0
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК АдресОК,
	|	ВТ_МАРШРУТ.Доставлен КАК Доставлен,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ВТ_МАРШРУТ.Заказ.Наличка
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Наличка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ПеремещениеЗапасов)
	|			ТОГДА ВТ_МАРШРУТ.Заказ.СтруктурнаяЕдиницаПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_МАРШРУТ.Заказ) = ТИП(Документ.ЗаказПокупателя)
	|			ТОГДА ВТ_МАРШРУТ.Заказ.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяССылка)
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	ВТ_МАРШРУТ КАК ВТ_МАРШРУТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РАСХН КАК ВТ_РАСХН
	|		ПО ВТ_МАРШРУТ.Заказ = ВТ_РАСХН.Заказ";
	
	Запрос.Текст=СтрЗаменить(Запрос.Текст, "&НомерБланкаРН","ЕСТЬNULL(РасходнаяНакладная.НомерБланка,"""")");
	Запрос.Текст=СтрЗаменить(Запрос.Текст, "&НомерБланкаЗаказ","ЕСТЬNULL(ВТ_МАРШРУТ.Заказ.НомерБланка,"""")");
	
	
	Запрос.УстановитьПараметр("ДатаНачала",ОтборПериод.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ОтборПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаМаршрут);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостояниеМаршрута.Завершен);
	
	
	// саУНФ_ОбщийМодуль.ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц, "ВТ_ЗАКПОК")
	
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТабРез Из ТаблицаРезультата Цикл
		Если  СтрокаТабРез.АдресОК=3 ИЛИ ЛЕВ(СОКРЛП(СтрокаТабРез.АдресДоставкиЗначение),1)<>"{" Тогда
			Продолжить;
		КонецЕсли;
		
		АдресВСвободнойФорме = УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(СтрокаТабРез.АдресДоставкиЗначение);
		Если   НЕ АдресВСвободнойФорме Тогда
			СтрокаТабРез.АдресОК=3;
		КонецЕсли;
		
	КонецЦикла; 
	
	
	ТаблицаДетализация.Очистить();
	ТаблицаДетализация.Загрузить(ТаблицаРезультата);
КонецПроцедуры

&НаКлиенте
Процедура СписокМаршрутовПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = неопределено Тогда
		СсылкаНаМаршрут = Элемент.ТекущиеДанные.Ссылка;
		СписокМаршрутовПриАктивизацииСтрокиНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ЗакладкаКонтроль

&НаСервере
Процедура ОчиститьТаблицуМаршрута()
	ТаблицаМаршрута.Очистить();
	СсылкаНаМаршрутПоехал = Документы.ПАК_МаршрутныйЛист.ПустаяСсылка();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗакладкуКонтроль()
	Элементы.Список.Обновить();
	ОчиститьТаблицуМаршрута();
	Элементы.ПереданыДокументы.Обновить();
КонецПроцедуры	


&НаСервере
Процедура  СписокПриАктивизацииСтрокиКонтрольНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
	|	ПАК_МаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	ПАК_МаршрутныйЛистЗаказы.Контрагент КАК Контрагент,
	|	ПАК_МаршрутныйЛистЗаказы.Заказ КАК Документ,
	|	ПАК_МаршрутныйЛистЗаказы.Контакты КАК Контакты,
	|	ПАК_МаршрутныйЛистЗаказы.Менеджер КАК Менеджер,
	|	ПАК_МаршрутныйЛистЗаказы.Вес КАК Вес,
	|	ПАК_МаршрутныйЛистЗаказы.АдресДоставки КАК АдресДоставки,
	|	ПАК_МаршрутныйЛистЗаказы.Объем КАК Объем,
	|	ПАК_МаршрутныйЛистЗаказы.Сумма КАК Сумма,
	|	ПАК_МаршрутныйЛистЗаказы.ВесЛома КАК ВесЛома,
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка.ЗонаТариф КАК ЗонаДоставки,
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка.Автомобиль КАК Автомобиль,
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка.Курьер КАК КурьерФЛ,
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка.Дата КАК ДатаДоставки,
	|	ПАК_МаршрутныйЛистЗаказы.Заказ.Доставлен КАК Доставлен,
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка.ФИОВодителя КАК Курьер
	|ИЗ
	|	Документ.ПАК_МаршрутныйЛист.Заказы КАК ПАК_МаршрутныйЛистЗаказы
	|ГДЕ
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка = &СсылкаНаДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("СсылкаНаДокумент", СсылкаНаМаршрутПоехал);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаМаршрута.Очистить();
	ТаблицаМаршрута.Загрузить(ТаблицаРезультата);
	
КонецПроцедуры


&НаКлиенте
Процедура СписокПриАктивизацииСтрокиКонтроль(Элемент)
	Если НЕ Элемент.ТекущиеДанные = неопределено Тогда
		СсылкаНаМаршрутПоехал = Элемент.ТекущиеДанные.Ссылка;
		СписокПриАктивизацииСтрокиКонтрольНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Элементы.Список.Обновить();
	СписокПриАктивизацииСтрокиКонтроль(Элементы.Список);
КонецПроцедуры

#КонецОбласти 

#Область Печать

&НаСервере
Функция ПроверитьПроведениеНакладной(РН)

	    Возврат  РН.Проведен;

КонецФункции // ()
 

&НаКлиенте                                                                                       
Процедура Напечатать(Команда)
	Если Элементы.ТаблицаДетализация.ТекущаяСтрока = Неопределено Тогда
		Возврат;			
	КонецЕсли; 
	Если Элементы.ТаблицаДетализация.ТекущиеДанные.Тип = "Заказ покупателя" Тогда
		Если Элементы.ТаблицаДетализация.ТекущиеДанные.Наличка=1 Тогда
			МассивВыделенныеСтроки=Новый Массив;
			МассивВыделенныеСтроки.Добавить(Элементы.ТаблицаДетализация.ТекущиеДанные.Заказ);
			ИмяМенеджераПечати = "Обработка.саУНФ_ДопПечатныеФормыДляДокЗаказПокупателя";
			ИменаМакетов ="ПродажаЗаНаличку";
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати,ИменаМакетов,МассивВыделенныеСтроки,ЭтаФорма);

			
		Иначе
			Если ЗначениеЗаполнено(Элементы.ТаблицаДетализация.ТекущиеДанные.РасходнаяНакладная)  Тогда
				Ответ=ПроверитьПроведениеНакладной(Элементы.ТаблицаДетализация.ТекущиеДанные.РасходнаяНакладная);
                Если НЕ Ответ Тогда
				      ОбщегоНазначенияКлиент.СообщитьПользователю("Расходная накладная не проведена");
					  Возврат;
				КонецЕсли;
				
				ПараметрыПечати = Новый Структура("Документ",Элементы.ТаблицаДетализация.ТекущиеДанные.РасходнаяНакладная);
				ПараметрыПечати.Вставить("ИзАРМКС",Истина);
				ОткрытьФорму("Обработка.саУНФ_ДопПечатныеФормыДляДокРасходнаяНакладная.Форма", ПараметрыПечати);
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Вначале нужно создать расходную накладную";
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.ТаблицаДетализация.ТекущиеДанные.Тип = "Перемещение запасов" Тогда	
		ПараметрыПечати = Новый Структура("Документ",Элементы.ТаблицаДетализация.ТекущиеДанные.Заказ);
		ПараметрыПечати.Вставить("ИзАРМКС",Истина);
		ОткрытьФорму("Обработка.саУНФ_ДопПечатныеФормыДляДокПеремещениеЗапасов.Форма", ПараметрыПечати);
	Иначе
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область СозданиеРасходныхНакладных


&НаСервере
Процедура СоздатьРасходныеНакладныеНаСервере()
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
	СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплату";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеЗапасов")] = "ЗаполнитьПоПеремещениюЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкеЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемуВРемонт";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоИсходящейТранспортнойОперации";
	СтратегияЗаполнения[Тип("СправочникСсылка.ДоговорыКонтрагентов")] = "ЗаполнитьПоДоговоруКонтрагента";
	
	
	
	
	ВыделенныеСтроки=Элементы.ТаблицаДетализация.ВыделенныеСтроки;
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		Текущая = ТаблицаДетализация.НайтиПоИдентификатору(Строка);
		НомерБланкаСтроки 			= Текущая.НомерБланка;
		НайденныйЗаказ 				= Текущая.Заказ;
		АдресОК 							=  Текущая.АдресОК;
		Расходная 						=  Текущая.РасходнаяНакладная;
		
		Если НЕ ТипЗнч(НайденныйЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
                            Продолжить;
		КонецЕсли;					
		Если НайденныйЗаказ.Наличка = 1 Тогда
 					Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Расходная) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Для " + СТРОКА(НайденныйЗаказ)+" расходная накладная уже введена";
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли; 
		
		Если АдресОК = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Для " + СТРОКА(НайденныйЗаказ)+" не корректно введен адрес";
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли; 
		
		Если НомерБланкаСтроки ="" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Для " + СТРОКА(НайденныйЗаказ)+" не определен номер бланка";
			Сообщение.Сообщить();
			Продолжить;
			
		КонецЕсли; 
		
		
		
		МассивСтрок = Новый Массив();
		
		Если ТипЗнч(НайденныйЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Если НайденныйЗаказ.Наличка = 0 Тогда
			МассивСтрок.Добавить(НайденныйЗаказ);
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли; 
		
		Если МассивСтрок.Количество()>0 Тогда
			ДанныеЗаполнения = Новый Структура("МассивЗаказовПокупателей",МассивСтрок);
			РасходнаяНакладная = Документы.РасходнаяНакладная.СоздатьДокумент();
			ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(РасходнаяНакладная, ДанныеЗаполнения, СтратегияЗаполнения,
			"Грузоотправитель, Грузополучатель");
			
			ПравилоНомераСчетаНаОплату = Константы.ПравилоЗаполненияНомераСчетаНаОплату.Получить();
			Если ЗначениеЗаполнено(ПравилоНомераСчетаНаОплату) Тогда
				РасходнаяНакладная.НомерСчетаНаОплату = ПравилоНомераСчетаНаОплату;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РасходнаяНакладная.Контрагент)
				И НЕ ЗначениеЗаполнено(РасходнаяНакладная.БанковскийСчетКонтрагента) Тогда
				РасходнаяНакладная.БанковскийСчетКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасходнаяНакладная.Контрагент, "БанковскийСчетПоУмолчанию");
			КонецЕсли;
			
			ТаблицаКИ=УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
			СтрокаТаблицаКИ	=	ТаблицаКИ.Добавить();
			СтрокаТаблицаКИ.Вид=Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
			СтрокаТаблицаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаТаблицаКИ.ЗначенияПолей=НайденныйЗаказ.АдресДоставкиЗначенияПолей;
			СтрокаТаблицаКИ.Значение=НайденныйЗаказ.АдресДоставкиЗначение;
			СтрокаТаблицаКИ.Представление = НайденныйЗаказ.АдресДоставки;
			
			УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(РасходнаяНакладная, ТаблицаКИ); 
			//
			//Если АдресВСвободнойФорме  Тогда
			//	ЗначениеJSON	=	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(НайденныйЗаказ.АдресДоставки,Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);				
			//	СтруктураЗначениеXML	=	УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ЗначениеJSON, Перечисления.ТипыКонтактнойИнформации.Адрес);
			//	ЗначениеXML	=УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СтруктураЗначениеXML, , Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
			//	СтрокаТаблицаКИ	=	ТаблицаКИ.Добавить();
			//	СтрокаТаблицаКИ.Вид=Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
			//	СтрокаТаблицаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			//	СтрокаТаблицаКИ.Значение=ЗначениеJSON;
			//	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(РасходнаяНакладная, ТаблицаКИ) 
			//Иначе
			//	СтрокаТаблицаКИ	=	ТаблицаКИ.Добавить();
			//	СтрокаТаблицаКИ.Вид=Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
			//	СтрокаТаблицаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			//	СтрокаТаблицаКИ.ЗначенияПолей=НайденныйЗаказ.АдресДоставкиЗначенияПолей;
			//	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(РасходнаяНакладная, ТаблицаКИ); 
			//	
			//КонецЕсли; 
			
			РасходнаяНакладная.Автомобиль                              	=    	СсылкаНаМаршрут.Автомобиль;
			РасходнаяНакладная.ВидОперации                           	=     	Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
			РасходнаяНакладная.ВидЭлектронногоДокумента     	=     	Перечисления.ВидыЭД.ТОРГ12Продавец;
			Если СсылкаНаМаршрут.СпособДоставки = Перечисления.СпособыДоставки.Курьер Тогда
			РасходнаяНакладная.Водитель                                 	=     	СсылкаНаМаршрут.Курьер;
            РасходнаяНакладная.ФИОВодителя                            =		СсылкаНаМаршрут.Курьер.Наименование;
			Иначе	
			   РасходнаяНакладная.ФИОВодителя                            =		СсылкаНаМаршрут.ФИОВодителя;
			   РасходнаяНакладная.Водитель                                   =         Справочники.ФизическиеЛица.ПустаяСсылка();
			КонецЕсли; 
									
			Если НачалоДня(СсылкаНаМаршрут.Дата) = НачалоДня(НайденныйЗаказ.Дата) Тогда
			        РасходнаяНакладная.Дата                                       =     	НайденныйЗаказ.Дата+1;
			Иначе	
			       РасходнаяНакладная.Дата                                        	=     	НачалоДня(СсылкаНаМаршрут.Дата)+8*60*60;
			КонецЕсли;
			
			РасходнаяНакладная.Заказ                                       	=     	НайденныйЗаказ;
			//РасходнаяНакладная.ИдентификаторПлатежа             =
			РасходнаяНакладная.Комментарий                             	=		"Введено из маршрута "+Строка(СсылкаНаМаршрут);
			РасходнаяНакладная.НомерБланка                            	=       НомерБланкаСтроки;
			//РасходнаяНакладная.НомерСчетаНаОплату               =
			РасходнаяНакладная.Ответственный                           	=      ТаблицаДетализация.НайтиПоИдентификатору(Строка).Менеджер;
			РасходнаяНакладная.ПунктПогрузки                            	=      АдресСклада;
			РасходнаяНакладная.ПунктРазгрузки                         	=   	НайденныйЗаказ.АдресДоставки;
			РасходнаяНакладная.СерияБланка                              =     	СерияБланка;
			РасходнаяНакладная.СпособПродажиГИСМ                	=     	"опт";
			РасходнаяНакладная.СуммаДокумента                       	=      РасходнаяНакладная.Запасы.Итог("Всего");
			РасходнаяНакладная.ТипБСО                                     	=      ЭтотОбъект.ТипБСО;
			РасходнаяНакладная.УчитыватьВНУ                           	=		Истина;
			РасходнаяНакладная.ХозяйственнаяОперация             	=      Справочники.ХозяйственныеОперации.ПродажаПокупателю;
			РасходнаяНакладная.ПоложениеЗаказаПокупателя      = 		Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
			Попытка
				РасходнаяНакладная.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось записать накладную по заказу "+Строка(НайденныйЗаказ)+" "+ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки;
			
		КонецЕсли; 	
		
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасходныеНакладные(Команда)
	СоздатьРасходныеНакладныеНаСервере();
	СписокМаршрутовПриАктивизацииСтрокиНаСервере() ;
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераБланковНаСервере()
	ПриращениеНомера=0;
	Для каждого СтрТаблицы Из ТаблицаДетализация Цикл
		Если  ТипЗнч(СтрТаблицы.Заказ) = ТИП("ДокументСсылка.ЗаявкаНаЛом") ИЛИ НЕ СОКРЛП(СтрТаблицы.НомерБланка)="" ИЛИ СтрТаблицы.Наличка=1 Тогда
			Продолжить;
		КонецЕсли; 
		СтрТаблицы.НомерБланка=СтрЗаменить(СТРОКА(НомерБланка+ПриращениеНомера),Символы.НПП,"");
		Если  ТипЗнч(СтрТаблицы.Заказ) = ТИП("ДокументСсылка.ПеремещениеЗапасов") ИЛИ ТипЗнч(СтрТаблицы.Заказ) = ТИП("ДокументСсылка.ЗаказПокупателя") Тогда		  
			ЗаказОбъект = СтрТаблицы.Заказ.ПолучитьОбъект();
			ЗаказОбъект.НомерБланка = СтрТаблицы.НомерБланка;
			ЗаказОбъект.СерияБланка = СерияБланка;
			Попытка
				ЗаказОбъект.Записать();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось установить номер бланка в "+ СТРОКА(СтрТаблицы.Заказ)+" "+ОписаниеОшибки();
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;		  
		ПриращениеНомера=ПриращениеНомера+1;
	КонецЦикла; 
	СписокМаршрутовПриАктивизацииСтрокиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераБланков(Команда)
	Если НомерБланка=0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Введите начальный номер бланка";
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли; 
	ЗаполнитьНомераБланковНаСервере();
	Элементы.ТаблицаДетализация.Обновить();
КонецПроцедуры

#КонецОбласти


#Область ВводАдреса

&НаКлиенте
Процедура ТаблицаДетализацияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаДетализацияАдресОК" Тогда
		ТекДанные=Элементы.ТаблицаДетализация.ТекущиеДанные;
		Если ТекДанные.АдресОК = 3 Тогда
			ЗадатьВопросОИзмененииАдреса(Элемент);
		Иначе
			ИзменениеАдресаДоставкиКлиент(Элемент);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
АСИНХ Функция ЗадатьВопросОИзмененииАдреса(Элемент)
	ТекстВопроса = "Адрес введен корректно. Хотите ввести другой адрес?";
	Результат = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		ИзменениеАдресаДоставкиКлиент(Элемент);
	КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура ИзменениеАдресаДоставкиКлиент(Элемент)
	ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	Элемент,
	ЭтотОбъект,
	"АдресДоставки",
	Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент, Объект, ИмяРеквизитаАдресаДоставки, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	АдресПредставление = ИмяРеквизитаАдресаДоставки;
	АдресЗначение = ИмяРеквизитаАдресаДоставки + "Значение";
	
	// Откроем диалог редактирования КИ
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета"));
	ПараметрыОткрытия.Вставить("Значение", АдресЗначение);
	ПараметрыОткрытия.Вставить("Представление", АдресПредставление);
	ПараметрыОткрытия.Вставить("Комментарий", ДополнительнаяИнформацияПоДоставке);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаАдресаДоставки", ИмяРеквизитаАдресаДоставки);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораАдресаИзменитьАдрес", 
	ЭтаФорма, ДополнительныеПараметры);
	
	Текущая =Элементы.ТаблицаДетализация.ТекущаяСтрока;
	СтрокаТЗ = ТаблицаДетализация.НайтиПоИдентификатору(Текущая);
	ПараметрыОткрытия.Значение=СтрокаТЗ.АдресДоставкиЗначение;
	ПараметрыОткрытия.Представление=СтрокаТЗ.АдресДоставки;;
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИзменитьАдрес(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда // КИ введена
		АдресДоставкиЗначение = Результат.Значение;
		АдресДоставки = Результат.Представление;
		АдресДоставкиЗначенияПолей=Результат.КонтактнаяИнформация;
		ДополнительнаяИнформацияПоДоставке = Результат.Комментарий;
		Ответ=ВвестиАдресНаСервере();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Ответ;
		Сообщение.Сообщить();
		СписокМаршрутовПриАктивизацииСтрокиНаСервере();
		ОбновитьОтображениеДанных();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВвестиАдресНаСервере()
	Если СокрЛП(АдресДоставкиЗначение)="" ИЛИ СокрЛП(АдресДоставкиЗначенияПолей)="" ИЛИ СокрЛП(АдресДоставки)="" Тогда
		Возврат "Не корректно введен адрес";
	КонецЕсли; 
	
	Текущая =Элементы.ТаблицаДетализация.ТекущаяСтрока;
	СтрокаТЗ = ТаблицаДетализация.НайтиПоИдентификатору(Текущая);
	Если НЕ ТипЗнч(СтрокаТЗ.Заказ) =  Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат "Это не заказ покупателя";
	Иначе
		//записываем адрес	 
		Ответ=АдресДоставкиВЗаказ(СтрокаТЗ.Заказ);
		Если Ответ Тогда
			Возврат "Введен адрес доставки";
		Иначе
			Возврат "Не удалось адрес доставки";
		КонецЕсли; 
	КонецЕсли; 
КонецФункции

&НаСервере
Функция АдресДоставкиВЗаказ(фЗаказ)
	УстановитьПривилегированныйРежим(Истина);
	
	
	ЗаказОбъект  =  фЗаказ.ПолучитьОбъект();
	ЗаказОбъект.АдресДоставки  							=  АдресДоставки;                                                                                                         
	ЗаказОбъект.АдресДоставкиЗначение   			= 	АдресДоставкиЗначение;
	ЗаказОбъект.АдресДоставкиЗначенияПолей 	=  АдресДоставкиЗначенияПолей;
	Попытка
		ЗаказОбъект.Записать();
	Исключение
		Если ПривилегированныйРежим() Тогда                                                                    
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		
		Возврат Ложь;
	КонецПопытки;
	ТаблицаКИ=УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	СтрокаТаблицаКИ	=	ТаблицаКИ.Добавить();
	СтрокаТаблицаКИ.Вид=Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета;
	СтрокаТаблицаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	СтрокаТаблицаКИ.ЗначенияПолей=АдресДоставкиЗначенияПолей;
	СтрокаТаблицаКИ.Значение=АдресДоставкиЗначение;
	СтрокаТаблицаКИ.Представление = АдресДоставки;
	
	КонтрагентОбъект =  фЗаказ.Контрагент.ПолучитьОбъект();
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(КонтрагентОбъект, ТаблицаКИ); 
	Попытка
		КонтрагентОбъект.Записать();
	Исключение
		Если ПривилегированныйРежим() Тогда                                                                    
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ПривилегированныйРежим() Тогда                                                                    
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	Возврат Истина;
КонецФункции // ()


#КонецОбласти


#Область СтатусыМаршрута
// "Вернуть логисту" статус ВРаботе 
// "Документы распечатаны" статус СозданыДокументы
// "Маршрут завершен"   статус  Завершен  (в таб части проставить в документах доставлен)

//ТоварКлиентуДоставлен в документе Доставлен = 1;
&НаСервере 
Функция УстановитьЗаказДоставлен(СтрокаТЗЗаказ,Доставлен)
	ЗаказСсылка =СтрокаТЗЗаказ;
	ЗаказОбъект =   ЗаказСсылка.ПолучитьОбъект();
	ЗаказОбъект.Доставлен = Доставлен;
	Попытка
		ЗаказОбъект.Записать();
		Возврат Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось установить статус Доставлен в "+Строка(ЗаказСсылка)+" "+ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
КонецФункции // ()

&НаСервере
Функция УстановитьСтатусМаршрута(Статус)
	УстановитьПривилегированныйРежим(Истина);
	
	Если Статус = Перечисления.СостояниеМаршрута.Завершен Тогда
		МаршрутОбъект =СсылкаНаМаршрутПоехал.ПолучитьОбъект();
	Иначе
		МаршрутОбъект =СсылкаНаМаршрут.ПолучитьОбъект();
	КонецЕсли;
	
	Если Статус = Перечисления.СостояниеМаршрута.Завершен Тогда
		ЗаказыМаршрутОбъект = МаршрутОбъект.Заказы;
		Для  каждого СтрМаршрут  Из ЗаказыМаршрутОбъект Цикл
			Если ЗначениеЗаполнено(СтрМаршрут.Заказ) И НЕ СтрМаршрут.Доставлен Тогда
				СтрМаршрут.Доставлен = Истина;
			КонецЕсли;
		КонецЦикла; 
	ИначеЕсли Статус =	Перечисления.СостояниеМаршрута.СозданыДокументы Тогда
		Если МаршрутОбъект.Состояние = Перечисления.СостояниеМаршрута.Собран Тогда
			Статус =	Перечисления.СостояниеМаршрута.СобранДокументыРаспечатаны;
		КонецЕсли; 
	КонецЕсли; 
	
	МаршрутОбъект.Состояние = Статус;
	
	Попытка
		МаршрутОбъект.Записать();
		Если Статус = Перечисления.СостояниеМаршрута.Завершен Тогда
			ЗаказыМаршрутОбъект = МаршрутОбъект.Заказы;
			Для  каждого СтрМаршрут  Из ЗаказыМаршрутОбъект Цикл
				Если ЗначениеЗаполнено(СтрМаршрут.Заказ) И СтрМаршрут.Заказ.Доставлен=0 Тогда
					УстановитьЗаказДоставлен(СтрМаршрут.Заказ,1);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		
		Возврат Истина;
	Исключение
		Если ПривилегированныйРежим() Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли; 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось установить статус "+Строка(Статус)+" в "+Строка(СсылкаНаМаршрут)+" "+ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	
КонецФункции

&НаКлиенте
Процедура ДокументыРаспечатаны(Команда)
	Установлен=УстановитьСтатусМаршрута(ПредопределенноеЗначение("Перечисление.СостояниеМаршрута.СозданыДокументы"));
	Если Установлен Тогда
		ОбновитьЗакладкуМаршруты();
		СписокМаршрутовПриАктивизацииСтрокиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМаршрутЛогисту(Команда)
	Установлен=УстановитьСтатусМаршрута(ПредопределенноеЗначение("Перечисление.СостояниеМаршрута.ВРаботе"));
	Если Установлен Тогда
		ОбновитьЗакладкуМаршруты();
		ОбнулитьСсылку();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ПроверитьСтатусДляОтправкиГруза()
     Если СсылкаНаМаршрут=Документы.ПАК_МаршрутныйЛист.ПустаяСсылка() Тогда
	         Возврат Ложь;
	 КонецЕсли; 
	
     Возврат  СсылкаНаМаршрут.Состояние  = Перечисления.СостояниеМаршрута.СобранДокументыРаспечатаны;
КонецФункции // ()
 

&НаКлиенте
Процедура ГрузОтправлен(Команда)
	Если НЕ ПроверитьСтатусДляОтправкиГруза() Тогда
	        Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Перед отправкой маршрут должен быть собран и документы напечатаны";
			Сообщение.Сообщить();
			Возврат;
	КонецЕсли; 
	
	Установлен=УстановитьСтатусМаршрута(ПредопределенноеЗначение("Перечисление.СостояниеМаршрута.Отправлен"));
	Если Установлен Тогда
		ОбновитьЗакладкуМаршруты();
		ОбнулитьСсылку();
	КонецЕсли;
КонецПроцедуры

#Область ЗавершениеМаршрута
	


&НаКлиенте
Процедура МаршрутЗавершен(Команда)
	Установлен=УстановитьСтатусМаршрута(ПредопределенноеЗначение("Перечисление.СостояниеМаршрута.Завершен"));
	Если Установлен Тогда
		ОбновитьЗакладкуКонтроль();
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ТаблицаДетализацияДоставленПриИзмененииНаСервере(ИдентификаторСтроки)
	УстановитьПривилегированныйРежим(Истина);
	Установлен=Ложь;
	СтрокаТЗ = ТаблицаМаршрута.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаТЗ=Неопределено Тогда
		    Возврат Ложь;
	КонецЕсли;	
		ЗаказСсылка =СтрокаТЗ.Документ;
		Если ЗаказСсылка.Доставлен<>СтрокаТЗ.Доставлен Тогда
		        Установлен=УстановитьЗаказДоставлен(ЗаказСсылка,СтрокаТЗ.Доставлен);
				
			КонецЕсли; 
		
		Если ПривилегированныйРежим()  Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Возврат Установлен;		
КонецФункции


&НаСервере
Функция ПроверитьЗавершениеМаршрута()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПАК_МаршрутныйЛист.Заказы КАК ПАК_МаршрутныйЛистЗаказы
	|ГДЕ
	|	ПАК_МаршрутныйЛистЗаказы.Ссылка = &СсылкаНаМаршрут
	|	И ПАК_МаршрутныйЛистЗаказы.Заказ.Доставлен = 0";
	
	Запрос.УстановитьПараметр("СсылкаНаМаршрут", СсылкаНаМаршрутПоехал);
	
	Результат = Запрос.Выполнить();
	Если  Результат.Пустой() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции // ()


&НаКлиенте
Процедура УстановитьТоварКлиентуДоставлен(Текущая)
	ТаблицаДетализацияДоставленПриИзмененииНаСервере(Текущая);
	СписокПриАктивизацииСтрокиКонтрольНаСервере();
	ОбновитьОтображениеДанных();
	
	Если ПроверитьЗавершениеМаршрута() Тогда
		Установлен=УстановитьСтатусМаршрута(ПредопределенноеЗначение("Перечисление.СостояниеМаршрута.Завершен"));
		Если Установлен Тогда
			ОбновитьЗакладкуКонтроль();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутаДоставленПриИзменении(Элемент)
	Текущая =Элементы.ПереданыДокументы.ТекущаяСтрока;
	Если Текущая = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Выберите документ, по которому осуществлялась доставка клиенту";
		Сообщение.Сообщить();	
		Возврат;
	КонецЕсли; 

	УстановитьТоварКлиентуДоставлен(Текущая);
КонецПроцедуры




&НаКлиенте
Функция ОбновитьАктивнуюСтроку()
	Если НЕ Элементы.СписокМаршрутов.ТекущиеДанные = неопределено И ТаблицаДетализация.Количество()=0 Тогда
		СсылкаНаМаршрут = Элементы.СписокМаршрутов.ТекущиеДанные.Ссылка;
		СписокМаршрутовПриАктивизацииСтрокиНаСервере();
	ИначеЕсли	Элементы.СписокМаршрутов.ТекущиеДанные = неопределено И ТаблицаДетализация.Количество()>0 Тогда
       ТаблицаДетализация.Очистить();
	КонецЕсли; 
КонецФункции // ()
 



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьАктивнуюСтроку",5,Ложь);
КонецПроцедуры


#КонецОбласти

#КонецОбласти
