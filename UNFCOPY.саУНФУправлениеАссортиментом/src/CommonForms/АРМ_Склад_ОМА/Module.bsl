#Область НачалоОкончание

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если Параметры.Свойство("ДатаНачала") Тогда
		ПараметрыДатаНачала = НачалоДня(Параметры.ДатаНачала);
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ПараметрыДатаНачала);
		ОтборПериод.ДатаНачала =	Параметры.ДатаНачала; 
		СписокПриходные.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ПараметрыДатаНачала);
	КонецЕсли; 
	Если Параметры.Свойство("ДатаОкончания") Тогда
		ПараметрыДатаОкончания = КонецДня(Параметры.ДатаОкончания);
		
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ПараметрыДатаОкончания);
		СписокПриходные.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ПараметрыДатаОкончания);

		ОтборПериод.ДатаОкончания =	Параметры.ДатаОкончания;
	КонецЕсли; 
	
	ОМ =ОбщегоНазначения.ОбщийМодуль("саУНФ_РаботаСОМА");
	Если  ОМ=Неопределено Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли; 	  
	
	УстановитьОтборТекущиеДела();
	
	СписокНастроек= ОМ.ПолучитьСтруктураНастроекОМА(); 
	Список.Параметры.УстановитьЗначениеПараметра("ВидЗаказа",СписокНастроек.ВидЗаказаОМА);
	Список.Параметры.УстановитьЗначениеПараметра("Контрагент",СписокНастроек.Поставщик);
	Список.Параметры.УстановитьЗначениеПараметра("СостояниеВРаботе",СписокНастроек.СостояниеВРаботе);
	
	СписокПриходные.Параметры.УстановитьЗначениеПараметра("Контрагент",СписокНастроек.Поставщик);
	СписокПриходные.Параметры.УстановитьЗначениеПараметра("Договор", СписокНастроек.ДоговорПоставщика);
 
	
	
	Отклонен =  СписокНастроек.СостояниеОтклонен;
	ВосстановитьНастройкиОтборов();	
	СписокДетали.Очистить();
	ЗачеркнутьВыбранные();
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	СохранитьНастройкиОтборов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПередЗакрытиемНаСервере();
КонецПроцедуры

#КонецОбласти 

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ПриОкончанииВыбораПериода" Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОтборПериод.ДатаНачала);
		Список.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",ОтборПериод.ДатаОкончания);
		
		СписокПриходные.Параметры.УстановитьЗначениеПараметра("ДатаНачала",ОтборПериод.ДатаНачала);
		СписокПриходные.Параметры.УстановитьЗначениеПараметра("ДатаОкончания",КонецМесяца(ДобавитьМесяц(ОтборПериод.ДатаНачала,1)));
		
	КонецЕсли; 

КонецПроцедуры



&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата",,,"ПриОкончанииВыбораПериода");

КонецПроцедуры



&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект,Список);
	
КонецПроцедуры


&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТекущиеДела()
	
	ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(ОтборПериод);
	РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Статус", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры


#КонецОбласти

#Область Детали

&НаСервере
Процедура СписокПриАктивизацииСтрокиНаСервере(СсылкаЗаказ)
	СписокДетали.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЗаказПокупателяЗапасы.Номенклатура.Вес, 0) * ЗаказПокупателяЗапасы.Количество КАК Вес,
	|	ЗаказПокупателяЗапасы.Номенклатура.Длина КАК Длина,
	|	ЗаказПокупателяЗапасы.Номенклатура.Ширина КАК Ширина,
	|	ЗаказПокупателяЗапасы.Номенклатура.Высота КАК Высота,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателяЗапасы
	|ГДЕ
	|	ЗаказПокупателяЗапасы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",СсылкаЗаказ);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка= РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокДетали.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДокументЕстьВТаблицеМаршрута(Док)
	СтруктураПоиска = Новый Структура("Заказ",Док);
	МассивНайденных = СписокДетали.НайтиСтроки(СтруктураПоиска);
	Если МассивНайденных.Количество()>0 Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли; 
КонецФункции // ()

&НаСервере
Процедура ЗачеркнутьВыбранные()
	ТабВДинСписок=СписокДетали.Выгрузить(,"Заказ");
	МассивНомеров	=	ТабВДинСписок.ВыгрузитьКолонку("Заказ");
	МасивВДинСписок	= 	ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНомеров);
	
	Список.КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("МойПараметр", МасивВДинСписок);
	Элементы.Список.Обновить();
КонецПроцедуры


&НаСервере
Процедура СписокНачалоПеретаскиванияНаСервере(МассивПеретаскивания)
	Если ТипЗнч(МассивПеретаскивания) = Тип("Массив") ИЛИ  ТипЗнч(МассивПеретаскивания) = Тип("ТаблицаЗначений") Тогда
		Для каждого  СтрМассива Из МассивПеретаскивания Цикл
			Если ДокументЕстьВТаблицеМаршрута(СтрМассива.Ссылка)	Тогда
				Продолжить;
			КонецЕсли;	
			Для каждого СтрЗаказ Из СтрМассива.Ссылка.Запасы Цикл
				НоваяСтрока = СписокДетали.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрЗаказ);
				НоваяСтрока.Заказ = СтрМассива.Ссылка;
				НоваяСтрока.НомерЗаказа = СтрМассива.Ссылка.НомерЗаказаОМА;
			КонецЦикла; 
		КонецЦикла; 
	ИначеЕсли ТипЗнч(МассивПеретаскивания) = Тип("Структура")  Тогда
		//Если ДокументЕстьВТаблицеМаршрута(МассивПеретаскивания.Документ)	Тогда
		//	Возврат;
		//КонецЕсли;
		//
		//НоваяСтрока = ТаблицаМаршрута.Добавить();
		//ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивПеретаскивания);
		//Если ЗначениеЗаполнено(МассивПеретаскивания.ЗонаДоставки) Тогда
		//	ЗонаТариф=МассивПеретаскивания.ЗонаДоставки; 
		//КонецЕсли;                                       
		
	Иначе
		Возврат;
	КонецЕсли; 
	//ТаблицаМаршрутаПриИзмененииНаСервере();
	ЗачеркнутьВыбранные();
КонецПроцедуры    

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СписокНачалоПеретаскиванияНаСервере(ПараметрыПеретаскивания.Значение);
КонецПроцедуры


&НаКлиенте
Процедура Очистить(Команда)
	СписокДетали.Очистить();
	ЗачеркнутьВыбранные();
КонецПроцедуры

&НаСервере
Процедура УдалитьСтроки(НомерЗаказа)
	СтруктураПоиска=Новый Структура("НомерЗаказа",НомерЗаказа);
	МассивСтрок=СписокДетали.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		СписокДетали.Удалить(СтрокаТаблицы)
	КонецЦикла;
	
	ЗачеркнутьВыбранные();
	
КонецПроцедуры


&НаКлиенте
Процедура СписокДеталиПередУдалением(Элемент, Отказ)
	УдалитьСтроки(Элемент.ТекущиеДанные.НомерЗаказа);
КонецПроцедуры



#КонецОбласти 


#Область ПриходнаяНакладная


&НаСервере
Процедура СоздатьПриходнуюНакладнуюНаСервере(АдресХранилищаПриходной=Неопределено)
	НачатьТранзакцию();
	Попытка
		
		
		Если НЕ  АдресХранилищаПриходной=Неопределено И ЭтоАдресВременногоХранилища(АдресХранилищаПриходной) Тогда
			ПриходСсылка = ПолучитьИзВременногоХранилища(АдресХранилищаПриходной);
			Если Не ТипЗнч(ПриходСсылка) =Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
				ОбщегоНазначения.СообщитьПользователю("Не удалосьполучить приходную накладную");
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
			ПриходОбъект = ПриходСсылка.ПолучитьОбъект();
			
		Иначе	
			
			СтратегияЗаполнения = Новый Соответствие;
			СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
			СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ЗаполнитьПоРасходнойНакладной";
			СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
			СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
			СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
			СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплатуПоставщика")] = "ЗаполнитьПоСчетуНаОплатуПоставщика";
			СтратегияЗаполнения[Тип("ДокументСсылка.СчетНаОплату")] = "ЗаполнитьПоСчетуНаОплатуВозврат";
			СтратегияЗаполнения[Тип("ДокументСсылка.ЧекККМ")] = "ЗаполнитьПоЧекуККМ";
			СтратегияЗаполнения[Тип("ДокументСсылка.ТТНВходящаяЕГАИС")] = "ЗаполнитьПоНакладнойЕГАИС";
			СтратегияЗаполнения[Тип("ДокументСсылка.ПриемИПередачаВРемонт")] = "ЗаполнитьПоПриемуВРемонт";
			СтратегияЗаполнения[Тип("СправочникСсылка.ДоговорыКонтрагентов")] = "ЗаполнитьПоДоговоруКонтрагента";
			СтратегияЗаполнения[Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоВходящейТранспортнойОперации";
			СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетКомиссионера")] = "ЗаполнитьПоОтчетуКомиссионера";
			СтратегияЗаполнения[Тип("ДокументСсылка.ПоступлениеНаСчет")] = "ЗаполнитьПоПоступлениюНаСчет";
			
			ДанныеЗаполнения = Новый Структура("ВидОперации,
			|  Дата,
			|   Договор,
			|   Комментарий,
			|   Контрагент,
			|   СпособЗачетаПредоплаты,
			|   СтруктурнаяЕдиница,
			|   СуммаВключаетНДС,
			|   ХозяйственнаяОперация",
			Перечисления.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию,
			ТекущаяДата(),
			СписокНастроек.ДоговорПоставщика,
			"Введено через АРМ склад ОМА",
			СписокНастроек.Поставщик,
			Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную,
			СписокНастроек.Склад,
			Ложь,
			Справочники.ХозяйственныеОперации.ПриемНаКомиссию);
			
			ПриходОбъект = Документы.ПриходнаяНакладная.СоздатьДокумент();
			ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ПриходОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
			ПриходОбъект.Запасы.Очистить(); 
		КонецЕсли;
		ТаблицаДетали = РеквизитФормыВЗначение("СписокДетали");
		МассивКолонка =  ТаблицаДетали.ВыгрузитьКолонку("Заказ");
		МассивСсылок=ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКолонка);
		
		Для каждого СтрТаб Из  МассивСсылок Цикл
			ЗапасЗаказа =  СтрТаб.Запасы;
			Для каждого СтрокаЗапасы Из  ЗапасЗаказа Цикл
				НоваяСтрока   =  ПриходОбъект.Запасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаЗапасы);
				НоваяСтрока.ЗаказПокупателя = СтрТаб;
			КонецЦикла; 
		КонецЦикла; 	
		
		ПриходОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Для каждого СтрТаб Из  МассивСсылок Цикл
			ЗаказаОбъект =СтрТаб.ПолучитьОбъект();
			ЗаказаОбъект.СостояниеЗаказа = СписокНастроек.СостояниеНаРЦ;
			ЗаказаОбъект.Записать();
		КонецЦикла; 
		ЗафиксироватьТранзакцию();
		СписокДетали.Очистить();
		Элементы.Список.Обновить();

	Исключение
		Элементы.Список.Обновить();
		ОтменитьТранзакцию();
		ОбщегоНазначения.СообщитьПользователю("Не удалось записать документ "+ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
		
КонецПроцедуры



&НаКлиенте
АСИНХ Функция ЗадатьВопросОДобавленииВПриходную(АдресХранилищаПриходной)
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("Добавить", НСтр("ru = ' Добавить в существующую'", "ru"));
	СписокКнопок.Добавить("Новый", НСтр("ru = ' Создать новую'", "ru"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ТекстВопроса = "Сегодня уже создана приходная накладная. Хотите добавить товар в неё?";
	
	
	Результат = Ждать ВопросАсинх(ТекстВопроса, СписокКнопок);
	Если Результат = "Добавить" Тогда
		СоздатьПриходнуюНакладнуюНаСервере(АдресХранилищаПриходной);
	ИначеЕсли Результат = "Новый" Тогда
		СоздатьПриходнуюНакладнуюНаСервере();
	КонецЕсли;
	
	
	
КонецФункции // ()

&НаСервере
Функция ПроверитьЕстьПриходная()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходнаяНакладная.Ссылка КАК Ссылка,
	|	ПриходнаяНакладная.Номер КАК Номер,
	|	ПриходнаяНакладная.Дата КАК Дата
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
	|ГДЕ
	|	ПриходнаяНакладная.Контрагент = &Контрагент
	|	И ПриходнаяНакладная.Договор = &Договор
	|	И НЕ ПриходнаяНакладная.ПометкаУдаления
	|	И ПриходнаяНакладная.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Договор", СписокНастроек.ДоговорПоставщика);
	Запрос.УстановитьПараметр("Контрагент", СписокНастроек.Поставщик);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	АдресХранилищаМаршрута=ПоместитьВоВременноеХранилище(Выборка.Ссылка) ;
	
	
	Возврат АдресХранилищаМаршрута;
	
	
	
КонецФункции


&НаКлиенте
Процедура ВзятьВРаботу(Команда)
	Если  СписокДетали.Количество()=0	 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Добавлять нечего");
		Возврат;
	КонецЕсли; 	
	
	АдресХранилищаПриходной = ПроверитьЕстьПриходная();
	Если НЕ  АдресХранилищаПриходной=Неопределено И ЭтоАдресВременногоХранилища(АдресХранилищаПриходной) Тогда
		ЗадатьВопросОДобавленииВПриходную(АдресХранилищаПриходной);
	Иначе
		СоздатьПриходнуюНакладнуюНаСервере();
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура СписокПриходныеПриАктивизацииНаСервере(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладнаяЗапасы.Ссылка КАК Ссылка,
		|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ПриходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПриходнаяНакладнаяЗапасы.Партия КАК Партия,
		|	ПриходнаяНакладнаяЗапасы.ЗаказПокупателя.НомерЗаказаОМА КАК НомерЗаказа,
		|	ПриходнаяНакладнаяЗапасы.Количество КАК Количество
		|ИЗ
		|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
		|ГДЕ
		|	ПриходнаяНакладнаяЗапасы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаПриход.Очистить();
	ТаблицаПриход.Загрузить(ТаблицаРезультата);


КонецПроцедуры


&НаКлиенте
Процедура СписокПриходныеПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = неопределено Тогда
		СписокПриходныеПриАктивизацииНаСервере(Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли; 
КонецПроцедуры



#КонецОбласти 