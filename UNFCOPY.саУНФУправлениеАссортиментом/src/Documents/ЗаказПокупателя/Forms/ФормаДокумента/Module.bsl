&НаКлиенте
Процедура саУНФ_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	Если Не Отказ И Модифицированность И ЗначениеЗаполнено(Объект.ПАК_МаршрутныйЛист) Тогда
		Если НЕ саУНФ_ОбщийМодуль.ЕстьРоль("саУНФ_РедактированиеЗаказаВклВМаршрут") Тогда
			
			Проверка = ПроверитьВхождениеВМаршрут();
			Если Проверка Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры




&НаСервере
Функция ПроверитьВхождениеВМаршрут()
	Если Не Объект.ПАК_МаршрутныйЛист.Состояние = Перечисления.СостояниеМаршрута.ВРаботе Тогда
		ОбщегоНазначения.СообщитьПользователю("Заказ в состоянии: "
											  + Строка(Объект.ПАК_МаршрутныйЛист.Состояние)
											  + ", редактирование закрыто");
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура саУНФ_ВидЗаказаПриИзмененииПосле(Элемент)
	Если Объект.ВидЗаказа = ПредопределенноеЗначение("Справочник.ВидыЗаказовПокупателей.Основной") Тогда
	         Объект.СпособДоставки   =  ПредопределенноеЗначение("Перечисление.СпособыДоставки.Курьер");
		     Объект.СлужбаДоставки  =   ПредопределенноеЗначение("Справочник.СлужбыДоставки.ДоставкаСобственнымиСилами");
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция УбратьСлужебнуюИнформациюИзПредставления(Знач МаршрутныйЛистПредставление)
	
	МаршрутныйЛистПредставление = СтрЗаменить(МаршрутныйЛистПредставление, НСтр("ru = ' (удален)'"),"");
	МаршрутныйЛистПредставление = СтрЗаменить(МаршрутныйЛистПредставление, НСтр("ru = ' (не проведен)'"),"");
	
	Возврат СокрЛП(МаршрутныйЛистПредставление);
	
КонецФункции

&НаСервере
Функция НайтиНомерЗаказаССайта()
//
ПВЧДопСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","НомерЗаказаССайта_8ce07edaba9d43f084f8e74649e0f2c8");	
Если ЗначениеЗаполнено(ПВЧДопСвойство) Тогда
     СтруктураПоиска = Новый Структура("Свойство",ПВЧДопСвойство);
	 МассивНайденных=Объект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
	 Если МассивНайденных.Количество()>0 Тогда
	         НомерСсайта = МассивНайденных[0].Значение;
	 	     Если  НЕ ПустаяСтрока(НомерСсайта) Тогда
			           Возврат СОКРЛП(НомерСсайта);
			 КонецЕсли; 
	 КонецЕсли;
КонецЕсли; 

Возврат Ложь;

КонецФункции // ()
 


&НаСервере
Процедура саУНФ_ПриСозданииНаСервереПосле2(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Ключ.Пустая() Тогда
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить("СтраницаФидбэк", Тип("ГруппаФормы"),Элементы.Страницы);
		НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
		НовыйЭлемент.Заголовок = "Обратная связь";
		
		
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ГруппаФидбэк", Тип("ГруппаФормы"),Элементы.СтраницаФидбэк);
		НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НовыйЭлемент.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  
		НовыйЭлемент.ОтображатьЗаголовок = Ложь;
		
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Фидбэк", Тип("ПолеФормы"),Элементы.ГруппаФидбэк);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Объект.Фидбэк";
		НовыйЭлемент.Заголовок = "Звонок клиенту";

		НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ГруппаРасширение", Тип("ГруппаФормы"),Элементы.ГруппаФидбэк);
		НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НовыйЭлемент.Группировка  = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;  
		НовыйЭлемент.ОтображатьЗаголовок = Ложь;

		
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ДекорацияФидбэк", Тип("ДекорацияФормы"),Элементы.ГруппаРасширение);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Заголовок = "Содержание  :";
		НовыйЭлемент.ЦветТекста = WebЦвета.Белый;
		
		
		НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Расширение", Тип("ПолеФормы"),Элементы.ГруппаРасширение);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "Объект.Расширение";
		НовыйЭлемент.Подсказка = "Краткое содержание разговора";
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ПодсказкаВвода = "Краткое содержание разговора";
		НовыйЭлемент.МногострочныйРежим = Истина;
		
		ГруппаКомандыВажно=Элементы.КомандыВажно;
		НовоеПодменю = ЭтаФорма.Элементы.Добавить("СчетаOnLine",  Тип("ГруппаФормы"), ГруппаКомандыВажно);
		НовоеПодменю.Вид = ВидГруппыФормы.Подменю;
		НовоеПодменю.Заголовок="Счета On Line";
		НовоеПодменю.Отображение =  ОтображениеКнопки.Картинка;
		НовоеПодменю.Картинка = БиблиотекаКартинок.card;
		
		Команда		= ЭтаФорма.Команды.Добавить("ОплатаERIP");
		Команда.Действие	= "СчетДляОплатаERIP";
		Команда.Отображение	=	ОтображениеКнопки.Картинка;
		Команда.Картинка	= 	БиблиотекаКартинок.erip;
		
		// Создадим кнопку и привяжем к ней команду
		Кнопка		= ЭтаФорма.Элементы.Добавить("ОплатаERIP", Тип("КнопкаФормы"), ЭтаФорма.Элементы.СчетаOnLine);
		Кнопка.Заголовок	= "Выставление счета в erip";
		Кнопка.ИмяКоманды	= "ОплатаERIP";
		

		Команда		= ЭтаФорма.Команды.Добавить("ОплатаVISA");
		Команда.Действие	= "СсылкаНаОплатуOnLine";
		Команда.Отображение	=	ОтображениеКнопки.Картинка;
		Команда.Картинка= БиблиотекаКартинок.visa;

		// Создадим кнопку и привяжем к ней команду
		Кнопка		= ЭтаФорма.Элементы.Добавить("ОплатаVISA", Тип("КнопкаФормы"), ЭтаФорма.Элементы.СчетаOnLine);
		Кнопка.Заголовок	= "Ссылка на оплату On Line";
		Кнопка.ИмяКоманды	= "ОплатаVISA";
		
		
	КонецЕсли;
	
		
	МаршрутныйЛистТекст ="Маршрутный лист ";
	Если ЗначениеЗаполнено(Объект.ПАК_МаршрутныйЛист) Тогда
		МаршрутныйЛистПредставление = СокрЛП(Строка(Объект.ПАК_МаршрутныйЛист));
		МаршрутныйЛистПредставление = СтрЗаменить(МаршрутныйЛистПредставление, НСтр("ru = 'ПАК маршрутный лист '"), "");
		МаршрутныйЛистПредставление = УбратьСлужебнуюИнформациюИзПредставления(МаршрутныйЛистПредставление);
		МаршрутныйЛистТекст = МаршрутныйЛистТекст + МаршрутныйЛистПредставление;
	Иначе
		МаршрутныйЛистТекст = МаршрутныйЛистТекст + НСтр("ru = 'не найден'");
	КонецЕсли;
	
	Элементы.МаршрутныйЛистНадпись.Заголовок =  МаршрутныйЛистТекст;
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ТелефонКурьера", Тип("ПолеФормы"),Элементы.ГруппаСОтступом);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	//НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовыйЭлемент.ПутьКДанным = "Объект.ТелефонКурьера";
	//ЭтаФорма.Элементы.Переместить(НовыйЭлемент,Элементы.ГруппаСОтступом,Элементы.Курьер);
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Доставлен",Тип("ПолеФормы"),Элементы.ГруппаСОтступом);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.Доставлен";
	
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("Наличка",Тип("ПолеФормы"),Элементы.ОтгрузкаИОплата);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "Объект.Наличка";
	НовыйЭлемент.Заголовок ="По чеку";
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ключ) И Объект.ВидЗаказа=Справочники.ВидыЗаказовПокупателей.Основной Тогда
		Объект.СпособДоставки = Перечисления.СпособыДоставки.ПустаяСсылка();
	КонецЕсли; 

	
	//НомерСсайта=НайтиНомерЗаказаССайта();
	//Если ТипЗнч(НомерСсайта)=Тип("Строка") Тогда
	//	// Создадим команду
	//	Команда		= ЭтаФорма.Команды.Добавить("ПроверитьОплату");
	//	Команда.Действие	= "ПроверитьОплату";
	//	
	//	// Создадим кнопку и привяжем к ней команду
	//	Кнопка		= ЭтаФорма.Элементы.Добавить("ПроверитьОплату", Тип("КнопкаФормы"), ЭтаФорма.Элементы.ОтгрузкаИОплата);
	//	Кнопка.Заголовок	= "Проверить оплату bepaid";
	//	Кнопка.ИмяКоманды	= "ПроверитьОплату";
	//	
	//	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("ЗаголовокОплачено", Тип("ДекорацияФормы"),Элементы.ОтгрузкаИОплата);
	//	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	//	Если  Объект.Оплачено=3 Тогда
	//		НовыйЭлемент.Заголовок = "Оплачено";
	//		НовыйЭлемент.ЦветТекста = WebЦвета.Зеленый;
	//	ИначеЕсли  Объект.Оплачено=2 Тогда
	//        НовыйЭлемент.Заголовок = "Частично оплачено";
	//		НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
	//	Иначе
	//		НовыйЭлемент.Заголовок = "Не оплачено";
	//		НовыйЭлемент.ЦветТекста = WebЦвета.Красный;
	//	КонецЕсли;
	//	
	//			
	//	НовыйЭлемент = ЭтаФорма.Элементы.Добавить("СтрокаОплаты",Тип("ПолеФормы"),Элементы.ДополнительноПраво);
	//	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	//	НовыйЭлемент.ПутьКДанным = "Объект.СтрокаОплаты";
	//	НовыйЭлемент.Заголовок ="Детали оплаты";
	//	НовыйЭлемент.МногострочныйРежим = Истина;
	//	
	//	
	//КонецЕсли; 

	// Создадим команду
		Команда		= ЭтаФорма.Команды.Добавить("ДополнительныеАдреса");
		Команда.Действие	= "ДополнительныеАдреса";
		
		// Создадим кнопку и привяжем к ней команду
		Кнопка		= ЭтаФорма.Элементы.Добавить("ДополнительныеАдреса", Тип("КнопкаФормы"), ЭтаФорма.Элементы.ГруппаПравоеОбъединение);
		Кнопка.Заголовок	= "Поменять адрес доставки";
		Кнопка.ИмяКоманды	= "ДополнительныеАдреса";
		
		
		//ГруппаПроверкаУНП = ЭтаФорма.Элементы.Добавить("ГруппаОбычная", Тип("ГруппаФормы"),Элементы.ШапкаЛево);
		//ГруппаПроверкаУНП.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		//ГруппаПроверкаУНП.Отображение = ОтображениеОбычнойГруппы.Нет;
		//ГруппаПроверкаУНП.ОтображатьЗаголовок = ЛОЖЬ; 
		//ГруппаПроверкаУНП.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		
		// Создадим команду
		Команда		= ЭтаФорма.Команды.Добавить("НайтиПоУНП");
		Команда.Действие	= "НайтиПоУНП";
		Команда.Отображение=ОтображениеКнопки.Картинка;
		Команда.Картинка= БиблиотекаКартинок.Найти;
		// Создадим кнопку и привяжем к ней команду
		Кнопка		= ЭтаФорма.Элементы.Добавить("НайтиПоУНП", Тип("КнопкаФормы"), ЭтаФорма.Элементы.КонтрагентИнформация);
		Кнопка.Заголовок	= "Найти по УНП";
		Кнопка.ИмяКоманды	= "НайтиПоУНП";
        
        ЭтаФорма.Элементы.Переместить(ЭтаФорма.Элементы.НайтиПоУНП, ЭтаФорма.Элементы.КонтрагентИнформация,ЭтаФорма.Элементы.ОстатокВзаиморасчетов);
		Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		       Элементы.НайтиПоУНП.Видимость = Ложь;
		КонецЕсли; 
КонецПроцедуры

#Область ВыставлениеСчетовBePaid

&НаСервере
Функция ПроверитьEMailКонтрагента()
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(Объект.Контрагент.АдресЭПДляПоиска) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_ОбщийМодуль");
	Если  НЕ ОМ = Неопределено Тогда
		Если  НЕ ОМ.EmailValid(Объект.Контрагент.АдресЭПДляПоиска) Тогда
			Возврат Ложь;
		КонецЕсли; 		 
	Иначе	
		Возврат Ложь;
	КонецЕсли; 

	Возврат Истина;
	
КонецФункции // ()

&НаСервере 
Функция СтруктураДанныхДляВыставленияСчета(Предоплата)
    СтруктураСчета = Новый Структура("amount,currency,email,order_id,expired_at,first_name,address,phone,test");
	
	СтруктураСчета.amount= ОКР(Объект.СуммаДокумента*Предоплата,0);
	СтруктураСчета.email = Объект.Контрагент.АдресЭПДляПоиска;
	
	order_id=ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Объект.Номер,Истина,Истина);
	СтруктураСчета.order_id=ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(order_id);
	
	currency=СОКРЛП(Объект.ВалютаДокумента.Наименование);

	Если  ПустаяСтрока(currency) Тогда
		currency="BYN" ;
	КонецЕсли; 
    СтруктураСчета.currency = currency;
	
	СрокПлатежа = КОНЕЦДНЯ(ТекущаяДата())+3*86400;
	СтруктураСчета.expired_at  = ЗаписатьДатуJSON(СрокПлатежа,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.УниверсальнаяДата);
	
	СтруктураСчета.first_name = СокрЛП(Объект.Контрагент.Наименование);
	
	address = Объект.АдресДоставки;
	Если ПустаяСтрока(address)  Тогда
	   ТаблицаAddress = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Объект.Контрагент, Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета,,Ложь);
	   Для каждого СтрТаб  Из ТаблицаAddress Цикл
	             address =СтрТаб.Представление;
	   КонецЦикла; 
   КонецЕсли; 
	СтруктураСчета.address = address;
	СтруктураСчета.phone = Объект.Контрагент.НомерТелефонаДляПоиска;
	//костыль
	СтруктураСчета.test = Ложь;
	Возврат СтруктураСчета;
КонецФункции // ()
 
&НаСервере 
Функция СформироватьСтруктуруЗаказа()
	СтруктураЗаказа = Новый Структура("Заказ, email, order_id, Сумма, Валюта");
	СтруктураЗаказа.Заказ = Объект.Ссылка;
	СтруктураЗаказа.email = Объект.Контрагент.АдресЭПДляПоиска;
	order_id=ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Объект.Номер,Истина,Истина);
	СтруктураЗаказа.order_id=ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(order_id);
	//СтруктураЗаказа.Сумма= Объект.СуммаДокумента;
	СтруктураЗаказа.Валюта = Объект.ВалютаДокумента;
	Возврат СтруктураЗаказа;
КонецФункции // ()
 

&НаСервере 
Функция СчетДляОплатаERIPСервер(СтруктураСчета)
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_Bitrix");
	 Если ОМ=Неопределено Тогда
	          Возврат Ложь;
	 КонецЕсли; 
	
	СтрокаJSON=ОМ.JSONforERIP(СтруктураСчета);
	Если НЕ ЛЕВ(СтрокаJSON,1)="{" Тогда
	          Возврат Ложь;
	КонецЕсли; 

	 МассивОтвета = ОМ.ОтправитьВERIP(СтрокаJSON);
	 Если ТипЗнч(МассивОтвета) = Тип("Булево") Тогда
	         Возврат Ложь;
	   Иначе		 
		      СтруктураЗаказа=СформироватьСтруктуруЗаказа();
			  СтруктураЗаказа.Сумма=СтруктураСчета.amount/100;
		      Ответ=ОМ.РазборОтветаERIP(МассивОтвета,СтруктураЗаказа);
			  Возврат Ответ;
	  КонецЕсли; 
 КонецФункции // ()
 
&НаСервере 
Функция СчетДляОплатаONLINEСервер(СтруктураСчета)
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_Bitrix");
	 Если ОМ=Неопределено Тогда
	          Возврат Ложь;
	 КонецЕсли; 
	
	СтрокаJSON=ОМ.JSONforONLINE(СтруктураСчета);
	Если НЕ ЛЕВ(СтрокаJSON,1)="{" Тогда
	          Возврат Ложь;
	КонецЕсли; 

	 МассивОтвета = ОМ.ОтправитьONLINE(СтрокаJSON);
	 Если ТипЗнч(МассивОтвета) = Тип("Булево") Тогда
		 Возврат Ложь;
	 Иначе
		  СтруктураЗаказа=СформироватьСтруктуруЗаказа();
		  СтруктураЗаказа.Сумма=СтруктураСчета.amount/100;
		  Ответ=ОМ.РазборОтветаONLINE(МассивОтвета,СтруктураЗаказа);   
		  Возврат Ответ;
	 КонецЕсли; 
		 
 КонецФункции // ()

 &НаСервере
 Функция  ОтправитьКлиентуНаПочту()
	 МассивОбъектов   = Новый Массив;
	 МассивОбъектов.Добавить(Объект.Ссылка);
	 ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_Bitrix");
	 Если НЕ ОМ=Неопределено Тогда
	    СтруктураЗаказа=ОМ.ПолучитьПоследнийВыставленныйСчет(МассивОбъектов);
	Иначе	
		Возврат Ложь;
	КонецЕсли; 
	 
	 
	 Если ТипЗнч(СтруктураЗаказа)=Тип("Булево") Тогда
		    ШаблонСообщения =  СтрШаблон("Счет по номеру заказа %1 не был выставлен", ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(МассивОбъектов[0].Номер,Истина,Истина));
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения);
			Возврат Ложь;
		КонецЕсли; 
		
		Если  СтруктураЗаказа.СпособОплаты = Перечисления.СпособОплаты.ERIP Тогда
		       QRСтрока=СокрЛП(СтруктураЗаказа.QR);
		ИначеЕсли  СтруктураЗаказа.СпособОплаты = Перечисления.СпособОплаты.Card Тогда
	           QRСтрока=СокрЛП(СтруктураЗаказа.QR_RAW);
		КонецЕсли; 
		
		Если  ПустаяСтрока(QRСтрока) Тогда
			ШаблонСообщения =  СтрШаблон("Счет по номеру заказа %1 не был выставлен", ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(МассивОбъектов[0].Номер,Истина,Истина));
			ОбщегоНазначения.СообщитьПользователю(ШаблонСообщения);
			Возврат Ложь;
		КонецЕсли; 

		 //+тест
		 Если СтруктураЗаказа.СпособОплаты = Перечисления.СпособОплаты.ERIP И Лев(QRСтрока,4)="data" Тогда
			QRСтрока=СокрЛП(СтрЗаменить(QRСтрока,"data:image/png;base64,","")); 
			ЕРИП = Истина;
		ИначеЕсли СтруктураЗаказа.СпособОплаты = Перечисления.СпособОплаты.Card И Лев(QRСтрока,4)="http" Тогда	
			ЕРИП = Ложь;
		КонецЕсли; 
		 
		 
		 
		 СтруктураПараметров = Новый Структура;
		 СтруктураПараметров.Вставить("QRСтрока",QRСтрока);
		 СтруктураПараметров.Вставить("Кому",СтруктураЗаказа.email);
		 СтруктураПараметров.Вставить("Тема","Оплата по заказу "+СтруктураЗаказа.НомерЗаказа);
		 СтруктураПараметров.Вставить("НомерЗаказа",СтруктураЗаказа.НомерЗаказа);
		 СтруктураПараметров.Вставить("ЕРИП",ЕРИП);

		 ОМ.ОтправитьНаПочтуОплату(СтруктураПараметров) ;
		

	      Возврат Истина;
 КонецФункции	 
 
 &НаКлиенте
 Функция ФормированиеСчетаOnLine(Тип="erip",Предоплата)
	 
	 Если  Модифицированность Тогда
		 ОбщегоНазначенияКлиент.СообщитьПользователю("Перед выставлением счета документ нужно записать");
		 Возврат Ложь;
	 КонецЕсли; 
	 
	 Если  НЕ ПроверитьEMailКонтрагента() Тогда
		 ОбщегоНазначенияКлиент.СообщитьПользователю("У покупателя должен быть e-mail");
		 Возврат Ложь;
	 КонецЕсли; 
	 СтруктураСчета=СтруктураДанныхДляВыставленияСчета(Предоплата);
	 
	 Если  НЕ СтруктураСчета=Неопределено Тогда
		 
		 Если Тип="erip" Тогда
			 Ответ = СчетДляОплатаERIPСервер(СтруктураСчета);
		 ИначеЕсли  Тип="credit_card" Тогда
			 Ответ = СчетДляОплатаONLINEСервер(СтруктураСчета);
		 КонецЕсли;
		 
		 
		 Если  НЕ Ответ Тогда
			 ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось сформировать счет");
			 Возврат Ложь;
		 КонецЕсли; 
		 ОтправитьКлиентуНаПочту();
		 		 
		 Возврат Ответ;
	 Иначе		  
		 ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось сформировать счет");
		 Возврат Ложь;
	 КонецЕсли; 
	 
 КонецФункции // ()
   
 &НаКлиенте
 Асинх Процедура СчетДляОплатаERIP(Команда)
	 ПроцентОплаты=30;
	 Результат=ЖДАТЬ ВвестиЧислоАсинх(ПроцентОплаты,"Введите % предоплаты",15,0);
	 Если ТипЗнч(Результат)=Тип("Число") И Результат>0 Тогда
	 
	 	Ответ = ФормированиеСчетаOnLine("erip",Результат);
	    Если Ответ Тогда
		    ОбщегоНазначенияКлиент.СообщитьПользователю("Счет сформирован");
		КонецЕсли; 
	 КонецЕсли; 
	       
КонецПроцедуры

&НаКлиенте
Асинх Процедура СсылкаНаОплатуOnLine(Команда)
	ПроцентОплаты=30;
	Результат=ЖДАТЬ ВвестиЧислоАсинх(ПроцентОплаты,"Введите % предоплаты",15,0);
	Если ТипЗнч(Результат)=Тип("Число") И Результат>0 Тогда
		
		Ответ = ФормированиеСчетаOnLine("credit_card",Результат);
		 Если Ответ Тогда
		    ОбщегоНазначенияКлиент.СообщитьПользователю("Ссылка на оплату сформирована");
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры
	

#КонецОбласти 



&НаКлиенте
Процедура ДополнительныеАдреса(Команда)
	
    ПараметрыФормы = Новый Структура("Контрагент",Объект.Контрагент);
	ОткрытьФорму("РегистрСведений.саУНФ_ДополнительнаяКонтактнаяИнформация.Форма.ФормаВыбораАдреса",ПараметрыФормы,ЭтаФорма,УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ПроверитьОплатуНаСервере()
         НомерСсайта=НайтиНомерЗаказаССайта();
		 Если ТипЗнч(НомерСсайта)=Тип("Строка") Тогда
			 СтруктураПроверки = Новый Структура("Дата,НомерСсайта",Объект.Дата,НомерСсайта);
			 ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_Bitrix");
			 Если НЕ ОМ = Неопределено Тогда
				 СтруктураОтвета=ОМ.ЗапроситьОтчетBePaid(СтруктураПроверки,"credit_card");
				 Если СтруктураОтвета.СуммаОплаты=0 Тогда
					          СтруктураОтвета=ОМ.ЗапроситьОтчетBePaid(СтруктураПроверки,"erip");
		         КонецЕсли;
				 
				 Если СтруктураОтвета.СуммаОплаты>0 Тогда
				         Если Объект.СуммаДокумента <= СтруктураОтвета.СуммаОплаты Тогда
							      Элементы.ЗаголовокОплачено.Заголовок = "Оплачено";
							 	  Объект.Оплачено=3;
								  Элементы.ЗаголовокОплачено.ЦветТекста = WebЦвета.Зеленый;
						 Иначе	
						          Объект.Оплачено=2;
								  Элементы.ЗаголовокОплачено.Заголовок = "Частично оплачено";
								  Элементы.ЗаголовокОплачено.ЦветТекста = WebЦвета.Синий;
						 КонецЕсли; 
						 
						  Объект.СтрокаОплаты  = " Оплачено: "+ Строка(СтруктураОтвета.СуммаОплаты)+Символы.ВК;
						  Если СтруктураОтвета.Свойство("brand") И СтруктураОтвета.Свойство("bin") И СтруктураОтвета.Свойство("last_4") 
							  И СтруктураОтвета.Свойство("issuer_name") И  СтруктураОтвета.Свойство("exp_month") И СтруктураОтвета.Свойство("exp_year") 
							  И СтруктураОтвета.Свойство("issuer_country") Тогда 
							  
						      Объект.СтрокаОплаты  =Объект.СтрокаОплаты+" Карта: "+  СтруктураОтвета.bin +"******" + СтруктураОтвета.last_4 + " Банк: " + СтруктураОтвета.issuer_name+ " срок: "  
							  +  Строка(СтруктураОтвета.exp_month)+"/"+Строка(СтруктураОтвета.exp_year) +" "+СтруктураОтвета.issuer_country+Символы.ВК;
						  КонецЕсли; 
						  Если СтруктураОтвета.Свойство("holder") Тогда 
							      Объект.СтрокаОплаты  =Объект.СтрокаОплаты+" Держатель карты: " +  СтруктураОтвета.holder;
						  КонецЕсли;
						  						 						 
						 Модифицированность=Истина;
				
				КонецЕсли;  
			
				 
			 КонецЕсли;
		 КонецЕсли;	 
		 
		 
КонецПроцедуры



&НаКлиенте
Процедура ПроверитьОплату(Команда)
	        ПроверитьОплатуНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура саУНФ_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="Выбран другой адрес" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Объект.АдресДоставки                             =     Параметр.Представление;
			Объект.АдресДоставкиЗначение              	=     Параметр.Значение;
			Объект.АдресДоставкиЗначенияПолей     	=     Параметр.ЗначенияПолей;
			Модифицированность = Истина;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Дополнительных адресов нет. Дополнительные адреса вводятся в справочнике покупатели'");
			Сообщение.Сообщить();
		КонецЕсли; 
		ИначеЕсли ИмяСобытия="ВведенКонтрагент" Тогда

		      Если ТипЗнч(Параметр) = Тип("Структура") Тогда
		       Если Параметр.Свойство("Контрагент") Тогда
			            Если ТипЗнч(Параметр.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
							Объект.Контрагент = Параметр.Контрагент;
							КонтрагентПриИзменении(Элементы.Контрагент);
							Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
							Объект.ДатаОтгрузки = ТекущаяДата()+3*86400;
						КонецЕсли; 
			   КонецЕсли; 
		КонецЕсли; 

		
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресДоставки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыКонтактнаяИнформация.Представление КАК Представление,
		|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтрагентыКонтактнаяИнформация.Значение КАК Значение
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид";
	
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагета);
	Запрос.УстановитьПараметр("Ссылка", Объект.Контрагент);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Результат = Запрос.Выполнить();
	Если  Результат.Пустой() Тогда
	          Возврат Неопределено;
	КонецЕсли; 
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЛЕВ(СОКРЛП(Выборка.Значение),1)="{" Тогда
	АдресВСвободнойФорме=УправлениеКонтактнойИнформацией.АдресВведенВСвободнойФорме(Выборка.Значение)	;
	Если АдресВСвободнойФорме Тогда
	        Возврат Неопределено;
	Иначе
	     СтруктураАдреса = Новый Структура("Представление,ЗначенияПолей,Значение",);
		 ЗаполнитьЗначенияСвойств(СтруктураАдреса, Выборка);
	      Возврат  СтруктураАдреса;
	КонецЕсли; 
	    Возврат Неопределено;
	КонецЕсли;


КонецФункции // ()
 

&НаКлиенте
Процедура саУНФ_КонтрагентПриИзмененииПосле(Элемент)
	СтруктураАдреса = ПолучитьАдресДоставки() ;
	Если НЕ СтруктураАдреса=Неопределено Тогда
		Объект.АдресДоставки                             =     СтруктураАдреса.Представление;
		Объект.АдресДоставкиЗначение              	=     СтруктураАдреса.Значение;
		Объект.АдресДоставкиЗначенияПолей     	=     СтруктураАдреса.ЗначенияПолей;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура саУНФ_ПриОткрытииПосле(Отказ)
	ИскомоеЗначение=Элементы.СпособДоставки.СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СпособыДоставки.Курьер"));
	Если НЕ ИскомоеЗначение = Неопределено Тогда
	         ИскомоеЗначение.Представление = "Доставка";
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура саУНФ_СпособДоставкиПриИзмененииПосле(Элемент)
	Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз")  Тогда
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Учтите, заказ останется на складе. Логист его даже не увидит!";
		Сообщение.Поле = "Объект.СпособДоставки";
		Сообщение.Сообщить();
	КонецЕсли;
КонецПроцедуры

#Область ПоискПоУНП

&НаСервере
Функция ПолучитьДанныеКонтрагентаИзКартотеки(НовыйИНН)
	Отказ=Ложь;
	
	ЕстьКонтрагент= саУНФ_Bitrix.ПроверитьСуществуетЛиКонтрагентВБазе(НовыйИНН);
	Если ТипЗнч(ЕстьКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПараметрыФормы = Новый Структура("Ключ",ЕстьКонтрагент);
		Возврат  ПараметрыФормы;
	КонецЕсли;
	
	
	
	ДанныеКонтрагента=саУНФ_Bitrix.ОбработатьКонтрагентаПоИНН(НовыйИНН);
	Если  ДанныеКонтрагента = Неопределено ИЛИ НЕ ТипЗнч(ДанныеКонтрагента)=Тип("Структура") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрос не удался. Попробуйте позже.'"),, ,, Отказ);
		Возврат Ложь;
	КонецЕсли; 
	Если НЕ ДанныеКонтрагента.Свойство("success") ИЛИ НЕ ДанныеКонтрагента.Свойство("data")Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрос не удался. Попробуйте позже.'"),, ,, Отказ);
		Возврат Ложь;
	КонецЕсли;  
	Если НЕ ДанныеКонтрагента.success Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрос не удался. Попробуйте позже.'"),, ,, Отказ);
		Если ДанныеКонтрагента.Свойство("errors") Тогда
			Если ТипЗнч(ДанныеКонтрагента.errors)=Тип("Массив") Тогда
				Если ДанныеКонтрагента.errors.Количество()>0  Тогда
					текстСообщения =  СОКРЛП(ДанныеКонтрагента.errors[0]);
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = '"+текстСообщения+"'"),, ,,Отказ );
					Возврат Ложь;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	
	Если ТипЗнч(ДанныеКонтрагента.data) = Тип("Структура") Тогда
		Data = ДанныеКонтрагента.data;
		//УНП
		Если Data.Свойство("unp") Тогда
			Если СокрЛП(Data.unp)="" Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Контрагента с УНП "+НовыйИНН+" не существует'"),, ,, Отказ);
				Возврат Ложь;
			КонецЕсли; 
		Иначе  	
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Контрагента с УНП "+НовыйИНН+" не существует'"),, ,, Отказ);
			Возврат Ложь;
		КонецЕсли; 
		//Действующий
		Если Data.Свойство("status_mns")  Тогда
			Если СокрЛП(Data.status_mns)<>"Действующий" Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Контрагента с УНП "+НовыйИНН+" не действующий'"),, ,, Отказ);
				Возврат Ложь;
			КонецЕсли; 
		Иначе  	
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Контрагента с УНП "+НовыйИНН+" не действующий'"),, ,, Отказ);
			Возврат Ложь;
		КонецЕсли; 
		
		ПараметрыКонтрагента = Новый Структура("ИНН,НаименованиеПолное,Наименование,ЮрАдрес");
		ПараметрыКонтрагента_ИНН = СтрЗаменить(СокрЛП(Data.unp)," ","");
		ПараметрыКонтрагента.ИНН =СтрЗаменить(ПараметрыКонтрагента_ИНН,Символы.НПП,"");
		Если Data.Свойство("name")  Тогда
			ПараметрыКонтрагента.НаименованиеПолное = Data.name;
		КонецЕсли;
		Если Data.Свойство("short_name")  Тогда
			ПараметрыКонтрагента.Наименование = Data.short_name;
		КонецЕсли;
		Если Data.Свойство("address")  Тогда
			ПараметрыКонтрагента.ЮрАдрес	=	Data.address;
		КонецЕсли; 
		Возврат ПараметрыКонтрагента;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Запрос не удался. Попробуйте позже.'"),, ,, Отказ);
	КонецЕсли; 
	
	
	
	Возврат Истина;
КонецФункции // ()




&НаКлиенте
АСИНХ Функция ЗапросУНП()
	Перем НовыйИНН;
	Результат = Ждать ВвестиСтрокуАсинх(НовыйИНН,"Введите УНП",9,Ложь);  
	Если Результат = Неопределено ИЛИ Результат ="" ИЛИ СтрДлина(Результат)<>9 Тогда
		  ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'УНП должен содержать 9 цфр.'"),, ,, );
		   Возврат Ложь;
	КонецЕсли;

	Проверка = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Результат);
	Если Не Проверка Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'УНП должен содержать только цифры.'"),, ,, );
		Возврат Ложь;
	КонецЕсли;
		
	Ответ=ПолучитьДанныеКонтрагентаИзКартотеки(Результат);	
	Если ТипЗнч(Ответ)=Тип("Структура") Тогда
		Если Ответ.Свойство("Ключ") Тогда
		         Объект.Контрагент = Ответ.Ключ;
				 КонтрагентПриИзменении(Элементы.Контрагент);
				 
				 				 
				 Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
				 Объект.ДатаОтгрузки = ТекущаяДата()+3*86400;
         ИначеЕсли Ответ.Свойство("ИНН") Тогда
			 ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыполнитьПослеОкончания", ЭтотОбъект );
			 
			 ОткрытьФорму("ОбщаяФорма.КонтактыЮрЛица", Ответ, ЭтаФорма,
	УникальныйИдентификатор,,, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		
		КонецЕсли; 
  КонецЕсли;
КонецФункции // ()

&НаКлиенте
Процедура ВыполнитьПослеОкончания(Результат,ДопПараметры)  Экспорт
	    Если ТипЗнч(Результат) = Тип("Структура") Тогда
		       Если Результат.Свойство("Контрагент") Тогда
			            Если ТипЗнч(Результат.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
							Объект.Контрагент = Результат.Контрагент;
							КонтрагентПриИзменении(Элементы.Контрагент);
							Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
							Объект.ДатаОтгрузки = ТекущаяДата()+3*86400;
						КонецЕсли; 
			   КонецЕсли; 
		КонецЕсли; 
КонецПроцедуры



&НаКлиенте
Процедура НайтиПоУНП(Команда)
		НовыйИНН=ЗапросУНП();
КонецПроцедуры

&НаКлиенте
Процедура саУНФ_ДатаОтгрузкиПриИзмененииПосле(Элемент)
	Если НачалоДня(Объект.ДатаОтгрузки)<НачалоДня(Объект.Дата) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Дата отгрузки не может быть меньше даты заказа");
		Объект.ДатаЗаказа = Объект.Дата;
	КонецЕсли; 
			
	Если НачалоДня(Объект.ДатаОтгрузки)>ДобавитьМесяц(НачалоДня(Объект.Дата),1) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Максимальна дата отгрузки не больше месяца от даты заказа");
		Объект.ДатаОтгрузки = ДобавитьМесяц(Объект.Дата,1);
	КонецЕсли;
КонецПроцедуры
 
#КонецОбласти

