
&Вместо("ОбработкаЗаполнения")
Процедура саУНФ_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.АвансовыйОтчет")] = "ЗаполнитьПоАвансовомуОтчету";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказНаПроизводство")] = "ЗаполнитьПоЗаказуНаПроизводство";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеПоЯчейкам")] = "ЗаполнитьПоПеремещениюПоЯчейкам";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкеЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоВходящейТранспортнойОперации";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоИсходящейТранспортнойОперации";
	
	//***Начало***01.06.2021***МурашкоВ
	СтратегияЗаполнения[Тип("ДокументСсылка.саУНФ_ЗаказСнабжения")] = "ЗаполнитьПосаУНФ_ЗаказСнабжения";
	//***Конец***01.06.2021***МурашкоВ
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "ЗаказПокупателя");
	
	ЗаполнитьПодписиКладовщиков();
	
КонецПроцедуры

Процедура ЗаполнитьПосаУНФ_ЗаказСнабжения(ДокументСсылкаЗаказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Ссылка КАК ЗаказСнабжения,
	|   ТаблицаДокумента.ДатаОтгрузки КАК Дата,
	|   ТаблицаДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Вес КАК Вес,
	|	ТаблицаДокумента.СтруктурнаяЕдиницаРеципиент КАК СтруктурнаяЕдиницаПолучатель,
	|	ТаблицаДокумента.СтруктурнаяЕдиницаРеципиент КАК СтруктурнаяЕдиницаРеципиент,
	|	&ПредставлениеСсылки  КАК Комментарий,
	|	ТаблицаДокумента.Ячейка КАК ЯчейкаПолучатель,
	|	ТаблицаДокумента.ОжидаетсяВыборВариантаКП,
	|	ТаблицаДокумента.Грузоотправитель,
	|	ТаблицаДокумента.Грузополучатель,
	|	ТаблицаДокумента.АдресДоставки
	|ИЗ
	|	Документ.саУНФ_ЗаказСнабжения КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьЗапасы.Ссылка КАК ЗаказПокупателя,
	|	ТабличнаяЧастьЗапасы.НомерСтроки,
	|	ТабличнаяЧастьЗапасы.Номенклатура,
	|	ТабличнаяЧастьЗапасы.Характеристика,
	|	ТабличнаяЧастьЗапасы.Партия,
	|	ТабличнаяЧастьЗапасы.Вес,
	|	ТабличнаяЧастьЗапасы.ЕдиницаИзмерения,
	|	ТабличнаяЧастьЗапасы.Количество,
	|	ТабличнаяЧастьЗапасы.Содержание
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ТабличнаяЧастьЗапасы
	|ГДЕ
	|	ТабличнаяЧастьЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказ);
	Запрос.УстановитьПараметр("ПредставлениеСсылки","Введен на основании: " +СОКРЛП(Строка(ДокументСсылкаЗаказ)));
	Документы.саУНФ_ЗаказСнабжения.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДокументСсылкаЗаказ, Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Ссылка КАК ДокументОснование", "&Ссылка КАК ЗаказПокупателя");
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	ЭтотОбъект.Дата=НачалоДня(ЭтотОбъект.Дата)+8*60*60;
	ЭтотОбъект.ДатаОтгрузки = НачалоДня(ЭтотОбъект.Дата)+9*60*60;
	Запасы.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
КонецПроцедуры


Функция ПриОтменеЗаказа()
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	саУНФ_ЗаказСнабженияЗапасы.Номенклатура КАК Номенклатура,
	|	саУНФ_ЗаказСнабженияЗапасы.Номенклатура.Представление КАК НоменклатураПредставление ,
	|	СУММА(саУНФ_ЗаказСнабженияЗапасы.Количество) КАК Количество
	|ИЗ
	|	Документ.саУНФ_ЗаказСнабжения.Запасы КАК саУНФ_ЗаказСнабженияЗапасы
	|ГДЕ
	|	саУНФ_ЗаказСнабженияЗапасы.Ссылка = &СсылкаСнабжение
	|
	|СГРУППИРОВАТЬ ПО
	|	саУНФ_ЗаказСнабженияЗапасы.Номенклатура,
	|	саУНФ_ЗаказСнабженияЗапасы.Номенклатура.Представление";
	
	Запрос.УстановитьПараметр("ПеремещениеСсылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаСнабжение", ЭтотОбъект.Ссылка.ЗаказСнабжения);
	
	СоответсвиеНоменклатуры = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	саУНФ_АтозаказВызовСервера.ОчиститьНаборЗаписейВызовСервера(ЭтотОбъект.Ссылка.ЗаказСнабжения);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответсвиеНоменклатуры.Вставить(Выборка.НоменклатураПредставление,Выборка.Количество);
	КонецЦикла;
	Выборка.Сбросить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		саУНФ_АтозаказВызовСервера.ЗаписатьНаборЗаписейВызовСервера(РезультатЗапроса,ЭтотОбъект.Ссылка.ЗаказСнабжения,ЭтотОбъект.Автор); 
	КонецЕсли; 
	
	Возврат СоответсвиеНоменклатуры;
	
КонецФункции // ()



Функция ПроверитьВыполнениеЗаказа()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	СУММА(ПеремещениеЗапасовЗапасы.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ПЕРЕМЕЩЕНИЕ
	|ИЗ
	|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
	|ГДЕ
	|	ПеремещениеЗапасовЗапасы.Ссылка = &ПеремещениеСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеЗапасовЗапасы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	саУНФ_ЗаказСнабженияЗапасы.Номенклатура КАК Номенклатура,
	|	СУММА(саУНФ_ЗаказСнабженияЗапасы.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_СНАБЖЕНИЕ
	|ИЗ
	|	Документ.саУНФ_ЗаказСнабжения.Запасы КАК саУНФ_ЗаказСнабженияЗапасы
	|ГДЕ
	|	саУНФ_ЗаказСнабженияЗапасы.Ссылка = &СсылкаСнабжение
	|
	|СГРУППИРОВАТЬ ПО
	|	саУНФ_ЗаказСнабженияЗапасы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СНАБЖЕНИЕ.Номенклатура КАК Номенклатура,
	|	ВТ_СНАБЖЕНИЕ.Количество - ЕСТЬNULL(ВТ_ПЕРЕМЕЩЕНИЕ.Количество, 0) КАК Количество,
	|	ВТ_СНАБЖЕНИЕ.Номенклатура.Представление КАК НоменклатураПредставление
	|ИЗ
	|	ВТ_СНАБЖЕНИЕ КАК ВТ_СНАБЖЕНИЕ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПЕРЕМЕЩЕНИЕ КАК ВТ_ПЕРЕМЕЩЕНИЕ
	|		ПО ВТ_СНАБЖЕНИЕ.Номенклатура = ВТ_ПЕРЕМЕЩЕНИЕ.Номенклатура
	|ГДЕ
	|	ВТ_СНАБЖЕНИЕ.Количество - ЕСТЬNULL(ВТ_ПЕРЕМЕЩЕНИЕ.Количество, 0) > 0";
	
	Запрос.УстановитьПараметр("ПеремещениеСсылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("СсылкаСнабжение", ЭтотОбъект.Ссылка.ЗаказСнабжения);
	
	СоответсвиеНоменклатуры = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	саУНФ_АтозаказВызовСервера.ОчиститьНаборЗаписейВызовСервера(ЭтотОбъект.Ссылка.ЗаказСнабжения);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответсвиеНоменклатуры.Вставить(Выборка.НоменклатураПредставление,Выборка.Количество);
	КонецЦикла;
	Выборка.Сбросить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		саУНФ_АтозаказВызовСервера.ЗаписатьНаборЗаписейВызовСервера(РезультатЗапроса,ЭтотОбъект.Ссылка.ЗаказСнабжения,ЭтотОбъект.Автор); 
	КонецЕсли; 
	
	Возврат СоответсвиеНоменклатуры;
	
КонецФункции // ()

&Перед("ОбработкаПроведения")
Процедура саУНФ_ОбработкаПроведения(Отказ, РежимПроведения)
	Если ЗначениеЗаполнено(ЗаказСнабжения)  Тогда
		ЗаказКИсполнению 	= ЗаказСнабжения.ПолучитьОбъект();
		//Попытка
		ЗаказКИсполнению.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
		Заметки ="";
		СоответсвиеНоменклатуры = ПроверитьВыполнениеЗаказа();
		Если СоответсвиеНоменклатуры.Количество()>0 Тогда
			Для каждого СтрСоот Из СоответсвиеНоменклатуры  Цикл
				Заметки =	Заметки + "не поставлено: "+Символы.Таб +	СтрСоот.Ключ + +Символы.Таб + " количество: "	+  Строка(СтрСоот.Значение)+Символы.ВК;
			КонецЦикла; 
		Иначе
		КонецЕсли;
		ЗаказКИсполнению.Заметки = Заметки;
		
		ЗаказКИсполнению.ВариантЗавершения    =   Перечисления.ВариантыЗавершенияЗаказа.Успешно;
		ЗаказКИсполнению.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
		//КонецПопытки;
		
	КонецЕсли; 
	//саУНФ_Сумма    = 1000;
КонецПроцедуры

&После("ОбработкаУдаленияПроведения")
Процедура саУНФ_ОбработкаУдаленияПроведения(Отказ)
	Если ЗначениеЗаполнено(ЗаказСнабжения)  Тогда
		Если ЗаказСнабжения.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен
			И  ЗаказСнабжения.ВариантЗавершения    =   Перечисления.ВариантыЗавершенияЗаказа.Отменен Тогда
			Возврат;		 
		КонецЕсли;
		//Попытка
		саУНФ_АтозаказВызовСервера.ОчиститьНаборЗаписейВызовСервера(ЗаказСнабжения);
		
		ЗаказКИсполнению 	= ЗаказСнабжения.ПолучитьОбъект();
		
		ЗаказКИсполнению.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В работе");
		Заметки ="";
		ЗаказКИсполнению.Заметки = Заметки;
		
		ЗаказКИсполнению.ВариантЗавершения    =   Перечисления.ВариантыЗавершенияЗаказа.ПустаяСсылка();
		ЗаказКИсполнению.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
		//КонецПопытки;
		
	КонецЕсли; 
	
КонецПроцедуры

&Перед("ПередЗаписью")
Процедура саУНФ_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
   	ТранзитныйСклад = Неопределено;
	СкладПинск =        Неопределено;
    Время =14;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек=Неопределено;
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_РаботаСОМА");
	Если  НЕ ОМ =Неопределено Тогда
	
		     СтруктураНастроек=ОМ.ПолучитьСтруктураНастроекОМА();
	
	КонецЕсли; 
	
	Если Дата<Дата(2021,10,11) Тогда
	          ДатаОтгрузки = Дата;
	 КонецЕсли; 

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	caУНФ_ТочкиДляАвтозаказа.Точка КАК Точка
	|ИЗ
	|	РегистрСведений.caУНФ_ТочкиДляАвтозаказа КАК caУНФ_ТочкиДляАвтозаказа
	|ГДЕ
	|	caУНФ_ТочкиДляАвтозаказа.Включить
	|	И caУНФ_ТочкиДляАвтозаказа.ЗапретПеремещения
	|	И caУНФ_ТочкиДляАвтозаказа.Точка = &СтруктурнаяЕдиница";
	
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если  ЗначениеЗаполнено(ЗаказСнабжения) Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	саУНФ_НастройкаАвтозаказа.Параметр КАК Параметр,
		|	саУНФ_НастройкаАвтозаказа.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.саУНФ_НастройкаАвтозаказа КАК саУНФ_НастройкаАвтозаказа";
	
	
	РезультатТС = Запрос.Выполнить();
	Если РезультатТС.Пустой() Тогда
		ТранзитныйСклад 	= 	Неопределено;
		СкладПинск 			=  Неопределено;
	Иначе
		ВыборкаТС = РезультатТС.Выбрать();
		СтруктураПоиска = Новый Структура("Параметр", "ТранзитныйСклад");
		Если ВыборкаТС.НайтиСледующий(СтруктураПоиска) Тогда
			ТранзитныйСклад = ВыборкаТС.Значение;			
		КонецЕсли; 
		
		ВыборкаТС.Сбросить();
		
		СтруктураПоиска = Новый Структура("Параметр", "СкладПинск");
		Если ВыборкаТС.НайтиСледующий(СтруктураПоиска) Тогда
			СкладПинск =ВыборкаТС.Значение; 		
		КонецЕсли; 
		
		
	КонецЕсли;
	
	 КонецЕсли;
	 
	 	
	Если ПривилегированныйРежим() Тогда
		     УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	Если  НЕ ТранзитныйСклад = Неопределено Тогда
	        Если СтруктурнаяЕдиницаПолучатель =  ТранзитныйСклад ИЛИ   СтруктурнаяЕдиница = ТранзитныйСклад Тогда
		             Если НЕ саУНФ_ОбщийМодуль.ЕстьРоль("саУНФ_ДоступКРучномуЗаказуПинскМинск") Тогда
						 Сообщение = Новый СообщениеПользователю;
						 Сообщение.Текст = "Из склада "+ТранзитныйСклад.Наименование+ " товар перемещать запрещено";
						 Сообщение.Сообщить();
						 Отказ = Истина;
					 КонецЕсли; 
	         КонецЕсли; 
	КонецЕсли; 
	
	//***Начало***08.02.2022***МурашкоВ
	Если НЕ СтруктураНастроек=Неопределено И НаправлениеДеятельности=СтруктураНастроек.Направление Тогда
	
	Иначе	
	
	 
	//***Конец***08.02.2022***МурашкоВ

	
	Если  НЕ РезультатЗапроса.Пустой() И НЕ саУНФ_ОбщийМодуль.ЕстьРоль("саУНФ_РазрешениеПеремещенияЗапасов") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Из РТТ "+СтруктурнаяЕдиница.Наименование+ " товар перемещать запрещено";
		Сообщение.Сообщить();
		Отказ = Истина;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЗаказСнабжения) И ЭтоНовый() Тогда
		Выборка =    саУНФ_АтозаказВызовСервера.ПолучитьПеремещения(СтруктурнаяЕдиницаПолучатель, СтруктурнаяЕдиница,Дата);
		Если  НЕ Выборка=Неопределено Тогда
			Сутки = 86400;
			КоличествоСуток=саУНФ_АтозаказВызовСервера.КоличествоСутокЗаказа(Дата);
			
			Если  НЕ СкладПинск = Неопределено Тогда
			
				  Если СтруктурнаяЕдиница   =    СкладПинск  Тогда
					        Время =11;
				  КонецЕсли; 
			КонецЕсли; 
			
			
			КрайняяДата = НачалоДня(Дата)-КоличествоСуток*Сутки + Время*60*60;
			Пока  Выборка.Следующий() Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Документ преремещения уже создан искусственным интелектом. Добавляйтсь сюда: "+Выборка.Представление+" (до "+Строка(КрайняяДата)+")";
				Сообщение.Сообщить();
			КонецЦикла; 
			Отказ = Истина;	 
		КонецЕсли; 
	КонецЕсли;
	
	//***Начало***08.02.2022***МурашкоВ
	 КонецЕсли;
	//***Конец***08.02.2022***МурашкоВ
	Если ЗначениеЗаполнено(ЗаказСнабжения)  И ПометкаУдаления Тогда
		ВариантЗавершения = Перечисления.ВариантыЗавершенияЗаказа.Отменен;
		СостояниеЗаказа 		= Справочники.СостоянияЗаказовПокупателей.Завершен;
		ПричинаОтменыЗаказа=саУНФ_АтозаказВызовСервера.ПричинаОтменыЗаказа();
		
		
		ЗаказКИсполнению 	= ЗаказСнабжения.ПолучитьОбъект();
		Попытка
			УстановитьПривилегированныйРежим(Истина);	
			ЗаказКИсполнению.СостояниеЗаказа = Справочники.СостоянияЗаказовПокупателей.Завершен;
			Заметки ="";
			СоответсвиеНоменклатуры = ПриОтменеЗаказа();
			Если СоответсвиеНоменклатуры.Количество()>0 Тогда
				Для каждого СтрСоот Из СоответсвиеНоменклатуры  Цикл
					Заметки =	Заметки + "не поставлено: "+Символы.Таб +	СтрСоот.Ключ + +Символы.Таб + " количество: "	+  Строка(СтрСоот.Значение)+Символы.ВК;
				КонецЦикла; 
			Иначе
			КонецЕсли;
			ЗаказКИсполнению.Заметки = Заметки;
			ЗаказКИсполнению.СостояниеЗаказа   			=      СостояниеЗаказа;
			Если ПричинаОтменыЗаказа<>Неопределено Тогда
				ЗаказКИсполнению.ПричинаОтмены    			=      ПричинаОтменыЗаказа;
			КонецЕсли; 
			
			ЗаказКИсполнению.ВариантЗавершения    =   ВариантЗавершения;
			ЗаказКИсполнению.Записать(РежимЗаписиДокумента.Проведение);
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		Исключение
			Описание = ОписаниеОшибки();
			саУНФ_АтозаказВызовСервера.ЗаписьОшибкиВЖурнал("Запись заказа снабжения",ЗаказКИсполнению.Ссылка,ЗаказКИсполнению.Ссылка,Описание);	
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЕсли;
	 Вес       =	0;
	 ОбщийОбъем   = 0;
	 Для каждого Запись Из ЭтотОбъект.Запасы  Цикл
		     Запись.Вес		=		?(Запись.Номенклатура.Вес>0, Запись.Номенклатура.Вес*Запись.Количество,Запись.Вес);
	         Вес       			=    	Вес+Запись.Вес;
			 ОбщийОбъем   =	   	ОбщийОбъем +Запись.Номенклатура.Объем*Запись.Количество;
	КонецЦикла; 		
	
	
	#Область РасчетСтоимости
		Вид_СтавкаНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидСтавкиНДСПоУмолчанию");
		Ставка_НДС			=  Справочники.СтавкиНДС.СтавкаНДС(Вид_СтавкаНДС, ЭтотОбъект.Дата);
		Ставка					= Ставка_НДС.Ставка;
		Если Ставка=Неопределено ИЛИ Ставка =0   Тогда
		         Ставка = 0.02;
		Иначе	
		         Ставка = Ставка / 100;
		КонецЕсли; 
		СтруктураПоВалютеУчета = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ЭтотОбъект.Дата, Новый Структура("Валюта", Константы.ВалютаУчета.Получить()));
		Если СтруктураПоВалютеУчета.Свойство("Кратность") И НЕ СтруктураПоВалютеУчета.Кратность = Неопределено И НЕ  СтруктураПоВалютеУчета.Кратность =0 Тогда
			КурсНБРБ=СтруктураПоВалютеУчета.КурсНБРБ/СтруктураПоВалютеУчета.Кратность; 
		Иначе	
			КурсНБРБ = 1;
		КонецЕсли; 
		МВТ_1 =  Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
        Запрос.МенеджерВременныхТаблиц = МВТ_1;

		
		Если ЭтоНовый() Тогда
			
			ТаблицаЗапасы=ЭтотОбъект.Запасы.Выгрузить();
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
			|	ТаблицаЗапасы.Партия КАК Партия,
			|	ТаблицаЗапасы.Количество КАК Количество
			|ПОМЕСТИТЬ ВТ_ТАБЛИЦАЗАПАСЫ
			|ИЗ
			|	&ТаблицаЗапасы КАК ТаблицаЗапасы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ТАБЛИЦАЗАПАСЫ.Номенклатура КАК Номенклатура,
			|	СУММА(ВТ_ТАБЛИЦАЗАПАСЫ.Количество) КАК Количество,
			|	ВТ_ТАБЛИЦАЗАПАСЫ.Партия КАК Партия
			|ПОМЕСТИТЬ ВТ_ЗАПАСЫ
			|ИЗ
			|	ВТ_ТАБЛИЦАЗАПАСЫ КАК ВТ_ТАБЛИЦАЗАПАСЫ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ТАБЛИЦАЗАПАСЫ.Номенклатура,
			|	ВТ_ТАБЛИЦАЗАПАСЫ.Партия";
			
			Запрос.УстановитьПараметр(	"ТаблицаЗапасы",ТаблицаЗапасы);
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
			|	СУММА(ПеремещениеЗапасовЗапасы.Количество) КАК Количество,
			|	ПеремещениеЗапасовЗапасы.Партия КАК Партия
			|ПОМЕСТИТЬ ВТ_ЗАПАСЫ
			|ИЗ
			|	Документ.ПеремещениеЗапасов.Запасы КАК ПеремещениеЗапасовЗапасы
			|ГДЕ
			|	ПеремещениеЗапасовЗапасы.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПеремещениеЗапасовЗапасы.Номенклатура,
			|	ПеремещениеЗапасовЗапасы.Партия";
			
			Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
			
		КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ_1;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВТ_ЗАПАСЫ.Номенклатура КАК Номенклатура,
			|	ВТ_ЗАПАСЫ.Количество КАК Количество,
			|	ВТ_ЗАПАСЫ.Партия КАК Партия,
			|	&Организация КАК Организация,
			|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
			|ПОМЕСТИТЬ ВТ_НОМЕНКЛАТУРА
			|ИЗ
			|	ВТ_ЗАПАСЫ КАК ВТ_ЗАПАСЫ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НОМЕНКЛАТУРА.Номенклатура КАК Номенклатура,
			|	ВТ_НОМЕНКЛАТУРА.Количество КАК Количество,
			|	ВТ_НОМЕНКЛАТУРА.Партия КАК Партия,
			|	ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
			|	ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) > 0
			|				ТОГДА ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) * ВТ_НОМЕНКЛАТУРА.Количество * &КурсНБРБ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Сумма,
			|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) > 0
			|					ТОГДА ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) * ВТ_НОМЕНКЛАТУРА.Количество * &КурсНБРБ
			|				ИНАЧЕ 0
			|			КОНЕЦ КАК ЧИСЛО(15, 2))) * &Ставка КАК ЧИСЛО(15, 2)) КАК НДС,
			|	(ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) > 0
			|				ТОГДА ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) * ВТ_НОМЕНКЛАТУРА.Количество * &КурсНБРБ
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2))) + (ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫБОР
			|				КОГДА ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) > 0
			|					ТОГДА ЕСТЬNULL(ЗапасыОстатки.СуммаОстаток, 0) / ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) * ВТ_НОМЕНКЛАТУРА.Количество * &КурсНБРБ
			|				ИНАЧЕ 0
			|			КОНЕЦ КАК ЧИСЛО(15, 2))) * &Ставка КАК ЧИСЛО(15, 2))) КАК СуммаСНДС
			|ИЗ
			|	ВТ_НОМЕНКЛАТУРА КАК ВТ_НОМЕНКЛАТУРА
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
			|				&ГраницаВремени,
			|				(Номенклатура, Партия, Организация, СтруктурнаяЕдиница) В
			|					(ВЫБРАТЬ
			|						ВТ_НОМЕНКЛАТУРА.Номенклатура КАК Номенклатура,
			|						ВТ_НОМЕНКЛАТУРА.Партия КАК Партия,
			|						ВТ_НОМЕНКЛАТУРА.Организация КАК Организация,
			|						ВТ_НОМЕНКЛАТУРА.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
			|					ИЗ
			|						ВТ_НОМЕНКЛАТУРА КАК ВТ_НОМЕНКЛАТУРА)) КАК ЗапасыОстатки
			|		ПО ВТ_НОМЕНКЛАТУРА.Номенклатура = ЗапасыОстатки.Номенклатура
			|			И ВТ_НОМЕНКЛАТУРА.Партия = ЗапасыОстатки.Партия
			|			И ВТ_НОМЕНКЛАТУРА.Организация = ЗапасыОстатки.Организация
			|			И ВТ_НОМЕНКЛАТУРА.СтруктурнаяЕдиница = ЗапасыОстатки.СтруктурнаяЕдиница
			|ИТОГИ
			|	СУММА(Сумма),
			|	СУММА(НДС),
			|	СУММА(СуммаСНДС)
			|ПО
			|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("ГраницаВремени", Новый Граница(ЭтотОбъект.МоментВремени(),ВидГраницы.Исключая));
    Запрос.УстановитьПараметр("Ставка", Ставка);
	Запрос.УстановитьПараметр("КурсНБРБ", КурсНБРБ);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ЭтотОбъект.СтруктурнаяЕдиница);
	РезультатЗапроса = Запрос.Выполнить();
	Если  НЕ РезультатЗапроса.Пустой() Тогда
	        Выборка = РезультатЗапроса.Выбрать();
		    Выборка.Следующий();
	        саУНФ_Сумма       		=	Выборка.Сумма;		
			саУНФ_СтавкаНДС 		= 	Ставка_НДС;
			саУНФ_НДС             	=	Выборка.НДС;
			саУНФ_СуммаСНДС 	=  Выборка.СуммаСНДС;
	КонецЕсли; 
	
	#КонецОбласти	    	
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура саУНФ_ПриЗаписи(Отказ)
	
		   
	

КонецПроцедуры

&После("ПриКопировании")
Процедура саУНФ_ПриКопировании(ОбъектКопирования)
	ЭтотОбъект.ПАК_МаршрутныйЛист = Документы.ПАК_МаршрутныйЛист.ПустаяСсылка();
	ЭтотОбъект.ДатаОтгрузки  = Дата(1,1,1);
	ЭтотОбъект.ЗаказСнабжения  = Документы.саУНФ_ЗаказСнабжения.ПустаяСсылка();
	ЭтотОбъект.ОбщийОбъем  = 0;
	ЭтотОбъект.саУНФ_Сумма  = 0;
	ЭтотОбъект.саУНФ_НДС     = 0;
	ЭтотОбъект.саУНФ_СуммаСНДС =0;
	ЭтотОбъект.ТелефонКурьера  = 0;
	ЭтотОбъект.СостояниеСборки = Перечисления.СостояниеСборки.НеСобран;
	ЭтотОбъект.ДатаЗагрузкиАвтомобиля  = Дата(1,1,1);
	ЭтотОбъект.Доставлен   = 0;
	ЭтотОбъект.ФИОВодителя = "";
КонецПроцедуры

&Перед("ОбработкаПроверкиЗаполнения")
Процедура саУНФ_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если Дата<Дата(2021,10,11) Тогда
		Индекс = ПроверяемыеРеквизиты.Найти("ДатаОтгрузки");
		Если НЕ Индекс = Неопределено  Тогда
		      ПроверяемыеРеквизиты.Удалить(Индекс);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры






