#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст = "РазрешитьЧтениеИзменение
						|ГДЕ
						|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

Функция ПроверитьДоступностьЗаказов(Объект) Экспорт

	Если РольДоступна("ПолныеПрава") Или Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Возврат Истина;
	КонецЕсли;

	МассивЗаказов = Новый Массив;
	Для Каждого Стр Из Объект.Заказы Цикл
		Если ЗначениеЗаполнено(Стр.Заказ) И МассивЗаказов.Найти(Стр.Заказ) = Неопределено Тогда
			МассивЗаказов.Добавить(Стр.Заказ);
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	ЗаказПокупателя.Ссылка
				   |ИЗ
				   |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
				   |ГДЕ
				   |	ЗаказПокупателя.Ссылка В(&Заказы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> МассивЗаказов.Количество() Тогда
		// Часть заказов недоступна
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ИнтерфейсПечати

Процедура ВызватьИсходныйМетодПечати(МассивОбъектов,
									 ПараметрыПечати,
									 КоллекцияПечатныхФорм,
									 ОбъектыПечати,
									 ПараметрыВывода,
									 СоздаватьСчетаФактуры = Ложь)

	МассивОбъектовИзмененный = МассивРасходныхНакладных(МассивОбъектов);

	Если СоздаватьСчетаФактуры Тогда

		СообщенияПользователю = Новый Массив;
		ИсточникиПечати = Новый Структура("ИмяИсточника, СчетФактура, ДокументыРеализации, СозданныеСчетаФактуры",
										  Неопределено,
										  Новый Массив,
										  Неопределено,
										  Неопределено);
		УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыПечатиУПД(МассивОбъектовИзмененный,
																	ИсточникиПечати,
																	СообщенияПользователю);
		МассивОбъектовИзмененный = ОбщегоНазначения.СкопироватьРекурсивно(ИсточникиПечати.СчетФактура);
		Если ТипЗнч(ИсточникиПечати.ДокументыРеализации) = Тип("Массив") Тогда
			// Реализации, для которых не требуется формирование счета-фактуры
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОбъектовИзмененный, ИсточникиПечати.ДокументыРеализации);
		КонецЕсли;
		Для Каждого Сообщение Из СообщенияПользователю Цикл
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецЦикла;

	КонецЕсли;

	Если МассивОбъектовИзмененный.Количество() = 0 Тогда

		ТекстСообщенияОбОшибке = НСтр("ru = 'По маршрутному листу нет сформированных расходных документов. Данные для печати отсутствуют.'");
		ВызватьИсключение ТекстСообщенияОбОшибке;

	КонецЕсли;

	Обработки.ПечатьСчетФактура.Печать(МассивОбъектовИзмененный,
									   ПараметрыПечати,
									   КоллекцияПечатныхФорм,
									   ОбъектыПечати,
									   ПараметрыВывода);

КонецПроцедуры
Функция ПолучитьМассивОбъектов(МассивОбъектов)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ПАК_МаршрутныйЛистЗаказы.Заказ КАК Ссылка
				   |ИЗ
				   |	Документ.ПАК_МаршрутныйЛист.Заказы КАК ПАК_МаршрутныйЛистЗаказы
				   |ГДЕ
				   |	ПАК_МаршрутныйЛистЗаказы.Ссылка В(&МассивОбъектов)
				   |	И НЕ ТИПЗНАЧЕНИЯ(ПАК_МаршрутныйЛистЗаказы.Заказ) = ТИП(Документ.ЗаявкаНаЛом)";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	Возврат ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");

КонецФункции // ()
 



// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		ТабДок = ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "МаршрутныйЛист");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															 "МаршрутныйЛист",
															 "Маршрутный лист",
															 ТабДок);
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗагрузочныйЛист") Тогда
		ТабДок = ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, "ЗагрузочныйЛист");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
															 "ЗагрузочныйЛист",
															 "Загрузочный лист",
															 ТабДок);
	КонецЕсли;
	ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм,
															 Обработки.ПечатьЛистаЗагрузки.ИдентификаторПечатнойФормы());
	Если ПечатнаяФорма <> Неопределено Тогда

		ПечатнаяФорма.ТабличныйДокумент = Новый ТабличныйДокумент;
		ПечатнаяФорма.ТабличныйДокумент.КлючПараметровПечати = Обработки.ПечатьЛистаЗагрузки.КлючПараметровПечати();
		ПечатнаяФорма.ПолныйПутьКМакету = Обработки.ПечатьЛистаЗагрузки.ПолныйПутьКМакету();
		ПечатнаяФорма.СинонимМакета = Обработки.ПечатьЛистаЗагрузки.ПредставлениеПФ();
		Если МассивОбъектов.Количество() > 0 Тогда
			СсыльНаДок = МассивОбъектов[0].Ссылка;
			Если ТипЗнч(СсыльНаДок) = Тип("ДокументСсылка.ПАК_МаршрутныйЛист") Тогда
				МассивОбъектовЗаказа = ПолучитьМассивОбъектов(МассивОбъектов);
			Иначе
				МассивОбъектовЗаказа = МассивОбъектов;
			КонецЕсли;

			Обработки.ПечатьЛистаЗагрузки.СформироватьПФ(ПечатнаяФорма, МассивОбъектовЗаказа, ОбъектыПечати);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Маршрутный лист'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 1;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = Обработки.ПечатьЛистаЗагрузки.ИдентификаторПечатнойФормы();
	КомандаПечати.Представление = Обработки.ПечатьЛистаЗагрузки.ПредставлениеПФ();
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 2;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗагрузочныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Загрузочный лист'");
	КомандаПечати.СписокФорм = "ФормаДокумента,ФормаСписка";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.Порядок = 3;

КонецПроцедуры
Функция ЗапросДанных(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = "ВЫБРАТЬ
				   |	МаршрутныйЛист.Ссылка КАК Ссылка,
				   |	МаршрутныйЛист.Дата КАК ДатаДокумента,
				   |	МаршрутныйЛист.Номер КАК Номер,
				   |	МаршрутныйЛист.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
				   |	МаршрутныйЛист.СлужбаДоставки.Наименование КАК СлужбаДоставки,
				   |	МаршрутныйЛист.Курьер.Наименование КАК Курьер,
				   |	МаршрутныйЛист.ДатаЗагрузки КАК ДатаЗагрузки,
				   |	МаршрутныйЛист.Автомобиль КАК Автомобиль,
				   |	МаршрутныйЛист.ЗонаТариф КАК ЗонаДоставки,
				   |	МаршрутныйЛист.Курьер.Представление КАК КурьерПредставление,
				   |	МаршрутныйЛист.АдресОтправки КАК АдресОтправки,
				   |	МаршрутныйЛист.Автор КАК Автор,
				   |	МаршрутныйЛист.ФИОВодителя КАК ФИОВодителя,
				   |	МаршрутныйЛист.НомерПутевогоЛиста КАК НомерПутевогоЛиста
				   |ИЗ
				   |	Документ.ПАК_МаршрутныйЛист КАК МаршрутныйЛист
				   |ГДЕ
				   |	МаршрутныйЛист.Ссылка В (&МассивОбъектов)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	МаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
				   |	МаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
				   |	МаршрутныйЛистЗаказы.Заказ.Дата КАК ДатаЗаказа,
				   |	МаршрутныйЛистЗаказы.Заказ.Номер КАК НомерЗаказа,
				   |	ЕСТЬNULL(МаршрутныйЛистЗаказы.РасходнаяНакладная, """") КАК РасходнаяНакладная,
				   |	ЕСТЬNULL(МаршрутныйЛистЗаказы.РасходнаяНакладная.Дата, """") КАК ДатаНакладной,
				   |	ЕСТЬNULL(МаршрутныйЛистЗаказы.РасходнаяНакладная.Номер, 0) КАК НомерНакладной,
				   |	ВЫБОР
				   |		КОГДА МаршрутныйЛистЗаказы.Заказ = НЕОПРЕДЕЛЕНО
				   |			ТОГДА МаршрутныйЛистЗаказы.ВремяДоставкиС
				   |		ИНАЧЕ ЕСТЬNULL(МаршрутныйЛистЗаказы.Заказ.ВремяДоставкиС, ДАТАВРЕМЯ(1, 1, 1))
				   |	КОНЕЦ КАК ВремяС,
				   |	ВЫБОР
				   |		КОГДА МаршрутныйЛистЗаказы.Заказ = НЕОПРЕДЕЛЕНО
				   |			ТОГДА МаршрутныйЛистЗаказы.ВремяДоставкиПо
				   |		ИНАЧЕ ЕСТЬNULL(МаршрутныйЛистЗаказы.Заказ.ВремяДоставкиС, ДАТАВРЕМЯ(1, 1, 1))
				   |	КОНЕЦ КАК ВремяПо,
				   |	ВЫБОР
				   |		КОГДА МаршрутныйЛистЗаказы.Заказ.АдресДоставки = """"
				   |		ИЛИ МаршрутныйЛистЗаказы.Заказ = НЕОПРЕДЕЛЕНО
				   |			ТОГДА МаршрутныйЛистЗаказы.АдресДоставки
				   |		ИНАЧЕ МаршрутныйЛистЗаказы.Заказ.АдресДоставки
				   |	КОНЕЦ КАК Адрес,
				   |	МаршрутныйЛистЗаказы.Контакты КАК Контакты,
				   |	ВЫБОР
				   |		КОГДА МаршрутныйЛистЗаказы.Вес = 0
				   |			ТОГДА ЕСТЬNULL(МаршрутныйЛистЗаказы.Заказ.Вес, 0)
				   |		ИНАЧЕ МаршрутныйЛистЗаказы.Вес
				   |	КОНЕЦ КАК Вес,
				   |	ВЫБОР
				   |		КОГДА ТИПЗНАЧЕНИЯ(МаршрутныйЛистЗаказы.Заказ) = ТИП(Документ.ЗаявкаНаЛом)
				   |			ТОГДА ЕСТЬNULL(МаршрутныйЛистЗаказы.Заказ.Объем, 0)
				   |		ИНАЧЕ МаршрутныйЛистЗаказы.Объем
				   |	КОНЕЦ КАК ЗаказОбъем,
				   |	ЕСТЬNULL(МаршрутныйЛистЗаказы.Сумма, 0) КАК Сумма,
				   |	МаршрутныйЛистЗаказы.Контрагент КАК Контрагент,
				   |	МаршрутныйЛистЗаказы.ТипОперации КАК ТипОперации,
				   |	МаршрутныйЛистЗаказы.Менеджер КАК Менеджер,
				   |	МаршрутныйЛистЗаказы.ВесЛома КАК ВесЛома,
				   |	МаршрутныйЛистЗаказы.Заказ КАК Заказ,
				   |	МаршрутныйЛистЗаказы.Контрагент.Представление КАК КонтрагентПредставление,
				   |	МаршрутныйЛистЗаказы.Примечание КАК Примечание
				   |ИЗ
				   |	Документ.ПАК_МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
				   |ГДЕ
				   |	МаршрутныйЛистЗаказы.Ссылка В (&МассивОбъектов)
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Адрес,
				   |	КонтрагентПредставление";

	Результат = Запрос.ВыполнитьПакет();

	Возврат Результат;

КонецФункции // ()

Функция ПолучитьСкладLi()
	ОМ = ОбщегоНазначения.ОбщийМодуль("сфУНФ_РемонтБатарей");
	Если ОМ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураРем = ОМ.ПолучитьНастройки();
	Если ТипЗнч(СтруктураРем) = Тип("Структура") И СтруктураРем.Свойство("СкладОбмена") Тогда
		Возврат СтруктураРем.СкладОбмена;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()
	
// Время доставки строкой.
// 
// ТекстДатаИВремяДоставки
//  
Функция ВремяДоставкиСтрокой(фВремяС, фВремяПо)
	ТекстДатаИВремяДоставки = "";
	Если Не ЗначениеЗаполнено(фВремяС) И Не ЗначениеЗаполнено(фВремяПо) Тогда
		ТекстДатаИВремяДоставки = НСтр("ru = 'Не указаны'");
		Возврат ТекстДатаИВремяДоставки;
	КонецЕсли;

	Если ЗначениеЗаполнено(фВремяС) Тогда
		Если ТипЗнч(фВремяС) = Тип("Дата") Тогда

			ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки
									  + ?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", ", ")
									  + НСтр("ru = 'с'")
									  + " "
									  + Формат(фВремяС, "ДФ=ЧЧ:мм");
		Иначе
			ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки
									  + ?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", ", ")
									  + НСтр("ru = 'с'")
									  + " "
									  + СокрЛП(фВремяС);

		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(фВремяПо) Тогда
		Если ТипЗнч(фВремяС) = Тип("Дата") Тогда

			ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки
									  + ?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", ", ")
									  + НСтр("ru = 'по'")
									  + " "
									  + Формат(фВремяПо, "ДФ=ЧЧ:мм");
		Иначе
			ТекстДатаИВремяДоставки = ТекстДатаИВремяДоставки
									  + ?(ПустаяСтрока(ТекстДатаИВремяДоставки), "", ", ")
									  + НСтр("ru = 'с'")
									  + " "
									  + СокрЛП(фВремяПо);

		КонецЕсли;

	КонецЕсли;
	Возврат ТекстДатаИВремяДоставки;
КонецФункции

// Функция формирует печатную форму документа по указанному макету.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент в который будет выводится печатная
//				   форма.
//  ИмяМакета    - Строка, имя макета печатной формы.
//
Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт
	ОМ = ОбщегоНазначения.ОбщийМодуль("саУНФ_АтозаказВызовСервера");
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если ИмяМакета = "ЗагрузочныйЛист" Тогда
		ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПАК_ЗагрузочныйЛист";

		ПервыйДокумент = Истина;

		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПАК_МаршрутныйЛист.ПФ_MXL_ЗагрузочныйЛист");
		Результат = ЗапросДанных(МассивОбъектов);
		ВыборкаДокументов = Результат[0].Выбрать();
		ТаблицаЗаказов = Результат[1].Выгрузить();

		СтруктураПараметров = Новый Структура;
		Пока ВыборкаДокументов.Следующий() Цикл
			ТекущийДокумент = ВыборкаДокументов.Ссылка;

			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;

			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			НомерДокумента = " ЗЛ - " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер,
																					  Истина,
																					  Истина);

			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
			СтруктураПараметров.Очистить();
			Шаблон = НСтр("ru = 'Загрузочный лист №%1 от %2'");
			СтруктураПараметров.Вставить("ЗаголовокДокумента", СтрШаблон(Шаблон,
																		 НомерДокумента,
																		 Формат(ВыборкаДокументов.ДатаДокумента,
																				"ДЛФ=DD")));
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			СтруктураПараметров.Очистить();
			Если ЗначениеЗаполнено(ВыборкаДокументов.СлужбаДоставки)
				 И Не ВыборкаДокументов.СлужбаДоставки = "Доставка собственными силами" Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СлужбаДоставки");
				СтруктураПараметров.Вставить("ПредставлениеЭкспедитора", ВыборкаДокументов.СлужбаДоставки);
				СтруктураПараметров.Вставить("ФИОВодителя", ВыборкаДокументов.ФИОВодителя);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("Курьер");
				СтруктураПараметров.Вставить("ПредставлениеЭкспедитора", ВыборкаДокументов.Курьер);
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			СтруктураПараметров.Очистить();
			СтруктураПараметров.Вставить("ПредставлениеДатаЗагрузки", Формат(ВыборкаДокументов.ДатаЗагрузки, "ДЛФ=D"));
			СтруктураПараметров.Вставить("ПредставлениеДатаДокумента", Формат(ВыборкаДокументов.ДатаДокумента, "ДЛФ=D"));
			ОбластьМакета = Макет.ПолучитьОбласть("Автомобиль");
			ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
			СтрокиЗаказы = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбора);
			ИтогоВес = 0;
			ИтогоВесЛома = 0;
			ИтогоОбъем = 0;
			НС = 0;
			Для Каждого СтрокаЗаказ Из СтрокиЗаказы Цикл
				НС = НС + 1;
				СтруктураПараметров.Очистить();
				ПредставлениеДата = Формат(СтрокаЗаказ.ДатаЗаказа, "ДЛФ=D");
				ПредставлениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаЗаказ.НомерЗаказа,
																				   Истина,
																				   Истина);
				СтруктураПараметров.Вставить("НомерЗаказа", ПредставлениеНомер);
				ТекстДатаИВремяДоставки = "";
				ОбластьМакета.Параметры.Заполнить(СтрокаЗаказ);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
				ОбластьМакета.Параметры.НС = НС;
				Если ТипЗнч(СтрокаЗаказ.Заказ) = Тип("ДокументСсылка.ЗаявкаНаЛом") Тогда
					ОбластьМакета.Параметры.Вес = 0;
					ОбластьМакета.Параметры.ВесЛома = СтрокаЗаказ.Вес;
				Иначе
					ОбластьМакета.Параметры.ВесЛома = СтрокаЗаказ.ВесЛома;
				КонецЕсли;

				ТабличныйДокумент.Вывести(ОбластьМакета);

				Если Не ТипЗнч(СтрокаЗаказ.Заказ) = Тип("ДокументСсылка.ЗаявкаНаЛом") Тогда
					ИтогоВес = ИтогоВес + СтрокаЗаказ.Вес;
					ИтогоВесЛома = ИтогоВесЛома + СтрокаЗаказ.ВесЛома;
				Иначе
					ИтогоВесЛома = ИтогоВесЛома + СтрокаЗаказ.Вес;
				КонецЕсли;

				ИтогоОбъем = ИтогоОбъем + СтрокаЗаказ.ЗаказОбъем;
			КонецЦикла;

			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");

			СтруктураПараметров.Очистить();
			Шаблон = НСтр("ru = ' %1 т.'");

			Шаблон1 = НСтр("ru = ' %1 т.'");

			СтруктураПараметров.Вставить("ДопИнформация", СтрШаблон(Шаблон, ОКР(ИтогоВес / 1000, 3)));
			СтруктураПараметров.Вставить("ДопИнформация1", СтрШаблон(Шаблон1, ОКР(ИтогоВесЛома / 1000, 3)));

			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
														   НомерСтрокиНачало,
														   ОбъектыПечати,
														   ТекущийДокумент);
		КонецЦикла;
	ИначеЕсли ИмяМакета = "МаршрутныйЛист" Тогда

		ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПАК_МаршрутныйЛист";

		ПервыйДокумент = Истина;

		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПАК_МаршрутныйЛист.ПФ_MXL_МаршрутныйЛист");
		Результат = ЗапросДанных(МассивОбъектов);
		ВыборкаДокументов = Результат[0].Выбрать();
		ТаблицаЗаказов = Результат[1].Выгрузить();

		СтруктураПараметров = Новый Структура;
		Пока ВыборкаДокументов.Следующий() Цикл
			ТекущийДокумент = ВыборкаДокументов.Ссылка;

			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;

			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			НомерДокумента = " МЛ - " + ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаДокументов.Номер,
																					  Истина,
																					  Истина);

			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
			СтруктураПараметров.Очистить();
			Шаблон = НСтр("ru = 'Маршрутный лист №%1 от %2'");
			СтруктураПараметров.Вставить("ЗаголовокДокумента", СтрШаблон(Шаблон,
																		 НомерДокумента,
																		 Формат(ВыборкаДокументов.ДатаДокумента,
																				"ДЛФ=DD")));
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			СтруктураПараметров.Очистить();
			Если ЗначениеЗаполнено(ВыборкаДокументов.СлужбаДоставки)
				 И Не ВыборкаДокументов.СлужбаДоставки = "Доставка собственными силами" Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("СлужбаДоставки");
				СтруктураПараметров.Вставить("ПредставлениеЭкспедитора", ВыборкаДокументов.СлужбаДоставки);
				СтруктураПараметров.Вставить("ФИОВодителя", ВыборкаДокументов.ФИОВодителя);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("Курьер");
				СтруктураПараметров.Вставить("ПредставлениеЭкспедитора", ВыборкаДокументов.Курьер);
			КонецЕсли;
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			СтруктураПараметров.Очистить();
			СтруктураПараметров.Вставить("ПредставлениеДатаЗагрузки", Формат(ВыборкаДокументов.ДатаЗагрузки, "ДЛФ=D"));
			СтруктураПараметров.Вставить("ПредставлениеДатаДокумента", Формат(ВыборкаДокументов.ДатаДокумента, "ДЛФ=D"));
			ОбластьМакета = Макет.ПолучитьОбласть("Автомобиль");
			ОбластьМакета.Параметры.Заполнить(ВыборкаДокументов);
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Ссылка", ВыборкаДокументов.Ссылка);
			
			//+ 28.02.2022 МурашкоВВ
			Для Каждого СтрокаЗаказ Из ТаблицаЗаказов Цикл
				Если ПустаяСтрока(СтрокаЗаказ.Адрес)
					 И ТипЗнч(СтрокаЗаказ.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
					 И Не ОМ = Неопределено Тогда

					СтрокаЗаказ.Адрес = ОМ.ПолучитьАдрес(СтрокаЗаказ.Контрагент);

				КонецЕсли;

				СтрокаЗаказ.Адрес = ПреобразованиеАдресов(СтрокаЗаказ.Адрес);
			КонецЦикла;
			ТаблицаЗаказов.Сортировать("Адрес,КонтрагентПредставление");
			 //- 28.02.2022 МурашкоВВ
			СтрокиЗаказы = ТаблицаЗаказов.НайтиСтроки(СтруктураОтбора);
			ИтогоВес = 0;
			ИтогоВесЛома = 0;
			ИтогоОбъем = 0;
			НС = 0;
			Для Каждого СтрокаЗаказ Из СтрокиЗаказы Цикл
				НС = НС + 1;
				СтруктураПараметров.Очистить();
				ПредставлениеДата = Формат(СтрокаЗаказ.ДатаЗаказа, "ДЛФ=D");
				ПредставлениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаЗаказ.НомерЗаказа,
																				   Истина,
																				   Истина);

				ТекстДатаИВремяДоставки = ВремяДоставкиСтрокой(СтрокаЗаказ.ВремяС, СтрокаЗаказ.ВремяПо);

				СтруктураПараметров.Вставить("НомерЗаказа", ПредставлениеНомер);
				СтруктураПараметров.Вставить("ТекстДатаИВремяДоставки", ТекстДатаИВремяДоставки);

				ОбластьМакета.Параметры.Заполнить(СтрокаЗаказ);
				ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);

				Если ТипЗнч(СтрокаЗаказ.Заказ) = Тип("ДокументСсылка.ЗаявкаНаЛом") Тогда
					ОбластьМакета.Параметры.Вес = 0;
					ОбластьМакета.Параметры.ВесЛома = СтрокаЗаказ.Вес;
				Иначе
					ОбластьМакета.Параметры.ВесЛома = СтрокаЗаказ.ВесЛома;
				КонецЕсли;
				ОбластьМакета.Параметры.НС = НС;
				Если ПустаяСтрока(СтрокаЗаказ.Адрес)
					 И ТипЗнч(СтрокаЗаказ.Контрагент) = Тип("СправочникСсылка.СтруктурныеЕдиницы")
					 И Не ОМ = Неопределено Тогда

					ОбластьМакета.Параметры.Адрес = ОМ.ПолучитьАдрес(СтрокаЗаказ.Контрагент);

				КонецЕсли;
				Телефон = "";
				Если ЗначениеЗаполнено(СтрокаЗаказ.Менеджер) Тогда
					Если ЗначениеЗаполнено(СтрокаЗаказ.Менеджер.Физлицо) Тогда

						ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтрокаЗаказ.Менеджер.Физлицо,
																								Неопределено,
																								Неопределено,
																								Ложь);
						Если ТипЗнч(ТаблицаКИ) = Тип("ТаблицаЗначений") Тогда
							ПерваяСтрокаТЗ = Истина;
							Для Каждого СтрокаКИ Из ТаблицаКИ Цикл
								Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
									Телефон = Телефон + ?(ПерваяСтрокаТЗ, "", " ; ") + СОКРЛП(СтрокаКИ.Представление);
									ПерваяСтрокаТЗ = Ложь;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						ОбластьМакета.Параметры.Менеджер = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СтрокаЗаказ.Менеджер.Физлицо.Наименование)
														   + " "
														   + Телефон;
						;

					КонецЕсли;

				КонецЕсли;
				ОбластьМакета.Параметры.ПоЧеку = "";
				Если ТипЗнч(СтрокаЗаказ.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

					Если Не ПустаяСтрока(СтрокаЗаказ.Заказ.ДополнительнаяИнформацияПоДоставке) Тогда
						ОбластьМакета.Параметры.Примечание = ОбластьМакета.Параметры.Примечание
															 + " "
															 + СокрЛП(СтрокаЗаказ.Заказ.ДополнительнаяИнформацияПоДоставке);
					КонецЕсли;

					Если СтрокаЗаказ.Заказ.Наличка Тогда
						ОбластьМакета.Параметры.ПоЧеку = "По чеку";
					КонецЕсли;
				КонецЕсли;

				Если СтрокаЗаказ.ЗаказОбъем > 0 Тогда
					ОбластьМакета.Параметры.Примечание = ОбластьМакета.Параметры.Примечание
														 + " Объём: "
														 + Строка(СтрокаЗаказ.ЗаказОбъем);
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				Если Не ТипЗнч(СтрокаЗаказ.Заказ) = Тип("ДокументСсылка.ЗаявкаНаЛом") Тогда
					ИтогоВес = ИтогоВес + СтрокаЗаказ.Вес;
					ИтогоВесЛома = ИтогоВесЛома + СтрокаЗаказ.ВесЛома;
				Иначе
					ИтогоВесЛома = ИтогоВесЛома + СтрокаЗаказ.Вес;
				КонецЕсли;

				ИтогоОбъем = ИтогоОбъем + СтрокаЗаказ.ЗаказОбъем;
			КонецЦикла;

			ОбластьМакета = Макет.ПолучитьОбласть("Итоги");

			СтруктураПараметров.Очистить();
			Шаблон = НСтр("ru = '%1 т.'");

			Шаблон1 = НСтр("ru = '%1 т.'");

			СтруктураПараметров.Вставить("ДопИнформация", СтрШаблон(Шаблон, ОКР(ИтогоВес / 1000, 3)));
			СтруктураПараметров.Вставить("ДопИнформация1", СтрШаблон(Шаблон1, ОКР(ИтогоВесЛома / 1000, 3)));

			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			ТабличныйДокумент.Вывести(ОбластьМакета);

			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент,
														   НомерСтрокиНачало,
														   ОбъектыПечати,
														   ТекущийДокумент);
		КонецЦикла;

	КонецЕсли;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;

КонецФункции

Функция МассивРасходныхНакладных(МассивМаршрутныхЛистов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивМаршрутныхЛистов", МассивМаршрутныхЛистов);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная
				   |ИЗ
				   |	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
				   |ГДЕ
				   |	МаршрутныйЛистЗаказы.Ссылка В(&МассивМаршрутныхЛистов)
				   |	И МаршрутныйЛистЗаказы.РасходнаяНакладная <> ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РасходнаяНакладная");

КонецФункции

#КонецОбласти

#Область ФоновоеЗадание

Процедура ВыполнитьОтгрузку(Параметры, ВременноеХранилищеРезультата) Экспорт

	Результат = Новый Структура;
	Ошибки = Новый СписокЗначений;

	Если Не Параметры.Свойство("МаршрутныйЛист") Или Не ЗначениеЗаполнено(Параметры.МаршрутныйЛист) Тогда
		Ошибка = НСтр("ru = 'Не указан маршрутный лист для выполнения отгрузки.'");
		Ошибки.Добавить( , Ошибка);
		Результат.Вставить("Ошибки", Ошибки);
		ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);
		Возврат;
	КонецЕсли;

	МаршрутныйЛист = Параметры.МаршрутныйЛист;
	МаршрутныйЛистОбъект = МаршрутныйЛист.ПолучитьОбъект();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	Запрос.Текст = "ВЫБРАТЬ
				   |	МаршрутныйЛистЗаказы.Заказ КАК Заказ,
				   |	МаршрутныйЛистЗаказы.Заказ.Проведен КАК ЗаказПроведен,
				   |	МаршрутныйЛистЗаказы.Заказ.СостояниеЗаказа КАК ТекущееСостояние,
				   |	ВЫБОР
				   |		КОГДА МаршрутныйЛистЗаказы.РасходнаяНакладная = ЗНАЧЕНИЕ(Документ.РасходнаяНакладная.ПустаяСсылка)
				   |			ТОГДА ЛОЖЬ
				   |		ИНАЧЕ ИСТИНА
				   |	КОНЕЦ КАК Сформирован,
				   |	МаршрутныйЛистЗаказы.РасходнаяНакладная КАК РасходнаяНакладная,
				   |	МаршрутныйЛистЗаказы.Ссылка.Автомобиль КАК Автомобиль,
				   |	МаршрутныйЛистЗаказы.Ссылка.Курьер КАК Курьер,
				   |	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)) КАК СостояниеОжидаетОтгрузки,
				   |	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОтгружен, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)) КАК СостояниеОтгружен
				   |ИЗ
				   |	Документ.МаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
				   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗаказовПокупателей КАК ВидыЗаказовПокупателей
				   |		ПО МаршрутныйЛистЗаказы.Заказ.ВидЗаказа = ВидыЗаказовПокупателей.Ссылка
				   |ГДЕ
				   |	МаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	МаршрутныйЛистЗаказы.Заказ,
				   |	МаршрутныйЛистЗаказы.РасходнаяНакладная,
				   |	МаршрутныйЛистЗаказы.Ссылка.Автомобиль,
				   |	МаршрутныйЛистЗаказы.Ссылка.Курьер,
				   |	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОжидаетОтгрузки, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)),
				   |	ЕСТЬNULL(ВидыЗаказовПокупателей.СостояниеОтгружен, ЗНАЧЕНИЕ(Справочник.СостоянияЗаказовПокупателей.ПустаяСсылка)),
				   |	МаршрутныйЛистЗаказы.Заказ.Проведен,
				   |	МаршрутныйЛистЗаказы.Заказ.СостояниеЗаказа";

	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоСтрок = Выборка.Количество();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Заказ", Выборка.Заказ);
		СтруктураОтбора.Вставить("РасходнаяНакладная", Выборка.РасходнаяНакладная);
		Строки = МаршрутныйЛистОбъект.Заказы.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗаказы = Строки[0];
		Если СтрокаЗаказы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Выборка.Сформирован Тогда
			Продолжить;
		КонецЕсли;
		НачатьТранзакцию();
		ПовторноЗавершитьЗаказ = Ложь;
		Если ЗначениеЗаполнено(Выборка.СостояниеОжидаетОтгрузки)
			 И ЗначениеЗаполнено(Выборка.СостояниеОтгружен)
			 И Выборка.СостояниеОтгружен = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
			// Если заказ завершен, то нужно отменить завершение перед вводом расходных накладных
			ПовторноЗавершитьЗаказ = Истина;
			ДокЗаказ = Выборка.Заказ.ПолучитьОбъект();
			ДокЗаказ.СостояниеЗаказа = Выборка.СостояниеОжидаетОтгрузки;
			ТекстОшибки = НСтр("ru = 'Не удалось изменить состояние заказа %1: %2'");
			Попытка
				Если Выборка.ЗаказПроведен И Не ДокЗаказ.ПроверитьЗаполнение() Тогда
					ОтменитьТранзакцию();
					Информация = ИнформацияОбОшибке();
					Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
					ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
					Продолжить;
				КонецЕсли;
				ДокЗаказ.Записать(?(Выборка.ЗаказПроведен,
									РежимЗаписиДокумента.Проведение,
									РежимЗаписиДокумента.Запись));
			Исключение
				ОтменитьТранзакцию();
				Информация = ИнформацияОбОшибке();
				Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
				ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		Док = Документы.РасходнаяНакладная.СоздатьДокумент();
		Док.Заполнить(Выборка.Заказ);
		Если Док.Запасы.Количество() = 0 Тогда
			// Не формируем пустые документы
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		Док.Дата = ТекущаяДатаСеанса();
		Если ЗначениеЗаполнено(Выборка.Автомобиль) Тогда
			Док.Автомобиль = Выборка.Автомобиль;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Курьер) Тогда
			Док.Водитель = Выборка.Курьер;
		КонецЕсли;
		Док.Заказ = Выборка.Заказ;
		Док.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать отгрузку для заказа %1: %2'");
		Попытка
			Если Не Док.ПроверитьЗаполнение() Тогда
				ОтменитьТранзакцию();
				Информация = ИнформацияОбОшибке();
				Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
				ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
				Продолжить;
			КонецЕсли;
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОтменитьТранзакцию();
			Информация = ИнформацияОбОшибке();
			Ошибка = СтрШаблон(ТекстОшибки, Выборка.Заказ, РекурсивноеОписаниеОшибки(Информация));
			ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
			Продолжить;
		КонецПопытки;
		Если ПовторноЗавершитьЗаказ Тогда
			// Восстановление завершенного состояния
			ДокЗаказ = Выборка.Заказ.ПолучитьОбъект();
			ДокЗаказ.СостояниеЗаказа = Выборка.СостояниеОтгружен;
			Попытка
				ДокЗаказ.Записать(?(Выборка.ЗаказПроведен,
									РежимЗаписиДокумента.Проведение,
									РежимЗаписиДокумента.Запись));
			Исключение
				ОтменитьТранзакцию();
				Информация = ИнформацияОбОшибке();
				Ошибка = СтрШаблон(НСтр("ru = 'Не удалось изменить состояние заказа %1: %2'"),
								   Выборка.Заказ,
								   РекурсивноеОписаниеОшибки(Информация));
				ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
				Продолжить;
			КонецПопытки;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СостояниеОжидаетОтгрузки)
				  И ЗначениеЗаполнено(Выборка.СостояниеОтгружен)
				  И Выборка.ТекущееСостояние = Выборка.СостояниеОжидаетОтгрузки Тогда
			// После формирования документов на полную отгрузку состояние заказа меняется на "Отгружен"
			ДокЗаказ = Выборка.Заказ.ПолучитьОбъект();
			ДокЗаказ.СостояниеЗаказа = Выборка.СостояниеОжидаетОтгрузки;
			Попытка
				ДокЗаказ.Записать(?(Выборка.ЗаказПроведен,
									РежимЗаписиДокумента.Проведение,
									РежимЗаписиДокумента.Запись));
			Исключение
				ОтменитьТранзакцию();
				Информация = ИнформацияОбОшибке();
				Ошибка = СтрШаблон(НСтр("ru = 'Не удалось изменить состояние заказа %1: %2'"),
								   Выборка.Заказ,
								   РекурсивноеОписаниеОшибки(Информация));
				ДобавитьОписаниеОшибки(Выборка.Заказ, Ошибки, Ошибка);
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		СтрокаЗаказы.РасходнаяНакладная = Док.Ссылка;
		НомерСтроки = НомерСтроки + 1;
		ДлительныеОперации.СообщитьПрогресс(Окр(НомерСтроки / КоличествоСтрок * 100), СтрокаЗаказы.РасходнаяНакладная);
	КонецЦикла;

	Если Ошибки.Количество() > 0 Тогда
		Результат.Вставить("Ошибки", Ошибки);
	КонецЕсли;
	МаршрутныйЛистОбъект.Записать(?(МаршрутныйЛистОбъект.Проведен,
									РежимЗаписиДокумента.Проведение,
									РежимЗаписиДокумента.Запись));

	ПоместитьВоВременноеХранилище(Результат, ВременноеХранилищеРезультата);

КонецПроцедуры

Процедура ДобавитьОписаниеОшибки(Заказ, Ошибки, Текст)

	Ошибка = Текст;
	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из СообщенияПользователю Цикл
		Если Найти(Сообщение.Текст, ДлительныеОперации.СообщениеПрогресса()) > 0 Тогда
			Продолжить;
		КонецЕсли;
		Ошибка = Ошибка + Символы.ПС + Сообщение.Текст;
	КонецЦикла;
	Ошибки.Добавить(Заказ, Ошибка);

КонецПроцедуры

Функция РекурсивноеОписаниеОшибки(Информация)

	Возврат КраткоеПредставлениеОшибки(Информация) + ?(Информация.Причина = Неопределено, "", Символы.ПС
																							  + РекурсивноеОписаниеОшибки(Информация.Причина));

КонецФункции

#КонецОбласти

Функция ПреобразованиеАдресов(Адрес1)
	Структура = Новый Структура;
	Структура.Вставить("Обл1", "ГОМЕЛЬСКАЯ ОБЛАСТЬ,");
	Структура.Вставить("Обл2", "МОГИЛЕВСКАЯ ОБЛАСТЬ,");
	Структура.Вставить("Обл3", "ГРОДНЕНСКАЯ ОБЛАСТЬ,");
	Структура.Вставить("Обл4", "БРЕСТСКАЯ ОБЛАСТЬ,");
	Структура.Вставить("Обл5", "МИНСКАЯ ОБЛАСТЬ,");
	Структура.Вставить("Обл6", "ВИТЕБСКАЯ ОБЛАСТЬ,");

	Структура.Вставить("Обл7", "Гомельская обл.,");
	Структура.Вставить("Обл8", "Могилевская обл.,");
	Структура.Вставить("Обл9", "Гродненская обл.,");
	Структура.Вставить("Обл10", "Брестская обл.,");
	Структура.Вставить("Обл11", "Минская обл.,");
	Структура.Вставить("Обл12", "Витебская обл.,");

	Для Каждого АСтр Из Структура Цикл

		Адрес1 = СтрЗаменить(Адрес1, АСтр.Значение, "");

	КонецЦикла;
	Адрес1 = СокрЛП(Адрес1);
	Возврат Адрес1;
КонецФункции // ()
#КонецЕсли